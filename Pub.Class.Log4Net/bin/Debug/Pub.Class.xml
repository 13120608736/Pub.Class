<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pub.Class</name>
    </assembly>
    <members>
        <member name="T:Pub.Class.IAddIn">
            <summary>
            插件接口
            
            修改纪录
                2011.07.01 版本：1.0 livexy 创建此接口
            
            </summary>
        </member>
        <member name="T:Pub.Class.IPlugin">
            <summary>
            插件接口
            
            修改纪录
                2012.01.10 版本：1.0 livexy 创建此接口
            
            </summary>
        </member>
        <member name="M:Pub.Class.IPlugin.Main(System.String[])">
            <summary>
            执行入口
            </summary>
            <param name="args">参数</param>
        </member>
        <member name="T:Pub.Class.Pager">
            <summary>
            分页显示类
            
            修改纪录
                2006.05.09 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.Pager.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Pub.Class.Pager.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="Url">URL</param>
            <param name="PageIndex">当前页</param>
            <param name="TotalPage">总页</param>
            <param name="PageSize">页大小</param>
            <param name="TotalRecord">总记录数</param>
            <param name="StyleName">样式 默认BasePager</param>
        </member>
        <member name="M:Pub.Class.Pager.SetData(System.Web.UI.Page,System.String)">
            <summary>
            填充Html代码
            </summary>
            <param name="Page">当前page</param>
            <param name="CtrlID">输出到哪个HTML控件中</param>
        </member>
        <member name="M:Pub.Class.Pager.GetData(System.String)">
            <summary>
            取分页JS代码
            </summary>
            <param name="CtrlID">输出到哪个HTML控件中</param>
        </member>
        <member name="M:Pub.Class.Pager.GetPager(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            生成分页HTML代码 « 1 2 3 4 5 6 »
            </summary>
            <param name="curPage">当前页</param>
            <param name="countPage">总页数</param>
            <param name="url">URL</param>
            <param name="extendPage">输出页数</param>
            <returns>生成分页HTML代码 « 1 2 3 4 5 6 »</returns>
        </member>
        <member name="M:Pub.Class.Pager.GetImgPager(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            图片分页 « 1 2 3 4 5 6 »
            </summary>
            <param name="curPage">当前页</param>
            <param name="countPage">总页数</param>
            <param name="url">URL</param>
            <param name="extendPage">输出页数</param>
            <returns>图片分页 « 1 2 3 4 5 6 »</returns>
        </member>
        <member name="M:Pub.Class.Pager.GetPager2(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            生成分页HTML代码 上一页 « 1 2 3 4 5 6 » 下一页
            </summary>
            <param name="curPage">当前页</param>
            <param name="countPage">总页数</param>
            <param name="url">URL</param>
            <param name="extendPage">输出页数</param>
            <returns>生成分页HTML代码 上一页 « 1 2 3 4 5 6 » 下一页</returns>
        </member>
        <member name="M:Pub.Class.Pager.GetDiscuzNTPager(System.Int32,System.Int32,System.String,System.String@,System.Int32)">
            <summary>
            DiscuzNT 生成分页HTML代码 上一页 « 1 2 3 4 5 6 » 页数 下一页
            </summary>
            <param name="curPage">当前页</param>
            <param name="countPage">总页数</param>
            <param name="url">URL</param>
            <param name="extendPage">输出页数</param>
            <param name="jsCode">js代码</param>
            <returns>DiscuzNT 生成分页HTML代码 上一页 « 1 2 3 4 5 6 » 页数 下一页</returns>
        </member>
        <member name="M:Pub.Class.Pager.GetDiscuzNTPager(System.Int32,System.Int32,System.String,System.String@,System.Int32,System.Int32)">
            <summary>
            DiscuzNT 生成分页HTML代码 上一页 « 1 2 3 4 5 6 » 页数 记录数 下一页
            </summary>
            <param name="curPage">当前页</param>
            <param name="countPage">总页数</param>
            <param name="url">URL</param>
            <param name="extendPage">输出页数</param>
            <param name="jsCode">js代码</param>
            <param name="totals">记录总数</param>
            <returns>DiscuzNT 生成分页HTML代码 上一页 « 1 2 3 4 5 6 » 页数 记录数 下一页</returns>
        </member>
        <member name="M:Pub.Class.Pager.GetBasePager(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            生成分页HTML代码 [首页] [上一页] [下一页] [尾页]
            </summary>
            <param name="curPage">当前页</param>
            <param name="countPage">总页数</param>
            <param name="url">URL</param>
            <param name="extendPage">输出页数</param>
            <returns>生成分页HTML代码 [首页] [上一页] [下一页] [尾页]</returns>
        </member>
        <member name="M:Pub.Class.Pager.GetPager3(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            生成分页HTML代码 1 2 3 4 5 6 
            </summary>
            <param name="curPage">当前页</param>
            <param name="countPage">总页数</param>
            <param name="url">URL</param>
            <param name="extendPage">输出页数</param>
            <returns>生成分页HTML代码 1 2 3 4 5 6 </returns>
        </member>
        <member name="M:Pub.Class.Pager.GetBasePager2(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            生成分页HTML代码 首页 上一页 1 2 3 4 5 6 下一页 尾页
            </summary>
            <param name="curPage">当前页</param>
            <param name="countPage">总页数</param>
            <param name="url">URL</param>
            <param name="extendPage">输出页数</param>
            <returns>生成分页HTML代码 首页 上一页 1 2 3 4 5 6 下一页 尾页</returns>
        </member>
        <member name="P:Pub.Class.Pager.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Pub.Class.Pager.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:Pub.Class.Pager.TotalPage">
            <summary>
            总页
            </summary>
        </member>
        <member name="P:Pub.Class.Pager.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:Pub.Class.Pager.TotalRecord">
            <summary>
            总记录
            </summary>
        </member>
        <member name="P:Pub.Class.Pager.StyleName">
            <summary>
            样式
            </summary>
        </member>
        <member name="P:Pub.Class.Pager.HAlign">
            <summary>
            对齐方式
            </summary>
        </member>
        <member name="P:Pub.Class.Pager.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="T:Pub.Class.Pager.Align">
            <summary>
            对齐方式
            </summary>
        </member>
        <member name="F:Pub.Class.Pager.Align.Left">
            <summary>
            左对齐
            </summary>
        </member>
        <member name="F:Pub.Class.Pager.Align.Center">
            <summary>
            居中
            </summary>
        </member>
        <member name="F:Pub.Class.Pager.Align.Right">
            <summary>
            右对齐
            </summary>
        </member>
        <member name="T:Pub.Class.FuncExtensions">
            <summary>
            函数扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.FuncExtensions.Fix``2(System.Func{System.Func{``0,``1},System.Func{``0,``1}})">
            <summary>
            执行递归
            </summary>
            <example>
            <code>
            var fac = Fix&lt;int, int>(f => x => x &lt;= 1 ? 1 : x * f(x - 1)); // 5 * 4 * 3 * 2 * 1
            var fib = Fix&lt;int, int>(f => x => x &lt;= 1 ? 1 : f(x - 1) + f(x - 2)); //菲波纳契数列
            var fib1 = FuncExtensions.Fix&lt;int, int>(f => x => x &lt; 2 ? x : f(x - 1) + f(x - 2)); //菲波纳契数列
                public IEnumerable GetCourseSeriesTree(int parentID) {
                    IList&lt;CC_CourseSeries> list = CC_CourseSeriesFactory.Instance().SelectCourseSeriesListByCustomerID((int)CurrentUser.CustomerID, true);
                    return FuncExtensions.Fix&lt;int, IEnumerable>(f => p => { 
                        var list2 = list.Where(o => o.ParentID == p).Select(o => new {
                            id = o.SeriesID,
                            name = o.SeriesName.UnHtml(),
                            node = f((int)o.SeriesID)
                        });
                        return list2;
                    })(parentID);
                }
            </code>
            </example>
            <typeparam name="T">T类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="f">Func委托函数</param>
            <returns>Func委托函数</returns>
        </member>
        <member name="M:Pub.Class.FuncExtensions.Fix``3(System.Func{System.Func{``0,``1,``2},System.Func{``0,``1,``2}})">
            <summary>
            执行递归
            </summary>
            <example>
            <code>
            var gcd = Fix&lt;int, int, int>(f => (x, y) => y == 0 ? x : f(y, x % y)); //“辗转相除法”计算最大公约数
            </code>
            </example>
            <typeparam name="T1">T1类型</typeparam>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="f">Func委托函数</param>
            <returns>Func委托函数</returns>
        </member>
        <member name="M:Pub.Class.FuncExtensions.TailFix``2(System.Func{System.Func{``0,``1},``0,``1})">
            <summary>
            执行尾递归
            </summary>
            <typeparam name="T1">T1类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="f">Func委托函数</param>
            <returns>Func委托函数</returns>
        </member>
        <member name="M:Pub.Class.FuncExtensions.TailFix``3(System.Func{System.Func{``0,``1,``2},``0,``1,``2})">
            <summary>
            执行尾递归
            </summary>
            <example>
            <code>
            var fac1 = FuncExtensions.TailFix&lt;long, long, long>((f, n, a) => n == 1 ? a : f(n - 1, a * n));
            Func&lt;long, long> fac2 = n => n == 0 ? 1 : fac1(n, 1);
            Msg.Write(fac1(50, 1));
            Msg.Write(fac2(50));
            var fib2 = FuncExtensions.TailFix&lt;long, long, long, long>((f, n, a1, a2) => n == 0 ? a1 : f(n - 1, a2, a1 + a2));
            Msg.Write(fib2(5, 0, 1));
            </code>
            </example>
            <typeparam name="T1">T1类型</typeparam>
            <typeparam name="T2">T2类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="f">Func委托函数</param>
            <returns>Func委托函数</returns>
        </member>
        <member name="M:Pub.Class.FuncExtensions.TailFix``4(System.Func{System.Func{``0,``1,``2,``3},``0,``1,``2,``3})">
            <summary>
            执行尾递归
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.FuncExtensions.Map``2(System.Func{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            遍历
            </summary>
            <typeparam name="T">T类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="f">Func委托函数</param>
            <param name="source">源</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.FuncExtensions.Retry``1(System.Func{``0},System.Int32,System.Int32,System.Boolean,System.Action)">
            <summary>
            重试方法
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="action">方法</param>
            <param name="numRetries">重试次数</param>
            <param name="retryTimeout">延时多长时间后重试，单位毫秒</param>
            <param name="throwIfFail">经过几轮重试操作后依然发生异常时是否将异常抛出</param>
            <param name="onFailureAction">操作失败执行的方法</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.TraceLog">
            <summary>
            日志管理类
            
            修改纪录
                2006.05.03 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="T:Pub.Class.ILog">
            <summary>
            写日志
            
            修改纪录
                2013.02.12 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.ILog.Write(System.String,System.Text.Encoding)">
            <summary>
            写日志
            </summary>
            <param name="msg">消息</param>
            <param name="encoding">编码</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.TraceLog.Write(System.String,System.Text.Encoding)">
            <summary>
            写日志
            </summary>
            <param name="msg">消息</param>
            <param name="encoding">编码</param>
            <returns>true/false</returns>
        </member>
        <member name="T:Pub.Class.DateExtensions">
            <summary>
            日期扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetTimeSpan(System.DateTime,System.DateTime)">
            <summary>
            时间差
            </summary>
            <param name="startTime">开始时间</param>
            <param name="endTime">结束时间</param>
            <returns>TimeSpan时间差</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToDateTime(System.DateTime)">
            <summary>
            日期转字符串yyyy-MM-dd HH:mm:ss
            </summary>
            <param name="time">日期</param>
            <returns>转字符串yyyy-MM-dd HH:mm:ss</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToDate(System.DateTime)">
            <summary>
            日期转字符串yyyy-MM-dd
            </summary>
            <param name="time">日期</param>
            <returns>转字符串yyyy-MM-dd</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToTime(System.DateTime)">
            <summary>
            日期转字符串HH:mm:ss
            </summary>
            <param name="time">日期</param>
            <returns>转字符串HH:mm:ss</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToHHmm(System.DateTime)">
            <summary>
            日期转字符串HH:mm
            </summary>
            <param name="time">日期</param>
            <returns>转字符串HH:mm</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToDateTimeF(System.DateTime)">
            <summary>
            日期转字符串yyyy-MM-dd HH:mm:ss.fffffff
            </summary>
            <param name="time">日期</param>
            <returns>转字符串yyyy-MM-dd HH:mm:ss.fffffff</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToDateTimeFFF(System.DateTime)">
            <summary>
            日期转字符串yyyy-MM-dd HH:mm:ss.fff
            </summary>
            <param name="time">日期</param>
            <returns>转字符串yyyy-MM-dd HH:mm:ss.fff</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToAge(System.DateTime)">
            <summary>
            取年龄
            </summary>
            <param name="dateOfBirth">生日日期</param>
            <returns>返回年龄</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToAge(System.DateTime,System.DateTime)">
            <summary>
            取年龄
            </summary>
            <param name="dateOfBirth">生日日期</param>
            <param name="referenceDate">参考日期</param>
            <returns>返回年龄</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetCountDaysOfMonth(System.DateTime)">
            <summary>
            这月多少天
            </summary>
            <param name="date">日期</param>
            <returns>天数</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            这月的第一天
            </summary>
            <param name="date">日期</param>
            <returns>这月的第一天DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetFirstDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            这月的第一天
            </summary>
            <param name="date">日期</param>
            <param name="dayOfWeek">星期几</param>
            <returns>这月的第一天DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetLastDayOfMonth(System.DateTime)">
            <summary>
            这月的最后天
            </summary>
            <param name="date">日期</param>
            <returns>这月的最后天DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetLastDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            这月的最后天
            </summary>
            <param name="date">日期</param>
            <param name="dayOfWeek">星期几</param>
            <returns>这月的最后天DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.IsToday(System.DateTime)">
            <summary>
            今天否
            </summary>
            <param name="dt">日期</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.IsToday(System.DateTimeOffset)">
            <summary>
            今天否
            </summary>
            <param name="dto">时间点</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            重值时间
            </summary>
            <param name="date">日期</param>
            <param name="hours">时</param>
            <param name="minutes">分</param>
            <param name="seconds">秒</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.SetTime(System.DateTime,System.TimeSpan)">
            <summary>
            重值时间
            </summary>
            <param name="date">日期</param>
            <param name="time">时间</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToDateTimeOffset(System.DateTime)">
            <summary>
            ToDateTimeOffset 日期转时间点
            </summary>
            <param name="localDateTime">时间</param>
            <returns>DateTimeOffset</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToDateTimeOffset(System.DateTime,System.TimeZoneInfo)">
            <summary>
            ToDateTimeOffset 日期转时间点
            </summary>
            <param name="localDateTime">时间</param>
            <param name="localTimeZone">localTimeZone</param>
            <returns>DateTimeOffset</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            这周的第一天
            </summary>
            <param name="date">日期</param>
            <returns>这周的第一天DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetFirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            这周的第一天
            </summary>
            <param name="date">日期</param>
            <param name="cultureInfo">区域设置</param>
            <returns>这周的第一天DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetLastDayOfWeek(System.DateTime)">
            <summary>
            这周的最后一天
            </summary>
            <param name="date">日期</param>
            <returns>这周的最后一天DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetLastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            这周的最后一天
            </summary>
            <param name="date">日期</param>
            <param name="cultureInfo">区域设置</param>
            <returns>这周的最后一天DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            周日
            </summary>
            <param name="date">时间</param>
            <param name="weekday">星期几</param>
            <returns>周日DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetWeekday(System.DateTime,System.DayOfWeek,System.Globalization.CultureInfo)">
            <summary>
            周日
            </summary>
            <param name="date">时间</param>
            <param name="weekday">星期几</param>
            <param name="cultureInfo">区域设置</param>
            <returns>周日DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetNextWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            下周日
            </summary>
            <param name="date">时间</param>
            <param name="weekday">星期几</param>
            <returns>下周日DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetPreviousWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            上周日
            </summary>
            <param name="date">时间</param>
            <param name="weekday">星期几</param>
            <returns>上周日DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.SetTime(System.DateTimeOffset,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间
            </summary>
            <param name="date">时间点</param>
            <param name="hours">时</param>
            <param name="minutes">分</param>
            <param name="seconds">秒</param>
            <returns>DateTimeOffset</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.SetTime(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            设置时间
            </summary>
            <param name="date">时间点</param>
            <param name="time">时间</param>
            <returns>DateTimeOffset</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.SetTime(System.DateTimeOffset,System.TimeSpan,System.TimeZoneInfo)">
            <summary>
            设置时间
            </summary>
            <param name="date">时间点</param>
            <param name="time">时间</param>
            <param name="localTimeZone">TimeZoneInfo</param>
            <returns>DateTimeOffset</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToLocalDateTime(System.DateTimeOffset)">
            <summary>
            设置时间
            </summary>
            <param name="dateTimeUtc">时间点</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToLocalDateTime(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
            设置时间
            </summary>
            <param name="dateTimeUtc">时间点</param>
            <param name="localTimeZone">TimeZoneInfo</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToAgo(System.DateTime)">
            <summary>
            ***前 如1分钟前 1小时前
            </summary>
            <param name="date">时间</param>
            <returns>***前 如1分钟前 1小时前</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToAgo(System.DateTime,System.DateTime)">
            <summary>
            把两个时间差，三天内的时间用今天，昨天，前天表示，后跟时间，无日期
            </summary>
            <param name="time">被比较的时间</param>
            <param name="currentDateTime">目标时间</param>
            <returns>把两个时间差，三天内的时间用今天，昨天，前天表示，后跟时间，无日期</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.WeekOfYear(System.DateTime)">
            <summary>
            一年多少周
            </summary>
            <param name="datetime">日期</param>
            <returns>一年多少周</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.WeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule)">
            <summary>
            一年多少周
            </summary>
            <param name="datetime">日期</param>
            <param name="weekrule">第一周的规则</param>
            <returns>一年多少周</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.WeekOfYear(System.DateTime,System.DayOfWeek)">
            <summary>
            一年多少周
            </summary>
            <param name="datetime">日期</param>
            <param name="firstDayOfWeek">星期几</param>
            <returns>一年多少周</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.WeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
            一年多少周
            </summary>
            <param name="datetime">日期</param>
            <param name="weekrule">第一周的规则</param>
            <param name="firstDayOfWeek">星期几</param>
            <returns>一年多少周</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.DateDiff(System.DateTime,System.DateTime,Microsoft.VisualBasic.DateInterval)">
            <summary>
            日期相减
            </summary>
            <param name="value">开始时间</param>
            <param name="date">结束时间</param>
            <param name="interval">格式化 DateInterval.Year DateInterval.Month DateInterval.Day DateInterval.Hour DateInterval.Minute DateInterval.Second DateInterval.WeekOfYear DateInterval.Quarter</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.GetQuarter(System.Int32)">
            <summary>
            第几季度
            </summary>
            <param name="month">日期</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.IsWeekday(System.DateTime)">
            <summary>
            周日否
            </summary>
            <param name="date">日期</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.IsWeekend(System.DateTime)">
            <summary>
            周末否
            </summary>
            <param name="value">日期</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime)">
            <summary>
            日期相减
            </summary>
            <param name="interval">格式化 DateInterval.Year DateInterval.Month DateInterval.Day DateInterval.Hour DateInterval.Minute DateInterval.Second DateInterval.WeekOfYear DateInterval.Quarter</param>
            <param name="date1">开始时间</param>
            <param name="date2">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.IsLeapYear(System.DateTime)">
            <summary>
            闰年否
            </summary>
            <param name="value">日期</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.DayBegin(System.DateTime)">
            <summary>
            一天的开始时间 如2011-1-1 0:0:0
            </summary>
            <param name="date">日期</param>
            <returns>一天的开始时间 如2011-1-1 0:0:0</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.DayEnd(System.DateTime)">
            <summary>
            一天的结束时间 如2011-1-1 23:59:59
            </summary>
            <param name="date">日期</param>
            <returns>一天的结束时间 如2011-1-1 23:59:59</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToSqlDate(System.Object)">
            <summary>
            SQL日期
            </summary>
            <param name="obj">时间</param>
            <returns>SQL日期</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.IsOnTime(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            IsOnTime 时间val与requiredTime之间的差值是否在maxToleranceInSecs范围之内。
            </summary>
            <param name="requiredTime">开始时间</param>
            <param name="val">结束时间</param>
            <param name="maxToleranceInSecs">范围</param>
            <returns>IsOnTime 时间val与requiredTime之间的差值是否在maxToleranceInSecs范围之内。 true/false</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.IsOnTime(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            IsOnTime 对于循环调用，时间val与startTime之间的差值(>0)对cycleSpanInSecs求余数的结果是否在maxToleranceInSecs范围之内。
            </summary>
            <param name="startTime">开始时间</param>
            <param name="val">结束时间</param>
            <param name="cycleSpanInSecs">对cycleSpanInSecs求余数</param>
            <param name="maxToleranceInSecs">范围之内</param>
            <returns>IsOnTime 对于循环调用，时间val与startTime之间的差值(>0)对cycleSpanInSecs求余数的结果是否在maxToleranceInSecs范围之内。 true/false</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToRFC822Time(System.DateTime)">
            <summary>
            RFC822
            </summary>
            <param name="date">时间</param>
            <returns>RFC822时间字符串</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToUpper(System.DateTime)">
            <summary>
            日期转大写
            </summary>
            <param name="time">当前时间</param>
            <returns>日期转大写</returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.ToJavascriptDate(System.DateTime)">
            <summary>
            ToJavascriptDate
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.NextMonth(System.DateTime)">
            <summary>
            下个月
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DateExtensions.PrevMonth(System.DateTime)">
            <summary>
            上个月
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.IniFile">
            <summary>
            INI文件操作 ini文件第一行必须为空行
            
            修改纪录
                2007.03.04 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            IniFile ini = new IniFile("c:\\test.ini");
            ini.ReadValue("system", "winsize");
            ini.WriteValue("system", "winsize", "1024x768");
            ini.Remove("system");
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.IniFile.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="iniPath">文件名  ini文件第一行必须为空行，文件编码必须是ANSI或Unicode不能为UTF8</param>
        </member>
        <member name="M:Pub.Class.IniFile.WriteValue(System.String,System.String,System.String)">
            <summary>
            向INI文件写数据
            </summary>
            <param name="section">结点</param>
            <param name="key">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:Pub.Class.IniFile.ReadValue(System.String,System.String)">
            <summary>
            向INI文件读数据
            </summary>
            <param name="section">结点</param>
            <param name="key">名称</param>
            <returns>数据</returns>
        </member>
        <member name="M:Pub.Class.IniFile.ReadValues(System.String)">
            <summary>
            返回指定section下的所有key和value
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IniFile.ReadValues">
            <summary>
            返回所有section、key和value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IniFile.ReadSections">
            <summary>
            读所有section
            </summary>
            <returns>读所有数据</returns>
        </member>
        <member name="M:Pub.Class.IniFile.ReadKeys(System.String)">
            <summary>
            读section下的所有key
            </summary>
            <param name="section">结点</param>
            <returns>读section下的所有数据</returns>
        </member>
        <member name="M:Pub.Class.IniFile.ReadKeys(System.String,System.String)">
            <summary>
            读section下的所有数据
            </summary>
            <param name="section">结点</param>
            <param name="key">名称</param>
            <returns>读section下的所有数据</returns>
        </member>
        <member name="M:Pub.Class.IniFile.ByteToString(System.Byte[])">
            <summary>
            ByteToString
            </summary>
            <param name="sectionByte">结点</param>
            <returns>读section下的所有数据</returns>
        </member>
        <member name="M:Pub.Class.IniFile.RemoveAll">
            <summary>
            删除所有
            </summary>
        </member>
        <member name="M:Pub.Class.IniFile.Remove(System.String)">
            <summary>
            删除section
            </summary>
            <param name="section">结点</param>
        </member>
        <member name="M:Pub.Class.IniFile.Remove(System.String,System.String)">
            <summary>
            删除key
            </summary>
            <param name="section">结点</param>
            <param name="key">key</param>
        </member>
        <member name="P:Pub.Class.IniFile.Item(System.String,System.String)">
            <summary>
            数组属性 使用ini["system","win_width"] = 0;
            </summary>
            <param name="section">结点</param>
            <param name="key">名称</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.Cookie2">
            <summary>
            Cookie操作
            
            修改纪录
                2012.01.20 版本：1.5 livexy 删除Set2/Get2
                2010.02.11 版本：1.4 livexy 添加清除Cookie
                2009.07.20 版本：1.3 livexy 添加Set2/Get2
                2009.06.01 版本：1.2 livexy 修改对COOKIES数据进行AES加密
                2009.04.20 版本：1.1 livexy 添加对P3P支持
                2006.05.01 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            Cookie2.Set("UserName", "cexo255");
            Cookie2.Get("UserName");
            Cookie2.SetP3PHeader();
            Cookie2.Set("HJ.CurrentUser", "UserName", "cexo255");
            Cookie2.Get("HJ.CurrentUser", "UserName");
            Cookie2.Clear();
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.Cookie2.SetP3PHeader">
            <summary>
            设置 Cookie P3P Header 解决跨域访问 Cookie 。
            </summary>
        </member>
        <member name="M:Pub.Class.Cookie2.Set(System.String,System.String)">
            <summary>
            设置 Cookie
            </summary>
            <param name="key">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:Pub.Class.Cookie2.Set(System.String,System.String,System.DateTime)">
            <summary>
            设置 Cookie
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expires">到期日期</param>
        </member>
        <member name="M:Pub.Class.Cookie2.Set(System.String,System.String,System.Int32)">
            <summary>
            设置Cookies值
            </summary>
            <param name="key">Cookies名称</param>
            <param name="value">Cookies名称对应的值</param>
            <param name="days">有效期 天数</param>
        </member>
        <member name="M:Pub.Class.Cookie2.Set(System.String,System.String,System.DateTime,System.String)">
            <summary>
            设置 Cookie
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expires">到期日期</param>
            <param name="domain">域</param>
        </member>
        <member name="M:Pub.Class.Cookie2.Set(System.String,System.String,System.String)">
            <summary>
            设置 Cookie
            </summary>
            <param name="name">名称</param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Pub.Class.Cookie2.Set(System.String,System.String,System.String,System.String)">
            <summary>
            设置 Cookie
            </summary>
            <param name="name">名称</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="domain">域</param>
        </member>
        <member name="M:Pub.Class.Cookie2.Set(System.String,System.String,System.String,System.DateTime)">
            <summary>
            设置 Cookie
            </summary>
            <param name="name">名称</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expires">到期日期</param>
        </member>
        <member name="M:Pub.Class.Cookie2.Set(System.String,System.String,System.String,System.Int32)">
            <summary>
            设置Cookies值
            </summary>
            <param name="name">名称</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="days">有效期 天数</param>
        </member>
        <member name="M:Pub.Class.Cookie2.Set(System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            设置 Cookie
            </summary>
            <param name="name">名称</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expires">到期日期</param>
            <param name="domain">域</param>
        </member>
        <member name="M:Pub.Class.Cookie2.Set(System.String,System.String,System.String,System.DateTime,System.String,System.String,System.Boolean)">
            <summary>
            设置 Cookie
            </summary>
            <param name="name">名称</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expires">到期日期</param>
            <param name="domain">域</param>
            <param name="path">虚拟路径</param>
            <param name="httpOnly">是否可通过客户端脚本访问</param>
        </member>
        <member name="M:Pub.Class.Cookie2.Set(System.String,System.String,System.String,System.DateTime,System.String,System.String)">
            <summary>
            设置 Cookie
            </summary>
            <param name="name">名称</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expires">到期日期</param>
            <param name="domain">域</param>
            <param name="path">虚拟路径</param>
        </member>
        <member name="M:Pub.Class.Cookie2.Set(System.String,System.String,System.String,System.DateTime,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            设置 Cookie
            </summary>
            <param name="name">名称</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expires">到期日期</param>
            <param name="domain">域</param>
            <param name="path">虚拟路径</param>
            <param name="httpOnly">是否可通过客户端脚本访问</param>
            <param name="secure">是否使用安全套接字层 (SSL)（即仅通过 HTTPS）传输 Cookie</param>
        </member>
        <member name="M:Pub.Class.Cookie2.Get(System.String)">
            <summary>
            取Cookies值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Cookie2.Get(System.String,System.String)">
            <summary>
            取Cookies值
            </summary>
            <param name="name">名称</param>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Cookie2.Clear">
            <summary>
            清除Cookies
            </summary>
        </member>
        <member name="T:Pub.Class.XmlSerializerString">
            <summary>
            XML序列化和反序列化
            
            修改纪录
                2011.07.11 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            User u1 = new User() { UserID = 1000, Name = "熊华春" };
            var serialize = new XmlSerialize();
            string s = serialize.Serialize(u1);
            serialize.Deserialize&lt;User>(s);
            </example>
            </code>
            </summary>
        </member>
        <member name="T:Pub.Class.ISerializeString">
            <summary>
            序列化接口
            
            修改纪录
                2011.07.11 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.ISerializeString.Serialize``1(``0)">
            <summary>
            序列化
            </summary>
            <param name="o">对像</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Pub.Class.ISerializeString.Deserialize``1(System.String)">
            <summary>
            data反序列化成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="data">内容</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.ISerializeString.SerializeFile``1(``0,System.String)">
            <summary>
            序列成文件
            </summary>
            <param name="o">对像</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Pub.Class.ISerializeString.DeserializeFile``1(System.String)">
            <summary>
            文件反序列化成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="fileName">文件名</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.ISerializeString.SerializeEncode``1(``0,System.String)">
            <summary>
            序列化后DES加密
            </summary>
            <param name="o">对像</param>
            <param name="key">加密KEY</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.ISerializeString.DecodeDeserialize``1(System.String,System.String)">
            <summary>
            DES解密后反序列化成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="data">密文</param>
            <param name="key">解密KEY</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.XmlSerializerString.Serialize``1(``0)">
            <summary>
            序列成XML
            </summary>
            <param name="o">对像</param>
            <returns>XML</returns>
        </member>
        <member name="M:Pub.Class.XmlSerializerString.Deserialize``1(System.String)">
            <summary>
            XML反序列化成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="data">xml</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.XmlSerializerString.SerializeFile``1(``0,System.String)">
            <summary>
            序列成XML文件
            </summary>
            <param name="o">对像</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Pub.Class.XmlSerializerString.DeserializeFile``1(System.String)">
            <summary>
            XML文件反序列化成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="fileName">文件名</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.XmlSerializerString.SerializeEncode``1(``0,System.String)">
            <summary>
            序列成XML后DES加密
            </summary>
            <param name="o">对像</param>
            <param name="key">加密KEY</param>
            <returns>XML密文</returns>
        </member>
        <member name="M:Pub.Class.XmlSerializerString.DecodeDeserialize``1(System.String,System.String)">
            <summary>
            DES解密后反序列成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="data">XML密文</param>
            <param name="key">解密KEY</param>
            <returns>对像</returns>
        </member>
        <member name="T:Pub.Class.HeapSorter`1">
            <summary>
            HeapSorter 堆排序 O(n*log2n)~O(n*log2n) | O(1) 
            
            修改纪录
                2010.01.12 版本：1.0 livexy 创建此类
            
            </summary>    
        </member>
        <member name="M:Pub.Class.HeapSorter`1.Sort(System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            堆排序
            </summary>
            <param name="list"></param>
            <param name="isAsc"></param>
        </member>
        <member name="M:Pub.Class.HeapSorter`1.Adjust(System.Collections.Generic.IList{`0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            堆排序
            </summary>
            <param name="list"></param>
            <param name="nodeIndx"></param>
            <param name="maxAdjustIndx"></param>
            <param name="isAsc"></param>
        </member>
        <member name="T:Pub.Class.InsertionSorter`1">
            <summary>
            InsertionSorter 插入排序 O(n2) | O(1) 
            
            修改纪录
                2010.01.12 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.InsertionSorter`1.Sort(System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            插入排序
            </summary>
            <param name="list"></param>
            <param name="isAsc"></param>
        </member>
        <member name="T:Pub.Class.MergeSorter`1">
            <summary>
            MergeSorter 归并排序
            
            修改纪录
                2010.01.12 版本：1.0 livexy 创建此类
            
            </summary>    
        </member>
        <member name="M:Pub.Class.MergeSorter`1.Sort(System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            归并排序
            </summary>
            <param name="list"></param>
            <param name="isAsc"></param>
        </member>
        <member name="M:Pub.Class.MergeSorter`1.Merge(System.Collections.Generic.IList{`0},System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            归并两个已经排序的子序列为一个有序的序列
            </summary>
            <param name="list">原始序列</param>
            <param name="startIndx">归并起始index</param>
            <param name="splitIndx">第一段结束的index</param>
            <param name="endIndx">第二段结束的index</param>
            <param name="sortedList">排序后的序列</param>
            <param name="isASC">是否升序</param>
        </member>
        <member name="T:Pub.Class.QuickSorter`1">
            <summary>
            QuickSorter 快速排序 O(n*log2n)~O(n2) | O(log2n)~O(n) 
            
            修改纪录
                2010.01.12 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.QuickSorter`1.Sort(System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            快速排序
            </summary>
            <param name="list"></param>
            <param name="isAsc"></param>
        </member>
        <member name="T:Pub.Class.CopyOptions">
            <summary>
            COPY 选项
            
            修改纪录
                2006.05.02 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="F:Pub.Class.CopyOptions.CopyIfNewer">
            <summary>
            如果是新的
            </summary>
        </member>
        <member name="F:Pub.Class.CopyOptions.CopyAlways">
            <summary>
            总是
            </summary>
        </member>
        <member name="F:Pub.Class.CopyOptions.DoNotOverwrite">
            <summary>
            不覆盖
            </summary>
        </member>
        <member name="T:Pub.Class.FileDirectory">
            <summary>
            文件目录操作类
            
            修改纪录
                2006.05.02 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileWrite(System.String,System.Byte[],System.IO.FileMode)">
            <summary>
            字节写到文件
            </summary>
            <param name="bytes">字节</param>
            <param name="fileName">方件名</param>
            <param name="fileMode">FileMode</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileWrite(System.String,System.String)">
            <summary>
            写日志
            </summary>
            <param name="fileName">文件</param>
            <param name="str">消息</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileWrite(System.String,System.String,System.String)">
            <summary>
            写日志gb2312 UTF-8 线程安全
            </summary>
            <param name="fileName">文件</param>
            <param name="str">消息</param>
            <param name="encoding">编码gb2312 utf-8</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileWrite(System.String,System.String,System.Text.Encoding)">
            <summary>
            写日志 线程安全
            </summary>
            <param name="fileName">文件</param>
            <param name="str">消息</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileAsynWrite(System.String,System.String)">
            <summary>
            异步写日志 线程安全
            </summary>
            <param name="fileName">文件</param>
            <param name="str">消息</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileAsynWrite(System.String,System.String,System.Text.Encoding)">
            <summary>
            异步写日志 线程安全
            </summary>
            <param name="fileName">文件</param>
            <param name="str">消息</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.WriteForStreamWriter(System.String,System.String,System.Text.Encoding)">
            <summary>
            写日志 线程安全
            </summary>
            <param name="fileName">文件</param>
            <param name="str">消息</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.WriteForFileStream(System.String,System.String,System.Text.Encoding)">
            <summary>
            写日志 线程安全
            </summary>
            <param name="fileName">文件</param>
            <param name="str">消息</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileRead(System.String,System.Text.Encoding)">
            <summary>
            读取文件中的内容  线程安全
            </summary>
            <param name="fileName">文件名</param>
            <param name="encoding">编码</param>
            <returns>读取文件中的内容</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileReadAll(System.String,System.Text.Encoding)">
            <summary>
            读取文件中的内容  线程安全
            </summary>
            <param name="fileName">文件名</param>
            <param name="encoding">编码</param>
            <returns>读取文件中的内容</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.DirectoryVirtualCreate(System.String)">
            <summary>
            虚拟目录不存在时新建
            </summary>
            <param name="filePath">目录（相对路径:/）</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.MakeSureDirectoryPathExists(System.String)">
            <summary>
            创建目录 一次性建多级目录 决对路径 如:c:\test\test\test
            </summary>
            <param name="name">名称</param>
            <returns>创建是否成功</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.DirectoryCreate(System.String)">
            <summary>
            创建目录 一次性建多级目录 决对路径 如:c:\\test\\test\\test
            </summary>
            <param name="filePath">文件路径</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.DirectoryDelete(System.String)">
            <summary>
            目录删除
            </summary>
            <param name="DirectoryPath">目录路径</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.DirectoryExists(System.String)">
            <summary>
            目录是否存在
            </summary>
            <param name="folderPath">目录路径</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.DirectoryCopy(System.String,System.String,System.Boolean,Pub.Class.CopyOptions)">
            <summary>
            COPY目录
            </summary>
            <param name="Source">源</param>
            <param name="Destination">目标</param>
            <param name="Recursive">递归</param>
            <param name="Options">选项</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.DirectoryList(System.String)">
            <summary>
            取子目录 非子目录的子目录
            </summary>
            <param name="DirectoryPath">目录路径</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.DirectorySize(System.String)">
            <summary>
            取目录大小
            </summary>
            <param name="path">目录路径</param>
            <returns>取目录大小</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.DirectoryLastModified(System.String)">
            <summary>
            目录最后修改时间
            </summary>
            <param name="folderPath">目录路径</param>
            <returns>目录最后修改时间</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.APIDelete(System.String)">
            <summary>
            API删除
            </summary>
            <param name="path">目录路径</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileCopy(System.String,System.String,System.Boolean)">
            <summary>
            备份文件
            </summary>
            <param name="sourceFileName">源文件</param>
            <param name="destFileName">目标文件</param>
            <param name="overwrite">重写</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileExists(System.String)">
            <summary>
            返回文件是否存在
            </summary>
            <param name="filename">文件名</param>
            <returns>是否存在true/false</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileDeleteAll(System.String)">
            <summary>
            删除指定目录下的所有文件 
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileDelete(System.String)">
            <summary>
            删除指定文件
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileList(System.String)">
            <summary>
            取指定目录下的所有文件名
            </summary>
            <param name="path">文件路径</param>
            <returns>取指定目录下的所有文件名</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileList(System.String,System.Collections.Generic.IList{System.String}@,System.String)">
            <summary>
            取目录下的所有文件 递归
            </summary>
            <param name="path">文件路径</param>
            <param name="fileList">列表</param>
            <param name="delStr">删除的字符串</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileList(System.String,System.Boolean)">
            <summary>
            取目录下的所有文件
            </summary>
            <param name="DirectoryPath">目录路径</param>
            <param name="Recursive">是否递归</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileCompare(System.String,System.String)">
            <summary>
            文件比较
            </summary>
            <param name="FileName1">文件1</param>
            <param name="FileName2">文件2</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileDeleteNewerThan(System.String,System.DateTime,System.Boolean)">
            <summary>
            删除新文件
            </summary>
            <param name="Directory">目录</param>
            <param name="CompareDate">时间</param>
            <param name="Recursive">是否递归</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileDeleteOlderThan(System.String,System.DateTime,System.Boolean)">
            <summary>
            删除老文件
            </summary>
            <param name="Directory">目录</param>
            <param name="CompareDate">时间</param>
            <param name="Recursive">是否递归</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileRename(System.String,System.String)">
            <summary>
            文件改名
            </summary>
            <param name="FileName">文件名</param>
            <param name="NewFileName">新文件名</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileSize(System.String)">
            <summary>
            取文件大小
            </summary>
            <param name="path">文件路径</param>
            <returns>取文件大小</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileLastModified(System.String)">
            <summary>
            文件最后修改时间
            </summary>
            <param name="filePath">文件路径</param>
            <returns>文件最后修改时间</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.FileEncoding(System.String)">
            <summary>
            取文件编码
            </summary>
            <param name="fileName">文件名</param>
            <returns>取文件编码</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.GZipCompress(System.String,System.String)">
            <summary>
            GZipStream压缩文件
            </summary>
            <param name="inFilename">源文件</param>
            <param name="outFilename">新文件</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.GZipDecompress(System.String,System.String)">
            <summary>
            GZipStream解压文件
            </summary>
            <param name="inFileName">源文件</param>
            <param name="outFileName">新文件</param>
        </member>
        <member name="M:Pub.Class.FileDirectory.GetFileContent(System.String)">
            <summary>
            取文件内容
            </summary>
            <param name="filePath">文件路径</param>
            <returns>取文件内容</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.HashMD5(System.String)">
            <summary>
            计算指定文件的MD5值
            </summary>
            <param>指定文件的完全限定名称</param>
            <returns>返回值的字符串形式</returns>
        </member>
        <member name="M:Pub.Class.FileDirectory.HashSHA1(System.String)">
            <summary>
            计算指定文件的SHA1值
            </summary>
            <param>指定文件的完全限定名称</param>
            <returns>返回值的字符串形式</returns>
        </member>
        <member name="T:Pub.Class.IDataReaderExtensions">
            <summary>
            IDataReader扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToList``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            最快 IDataReader To 实体列表 IL
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToList&lt;UC_Member>(true);
            </code>
            </example>
            <typeparam name="TResult">实体</typeparam>
            <param name="dr">IDataReader扩展</param>
            <param name="isClose">是否关闭DataReader</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToEntity``1(System.Data.IDataReader)">
            <summary>
            实体转换 IL
            </summary>
            <typeparam name="TResult">实体</typeparam>
            <param name="dr">IDataReader扩展</param>
            <returns>实体</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToEntity``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            实体转换 IL
            </summary>
            <typeparam name="TResult">实体</typeparam>
            <param name="dr">IDataReader扩展</param>
            <param name="isClose">是否关闭DataReader</param>
            <returns>实体</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToList``1(System.Data.IDataReader)">
            <summary>
            最快 IDataReader To 实体列表 IL
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToList&lt;UC_Member>();
            </code>
            </example>
            <typeparam name="TResult">实体</typeparam>
            <param name="dr">IDataReader扩展</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToList2``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            IDataReader To 实体列表 反射CACHE 
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToList2&lt;UC_Member>(true);
            </code>
            </example>
            <typeparam name="TResult">实体</typeparam>
            <param name="dr">IDataReader扩展</param>
            <param name="isClose">是否关闭DataReader</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToList2``1(System.Data.IDataReader)">
            <summary>
            IDataReader To 实体列表 反射CACHE 
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToList2&lt;UC_Member>();
            </code>
            </example>
            <typeparam name="TResult">实体</typeparam>
            <param name="dr">IDataReader扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToList3``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            IDataReader To 实体列表 反射 
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToList3&lt;UC_Member>(true);
            </code>
            </example>
            <typeparam name="TResult">实体</typeparam>
            <param name="dr">IDataReader扩展</param>
            <param name="isClose">是否关闭DataReader</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToList3``1(System.Data.IDataReader)">
            <summary>
            IDataReader To 实体列表 反射 
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToList3&lt;UC_Member>();
            </code>
            </example>
            <typeparam name="TResult">实体</typeparam>
            <param name="dr">IDataReader扩展</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToDataReaderJson(System.Data.IDataReader,System.Boolean)">
            <summary>
            IDataReader 转JSON 速度最快
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToDataReaderJson(true);
            </code>
            </example>
            <param name="dr">IDataReader扩展</param>
            <param name="isClose">是否关闭DataReader</param>
            <returns>转JSON</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToJson(System.Data.IDataReader,System.Boolean)">
            <summary>
            IDataReader 转JSON 速度最快
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToJson(true);
            </code>
            </example>
            <param name="dr">IDataReader扩展</param>
            <param name="isClose">是否关闭DataReader</param>
            <returns>转JSON</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToDataReaderJson(System.Data.IDataReader)">
            <summary>
            IDataReader 转JSON 速度最快
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToDataReaderJson();
            </code>
            </example>
            <param name="dr">IDataReader扩展</param>
            <returns>转JSON</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToJson(System.Data.IDataReader,System.String[])">
            <summary>
            IDataReader 转JSON 速度最快
            </summary>
            <param name="dr">IDataReader扩展</param>
            <param name="fields">字段</param>
            <returns>转JSON</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToJson(System.Data.IDataReader,System.String[],System.String[])">
            <summary>
            IDataReader 转JSON 速度最快
            </summary>
            <param name="dr">IDataReader扩展</param>
            <param name="fields">字段</param>
            <param name="alias">别名</param>
            <returns>转JSON</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToJson(System.Data.IDataReader)">
            <summary>
            IDataReader 转JSON 速度最快
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToJson();
            </code>
            </example>
            <param name="dr">IDataReader扩展</param>
            <returns>转JSON</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.Get``1(System.Data.IDataReader,System.String)">
            <summary>
            取field的值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="reader">IDataReader扩展</param>
            <param name="field">字段</param>
            <returns>值</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.Get``1(System.Data.IDataReader,System.String,``0)">
            <summary>
            取field的值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="reader">IDataReader扩展</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToDataTable(System.Data.IDataReader,System.Boolean)">
            <summary>
            转DataTable
            </summary>
            <param name="dr">IDataReader扩展</param>
            <param name="isClose">是否关闭DataReader</param>
            <returns>转DataTable</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToDataTable(System.Data.IDataReader)">
            <summary>
            转DataTable
            </summary>
            <param name="dr">IDataReader扩展</param>
            <returns>转DataTable</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToCSV(System.Data.IDataReader,System.Char,System.Boolean)">
            <summary>
            通过IDataReader获得CSV格式数据
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToCSV(true);
            </code>
            </example>
            <param name="dr">IDataReader扩展</param>
            <param name="c">char</param>
            <param name="isClose">是否关闭DataReader</param>
            <returns>CSV字符串</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToCSV(System.Data.IDataReader)">
            <summary>
            通过IDataReader获得CSV格式数据
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToCSV();
            </code>
            </example>
            <param name="dr">IDataReader扩展</param>
            <returns>CSV字符串</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderExtensions.ToCSV(System.Data.IDataReader,System.Char)">
            <summary>
            通过IDataReader获得CSV格式数据
            </summary>
            <example>
            <code>
            Data.GetDbDataReader("Select MemberID,RealName from UC_Member").ToCSV('\t');
            </code>
            </example>
            <param name="dr">IDataReader扩展</param>
            <param name="c">char</param>
            <returns>CSV字符串</returns>
        </member>
        <member name="T:Pub.Class.MySqlPagerSQL">
            <summary>
            MySql分页  支持mysql
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            PagerSql pagerSql = new MySqlPagerSQL().GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email");
            </example>
            </code>
            </summary>
        </member>
        <member name="T:Pub.Class.IPagerSQL">
            <summary>
            分页SQL接口
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.IPagerSQL.GetSQL(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            分页SQL调用方法
            </summary>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="tableName">表名称</param>
            <param name="pk">主键</param>
            <param name="fieldList">字段列表</param>
            <param name="where">where条件 and or 开始</param>
            <param name="groupBy">分组条件</param>
            <param name="orderBy">排序条件</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:Pub.Class.MySqlPagerSQL.GetSQL(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            分页SQL调用方法
            </summary>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="tableName">表名称</param>
            <param name="pk">主键</param>
            <param name="fieldList">字段列表</param>
            <param name="where">where条件 and or 开始</param>
            <param name="groupBy">分组条件</param>
            <param name="orderBy">排序条件</param>
            <returns>分页SQL</returns>
        </member>
        <member name="T:Pub.Class.Js">
            <summary>
            Js操作类
            
            修改纪录
                2006.05.02 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.Js.Run(System.Web.UI.Page,System.String,System.Boolean)">
            <summary>
            运行JS代码
            </summary>
            <param name="Page">指定Page</param>
            <param name="strCode">要注册的代码</param>
            <param name="isTop">是否在头部/否则在尾部</param>
        </member>
        <member name="M:Pub.Class.Js.Run(System.Web.UI.Page,System.String,System.Boolean,System.String)">
            <summary>
            运行JS代码
            </summary>
            <param name="Page">指定Page</param>
            <param name="strCode">要注册的代码</param>
            <param name="isTop">是否在头部/否则在尾部</param>
            <param name="IDStr">Key</param>
        </member>
        <member name="M:Pub.Class.Js.Run(System.Web.UI.Page,System.Boolean,System.String)">
            <summary>
            清空指定注册的JS代码
            </summary>
            <param name="Page">指定Page</param>
            <param name="isTop">是否在头部/否则在尾部</param>
            <param name="IDStr">Key</param>
        </member>
        <member name="M:Pub.Class.Js.Alert(System.String)">
            <summary>
            提示信息
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:Pub.Class.Js.AlertEnd(System.String)">
            <summary>
            提示信息
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:Pub.Class.Js.Alert(System.Web.UI.Page,System.String)">
            <summary>
            提示信息
            </summary>
            <param name="Page">指定页</param>
            <param name="msg">消息</param>
        </member>
        <member name="M:Pub.Class.Js.Alert(System.Web.UI.Page,System.String,System.Boolean)">
            <summary>
            提示信息
            </summary>
            <param name="Page">指定页</param>
            <param name="msg">消息</param>
            <param name="isTop">是否在头部/否则在尾部</param>
        </member>
        <member name="M:Pub.Class.Js.Import(System.Web.UI.Page,System.String,System.Boolean)">
            <summary>
            注册一个处部JS文件/或CSS文件
            </summary>
            <param name="Page">指定页</param>
            <param name="filePath">文件</param>
            <param name="isTop">是否在头部/否则在尾部</param>
        </member>
        <member name="M:Pub.Class.Js.JsLoadCss(System.Web.UI.Page,System.String)">
            <summary>
            注册一个处部CSS文件
            </summary>
            <param name="page">Page</param>
            <param name="cssFile">CSS文件</param>
        </member>
        <member name="M:Pub.Class.Js.LoadCss(System.Web.UI.WebControls.PlaceHolder,System.String)">
            <summary>
            注册一个处部CSS文件
            </summary>
            <param name="placeHolder">PlaceHolder组件</param>
            <param name="cssFile">CSS文件</param>
        </member>
        <member name="M:Pub.Class.Js.LoadCss(System.Web.UI.Page,System.String)">
            <summary>
            注册一个处部CSS文件
            </summary>
            <param name="page">Page</param>
            <param name="cssFile">CSS文件</param>
        </member>
        <member name="M:Pub.Class.Js.AddAttr(System.Web.UI.WebControls.WebControl,System.String,System.String)">
            <summary>
            添加属性
            </summary>
            <param name="Control">WebControl</param>
            <param name="eventStr">名称</param>
            <param name="MsgStr">内容</param>
        </member>
        <member name="M:Pub.Class.Js.AddAttr(System.Web.UI.HtmlControls.HtmlGenericControl,System.String,System.String)">
            <summary>
            添加属性
            </summary>
            <param name="Control">HtmlGenericControl</param>
            <param name="eventStr">名称</param>
            <param name="MsgStr">内容</param>
        </member>
        <member name="M:Pub.Class.Js.AddAttr(System.Web.UI.HtmlControls.HtmlControl,System.String,System.String)">
            <summary>
            添加属性
            </summary>
            <param name="Control">HtmlGenericControl</param>
            <param name="eventStr">名称</param>
            <param name="MsgStr">内容</param>
        </member>
        <member name="M:Pub.Class.Js.ChkFormData(System.Web.UI.Page,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            验证数据完整性
            </summary>
            <param name="page">Page</param>
            <param name="dataValue">内容</param>
            <param name="divObjStr">div对像 如果为空时以alert方法显示</param>
            <param name="minLength">最小长度</param>
            <param name="maxLength">最大长度</param>
            <param name="titleStr">标题</param>
            <param name="isNVarchar">是否Nvarchar类型</param>
            <returns>真/假</returns>
            <example>
            <code>
            private bool doSave()
            { 
                if (!Cmn.Js.ChkFormData(this, "", "", 1, 20, "姓名", false)) return false;
                if (!Cmn.Js.ChkFormData(this, "熊", "", 4, 20, "姓名", false)) return false;
                if (!Cmn.Js.ChkFormData(this, "熊华春123456789123451", "", 4, 20, "姓名", false)) return false;
                return true;
            }
            if (doSave()) Cmn.Js.Alert(this,"成功");
            </code>
            </example>
        </member>
        <member name="T:Pub.Class.ICompress">
            <summary>
            压缩文件
            
            修改纪录
                2011.07.11 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.ICompress.File(System.String,System.String,System.String)">
            <summary>
            压缩文件
            </summary>
            <param name="source">源文件</param>
            <param name="desc">目标文件</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Pub.Class.ICompress.File(System.String[],System.String,System.String)">
            <summary>
            将多个文件压缩成一个文件
            </summary>
            <param name="source">多个文件，采用全路径，例：e:\tmp\tmp1\DD.cs</param>
            <param name="descZip">目标文件</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Pub.Class.ICompress.Directory(System.String,System.String,System.String)">
            <summary>
            压缩目录
            </summary>
            <param name="source">要压缩的目录</param>
            <param name="descZip">压缩后的文件名</param>
            <param name="password">密码</param>
        </member>
        <member name="T:Pub.Class.Compress">
            <summary>
            压缩文件
            
            修改纪录
                2011.07.11 版本：1.0 livexy 创建此类
            
            <example>
            <code>
                    new Compress("Pub.Class.SharpZip.dll", "Pub.Class.SharpZip.Compress")
                        .File("~/web.config".GetMapPath(), "~/web.config.zip".GetMapPath())
                        .Directory("~/test/".GetMapPath(), "~/test.zip".GetMapPath())
                        .File(new string[]{ "~/test.xls".GetMapPath(),"~/test.xml".GetMapPath(),"~/test2.xls".GetMapPath() }, "~/excel.zip".GetMapPath())
                        .Dispose();
            </code>
            </example>
            </summary>
        </member>
        <member name="T:Pub.Class.Disposable">
            <summary>
            自动释放
            
            修改纪录
                2010.05.01 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            //使用方法：
            public class PagerSQLHelper : Disposable { } 
            //需要重写InternalDispose方法
            //可用using调用： 
            using (PagerSQLHelper s = new PagerSQLHelper(PagerSQLEnum.top_top)) { }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.Disposable.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:Pub.Class.Disposable.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:Pub.Class.Disposable.InternalDispose">
            <summary>
            内部释放 可重写
            </summary>
        </member>
        <member name="M:Pub.Class.Disposable.Dispose(System.Boolean)">
            <summary>
            释放
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="M:Pub.Class.Compress.#ctor(System.String,System.String)">
            <summary>
            构造器 指定DLL文件和全类名
            </summary>
            <param name="dllFileName">dll文件名</param>
            <param name="className">命名空间.类名</param>
        </member>
        <member name="M:Pub.Class.Compress.#ctor(System.String)">
            <summary>
            构造器 指定classNameDllName(CompressProviderName) 默认Pub.Class.SharpZip.Compress,Pub.Class.SharpZip
            </summary>
            <param name="classNameAndAssembly">命名空间.类名,程序集名称</param>
        </member>
        <member name="M:Pub.Class.Compress.#ctor">
            <summary>
            构造器 从Web.config中读CompressProviderName 默认Pub.Class.SharpZip.Compress,Pub.Class.SharpZip
            </summary>
        </member>
        <member name="M:Pub.Class.Compress.File(System.String,System.String,System.String)">
            <summary>
            压缩文件
            </summary>
            <param name="source">源文件</param>
            <param name="descZip">目标文件</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Pub.Class.Compress.File(System.String[],System.String,System.String)">
            <summary>
            将多个文件压缩成一个文件
            </summary>
            <param name="source">多个文件，采用全路径，例：e:\tmp\tmp1\DD.cs</param>
            <param name="descZip">目标压缩文件</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Pub.Class.Compress.Directory(System.String,System.String,System.String)">
            <summary>
            压缩目录
            </summary>
            <param name="source">要压缩的目录</param>
            <param name="descZip">压缩后的文件名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Pub.Class.Compress.InternalDispose">
            <summary>
            用using 自动释放
            </summary>
        </member>
        <member name="T:Pub.Class.Msg">
            <summary>
            输出消息类
            
            修改纪录
                2006.05.08 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.Msg.Write(System.String)">
            <summary>
            输出消息
            </summary>
            <param name="msg">消息内容</param>
        </member>
        <member name="M:Pub.Class.Msg.Write(System.Object[])">
            <summary>
            输出消息
            </summary>
            <param name="args">消息内容</param>
        </member>
        <member name="M:Pub.Class.Msg.Write(System.String,System.Object[])">
            <summary>
            输出消息
            </summary>
            <param name="format">格式化</param>
            <param name="args">参数值</param>
        </member>
        <member name="M:Pub.Class.Msg.Write(System.Object)">
            <summary>
            输出消息
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:Pub.Class.Msg.WriteLine(System.String)">
            <summary>
            输出消息
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:Pub.Class.Msg.WriteLine(System.Object)">
            <summary>
            输出消息
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:Pub.Class.Msg.WriteLine(System.String,System.Object[])">
            <summary>
            输出消息
            </summary>
            <param name="format">格式化</param>
            <param name="args">参数值</param>
        </member>
        <member name="M:Pub.Class.Msg.WriteEnd(System.String)">
            <summary>
            输出消息 并结束执行
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:Pub.Class.Msg.WriteEnd(System.String,System.Object[])">
            <summary>
            输出消息 并结束执行
            </summary>
            <param name="format">格式化</param>
            <param name="args">参数值</param>
        </member>
        <member name="M:Pub.Class.Msg.WriteEnd(System.Object)">
            <summary>
            输出消息 并结束执行
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:Pub.Class.Msg.Write(System.Web.UI.HtmlControls.HtmlGenericControl,System.String,System.Boolean)">
            <summary>
            输出消息到HtmlGenericControl控件
            </summary>
            <param name="Control">HtmlGenericControl控件</param>
            <param name="msg">消息内容</param>
            <param name="isAdd">是否累记</param>
        </member>
        <member name="M:Pub.Class.Msg.WriteXMLEnd(System.String)">
            <summary>
            向页面输出xml内容 并结束
            </summary>
            <param name="xmlnode">xml内容</param>
        </member>
        <member name="M:Pub.Class.Msg.WriteJSONEnd(System.String)">
            <summary>
            输出json内容 并结束
            </summary>
            <param name="json">json内容</param>
        </member>
        <member name="M:Pub.Class.Msg.WriteJSONPEnd(System.String)">
            <summary>
            输出jsonp内容 并结束
            </summary>
            <param name="json">json内容</param>
        </member>
        <member name="M:Pub.Class.Msg.WriteHTMLEnd(System.String)">
            <summary>
            输出html内容 并结束
            </summary>
            <param name="html">html内容</param>
        </member>
        <member name="M:Pub.Class.Msg.WriteTextEnd(System.String)">
            <summary>
            输出文本内容 并结束
            </summary>
            <param name="text">text内容</param>
        </member>
        <member name="M:Pub.Class.Msg.End">
            <summary>
            终止页面的运行
            </summary>
        </member>
        <member name="M:Pub.Class.Msg.CompleteRequest">
            <summary>
            终止线程的运行
            </summary>
        </member>
        <member name="M:Pub.Class.Msg.Redirect(System.String)">
            <summary>
            目录条转
            </summary>
            <param name="url">url</param>
        </member>
        <member name="M:Pub.Class.Msg.Transfer(System.String)">
            <summary>
            服务器端目录条转 
            </summary>
            <param name="url">url</param>
        </member>
        <member name="M:Pub.Class.Msg.NoCache">
            <summary>
            不使用页面CACHE
            </summary>
        </member>
        <member name="M:Pub.Class.Msg.Flush">
            <summary>
            分块输出
            </summary>
        </member>
        <member name="T:Pub.Class.IDbProvider">
            <summary>
            数据库操作接口
            
            修改纪录
                2011.12.18 版本：1.1 livexy 添加GetIdentifierStart/GetIdentifierEnd/GetParamIdentifier
                2006.05.04 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.IDbProvider.Instance">
            <summary>
            返回DbProviderFactory实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDbProvider.GetLastIDSQL">
            <summary>
            返回刚插入记录的自增ID值, 如不支持则为""
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDbProvider.IsFullTextSearchEnabled">
            <summary>
            是否支持全文搜索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDbProvider.IsCompactDatabase">
            <summary>
            是否支持压缩数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDbProvider.IsBackupDatabase">
            <summary>
            是否支持备份数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDbProvider.IsDbOptimize">
            <summary>
            是否支持数据库优化
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDbProvider.IsShrinkData">
            <summary>
            是否支持数据库收缩
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDbProvider.IsStoreProc">
            <summary>
            是否支持存储过程
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDbProvider.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            检索SQL参数信息并填充
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:Pub.Class.IDbProvider.MakeParam(System.String,System.Data.DbType,System.Int32)">
            <summary>
            创建SQL参数
            </summary>
            <param name="ParamName"></param>
            <param name="DbType"></param>
            <param name="Size"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDbProvider.GetIdentifierStart">
            <summary>
            起始字符
            </summary>
        </member>
        <member name="M:Pub.Class.IDbProvider.GetIdentifierEnd">
            <summary>
            结束字符
            </summary>
        </member>
        <member name="M:Pub.Class.IDbProvider.GetParamIdentifier">
            <summary>
            参数前导符号
            </summary>
        </member>
        <member name="M:Pub.Class.IDbProvider.DataBulkCopy(System.Data.DataTable,System.String,Pub.Class.BulkCopyOptions,System.Boolean,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            大数据复制
            </summary>
            <param name="dt">数据源 dt.TableName一定要和数据库表名对应</param>
            <param name="dbkey">数据库</param>
            <param name="options">选项 默认Default</param>
            <param name="isTran">是否使用事务 默认false</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.IDbProvider.DataBulkCopy(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.DataTable,Pub.Class.BulkCopyOptions,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            大数据复制
            </summary>
            <param name="conn">连接源</param>
            <param name="tran">事务</param>
            <param name="dt">数据源 dt.TableName一定要和数据库表名对应</param>
            <param name="options">选项 默认Default</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDbProvider.DataBulkCopy(System.Data.IDataReader,System.String,System.String,Pub.Class.BulkCopyOptions,System.Boolean,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            大数据复制
            </summary>
            <param name="dr">数据源</param>
            <param name="tableName">一定要和数据库表名对应</param>
            <param name="dbkey">数据库</param>
            <param name="options">选项 默认Default</param>
            <param name="isTran">是否使用事务 默认false</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns>true/false</returns>
        </member>
        <member name="T:Pub.Class.ActionExtensions">
            <summary>
            方法扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.ActionExtensions.Time(System.Action,System.String,System.Int32)">
            <summary>
            无参数动作执行时间 返回详细信息
            </summary>
            <example>
            <code>
            Msg.WriteEnd(ActionExtensions.Time(() => { Msg.Write(1); }, "测试", 1000));
            </code>
            </example>
            <param name="action">动作</param>
            <param name="name">测试名称</param>
            <param name="iteration">执行次数</param>
            <returns>返回执行时间毫秒(ms)</returns>
        </member>
        <member name="M:Pub.Class.ActionExtensions.Retry(System.Action,System.Int32,System.Int32,System.Boolean,System.Action{System.Exception})">
            <summary>
            重试方法
            </summary>
            <param name="action">方法</param>
            <param name="numRetries">重试次数</param>
            <param name="retryTimeout">延时多长时间后重试，单位毫秒</param>
            <param name="throwIfFail">经过几轮重试操作后依然发生异常时是否将异常抛出</param>
            <param name="onFailureAction">操作失败执行的方法</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.BooleanExtensions">
            <summary>
            布尔扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.BooleanExtensions.Do(System.Boolean,System.Action,System.Action)">
            <summary>
            条件为true执行actionTrue，false执行actionFalse
            </summary>
            <example>
            <code>
            false.Do(() => { Msg.Write("1"); }, () => { Msg.Write("2"); });
            </code>
            </example>
            <param name="iBool">条件</param>
            <param name="actionTrue">true时执行动作</param>
            <param name="actionFalse">false时执行动作</param>
        </member>
        <member name="M:Pub.Class.BooleanExtensions.Do(System.Boolean,System.Action)">
            <summary>
            条件为true执行actionTrue
            </summary>
            <param name="iBool">条件</param>
            <param name="actionTrue">true时执行动作</param>
        </member>
        <member name="M:Pub.Class.BooleanExtensions.True(System.Boolean)">
            <summary>
            True
            </summary>
            <param name="iBool">条件</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.BooleanExtensions.False(System.Boolean)">
            <summary>
            False
            </summary>
            <param name="iBool">条件</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.BooleanExtensions.Not(System.Boolean)">
            <summary>
            Not
            </summary>
            <param name="iBool">条件</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.BooleanExtensions.If(System.Boolean,System.Func{System.Boolean})">
            <summary>
            if
            </summary>
            <param name="iff">条件</param>
            <param name="exec">执行</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.BooleanExtensions.Else(System.Boolean,System.Func{System.Boolean})">
            <summary>
            else
            </summary>
            <param name="iff">条件</param>
            <param name="exec">执行</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.BooleanExtensions.Else(System.Boolean,System.Action)">
            <summary>
            else
            </summary>
            <param name="iff">条件</param>
            <param name="exec">执行</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.ObjectExtensions">
            <summary>
            object扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToJson``1(``0)">
            <summary>
            ToJson
            </summary>
            <example>
            <code>
            Msg.Write("test".ToJson());
            </code>
            </example>
            <param name="obj">object扩展</param>
            <returns>json字符串</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.SafeSql(System.Object)">
            <summary>
            安全SQL
            </summary>
            <param name="obj">object扩展</param>
            <returns>安全的SQL值</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ShowSafeSql(System.Object)">
            <summary>
            还原SafeSql转换之后的数据
            </summary>
            <param name="obj">object扩展</param>
            <returns>安全的SQL值</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.SafeSqlSimple(System.Object)">
            <summary>
            安全SQL 只过滤'
            </summary>
            <param name="obj">object扩展</param>
            <returns>只过滤'</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ConvertTo``1(System.Object)">
            <summary>
            类型转换 性能低
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="value">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ConvertTo``1(System.Object,``0)">
            <summary>
            类型转换 性能低
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="value">object扩展</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ConvertTo``1(System.Object,``0,System.Boolean)">
            <summary>
            类型转换 性能低
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="value">object扩展</param>
            <param name="defaultValue">默认值</param>
            <param name="ignoreException">忽视</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToInt(System.Object,System.Int32)">
            <summary>
            ToInt
            </summary>
            <param name="strValue">object扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToTinyInt(System.Object,System.Byte)">
            <summary>
            ToTinyInt
            </summary>
            <param name="strValue">object扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToSmallInt(System.Object,System.Int16)">
            <summary>
            ToSmallInt
            </summary>
            <param name="strValue">object扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToDecimal(System.Object,System.Decimal)">
            <summary>
            ToDecimal
            </summary>
            <param name="strValue">object扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToFloat(System.Object,System.Single)">
            <summary>
            ToFloat
            </summary>
            <param name="strValue">object扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToBigInt(System.Object,System.Int64)">
            <summary>
            ToBigInt
            </summary>
            <param name="strValue">object扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToMoney(System.Object,System.Decimal)">
            <summary>
            ToMoney
            </summary>
            <param name="strValue">object扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToInteger(System.Object,System.Int32)">
            <summary>
            ToInteger
            </summary>
            <param name="strValue">object扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToBool(System.Object,System.Boolean)">
            <summary>
            ToBool
            </summary>
            <param name="strValue">object扩展</param>
            <param name="defValue">默认值</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToStringEx(System.Object)">
            <summary>
            ToStr()
            </summary>
            <param name="strValue">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToStr(System.Object)">
            <summary>
            ToStr()
            </summary>
            <param name="strValue">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToInt(System.Object)">
            <summary>
            ToInt
            </summary>
            <param name="strValue">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToTinyInt(System.Object)">
            <summary>
            ToTinyInt
            </summary>
            <param name="strValue">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToSmallInt(System.Object)">
            <summary>
            ToSmallInt
            </summary>
            <param name="strValue">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToDecimal(System.Object)">
            <summary>
            ToDecimal
            </summary>
            <param name="strValue">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToFloat(System.Object)">
            <summary>
            ToFloat
            </summary>
            <param name="strValue">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToBigInt(System.Object)">
            <summary>
            ToBigInt
            </summary>
            <param name="strValue">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToMoney(System.Object)">
            <summary>
            ToMoney
            </summary>
            <param name="strValue">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToInteger(System.Object)">
            <summary>
            ToInteger
            </summary>
            <param name="strValue">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToVarChar(System.Object)">
            <summary>
            ToVarChar
            </summary>
            <param name="strValue">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToNVarChar(System.Object)">
            <summary>
            ToNVarChar
            </summary>
            <param name="strValue">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToBool(System.Object)">
            <summary>
            ToBool
            </summary>
            <param name="strValue">object扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.IsArray(System.Object)">
            <summary>
            IsArray 是否数组
            </summary>
            <param name="obj">object扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.IsDBNull(System.Object)">
            <summary>
            IsDBNull
            </summary>
            <param name="obj">object扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.IsAllNull(System.Object)">
            <summary>
            IsAllNull
            </summary>
            <param name="obj">object扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.IsNotAllNull(System.Object)">
            <summary>
            IsNotAllNull
            </summary>
            <param name="obj">object扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.IsNotDBNull(System.Object)">
            <summary>
            IsNotDBNull
            </summary>
            <param name="obj">object扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.IsDBNull``1(System.Object,``0)">
            <summary>
            IsDBNull
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="obj">object扩展</param>
            <param name="t">值</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.IsType(System.Object,System.Type)">
            <summary>
            IsType 类型判断
            </summary>
            <param name="obj">object扩展</param>
            <param name="type">类型</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.IsNull(System.Object)">
            <summary>
            IsNull 对像是否null
            </summary>
            <param name="obj">object扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.IsNullEmpty(System.Object)">
            <summary>
            IsNull 对像是否null
            </summary>
            <param name="obj">object扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.IsNull``1(System.Object,``0)">
            <summary>
            IsNull 对像是否null
            </summary>
            <typeparam name="T">源对像</typeparam>
            <param name="obj">object扩展</param>
            <param name="t">源对像值</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.IsNotNull(System.Object)">
            <summary>
            IsNotNull 对像是否非null
            </summary>
            <param name="obj">object扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.IsNotNullEquals(System.Object,System.Object)">
            <summary>
            不为空的安全比较
            </summary>
            <param name="o1">object扩展</param>
            <param name="o2">对像</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            动态调用方法
            </summary>
            <param name="obj">object扩展</param>
            <param name="methodName">方法名</param>
            <param name="parameters">参数</param>
            <returns>动态调用方法</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.InvokeMethod``1(System.Object,System.String)">
            <summary>
            动态调用方法
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="obj">object扩展</param>
            <param name="methodName">方法名</param>
            <returns>动态调用方法</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            动态调用方法
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="obj">object扩展</param>
            <param name="methodName">方法名</param>
            <param name="parameters">参数</param>
            <returns>动态调用方法</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            取属性的值
            </summary>
            <example>
            <code>
            CachedItem item = new CachedItem();
            item.SetPropertyValue("CacheKey", "test");
            Msg.Write(item.GetPropertyValue("CacheKey"));
            </code>
            </example>
            <param name="obj">object扩展</param>
            <param name="propertyName">属性名</param>
            <returns>取属性的值</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            取属性的值
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="obj">object扩展</param>
            <param name="propertyName">属性名</param>
            <returns>取属性的值</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.GetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            取属性的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">object扩展</param>
            <param name="propertyName">属性名</param>
            <param name="defaultValue">默认值</param>
            <returns>取属性的值</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            设置对像的值
            </summary>
            <example>
            <code>
            CachedItem item = new CachedItem();
            item.SetPropertyValue("CacheKey", "test");
            Msg.Write(item.GetPropertyValue("CacheKey"));
            </code>
            </example>
            <param name="obj">object扩展</param>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.GetAttribute``1(System.Object)">
            <summary>
            取属性的Attribute值
            </summary>
            <example>
            <code>
            (new CachedItem()).GetAttribute&lt;EntityInfo>().Name
            (typeof (CachedItem)).GetAttribute&lt;EntityInfo>().Name
            (typeof (CachedItem)).GetProperty("CacheKey").GetAttribute&lt;EntityInfo>().Name
            (typeof (CachedItem)).GetMember("CacheKey")[0].GetAttribute&lt;EntityInfo>().Name
            </code>
            </example>
            <typeparam name="T">源类型</typeparam>
            <param name="obj">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.GetAttribute``1(System.Object,System.Boolean)">
            <summary>
            取属性的Attribute值
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="obj">object扩展</param>
            <param name="includeInherited">继承</param>
            <returns>取属性的Attribute值</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.GetAttributes``1(System.Object)">
            <summary>
            取属性的Attribute值
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="obj">object扩展</param>
            <returns>取属性的Attribute值</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.GetAttributes``1(System.Object,System.Boolean)">
            <summary>
            取属性的Attribute值
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="obj">object扩展</param>
            <param name="includeInherited">继承</param>
            <returns>取属性的Attribute值</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToType``1(System.Object)">
            <summary>
            转类型
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="value">object扩展</param>
            <returns>转类型</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToBytes``1(``0,System.Boolean)">
            <summary>
            序列化成字节
            </summary>
            <param name="value">object扩展</param>
            <returns>序列化成字节</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.CheckOnNull(System.Object,System.String)">
            <summary>
            CheckOnNull 检测是否为空，如果为空提示异常
            </summary>
            <param name="obj">object扩展</param>
            <param name="parameterName">参数名</param>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.CheckOnNull(System.Object,System.String,System.String)">
            <summary>
            CheckOnNull 检测是否为空，如果为空提示异常
            </summary>
            <param name="obj">object扩展</param>
            <param name="parameterName">参数名</param>
            <param name="message">消息</param>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.UnsafeCast``1(System.Object)">
            <summary>
            UnsafeCast
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="value">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.SafeCast``1(System.Object)">
            <summary>
            SafeCast
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="value">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.InstanceOf``1(System.Object)">
            <summary>
            InstanceOf 实例
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="value">object扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.Write(System.Object)">
            <summary>
            输出
            </summary>
            <param name="o">object扩展</param>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.WriteEnd(System.Object)">
            <summary>
            输出并结束
            </summary>
            <param name="o">object扩展</param>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToMemoryStream(System.Object)">
            <summary>
            序列化成MemoryStream
            </summary>
            <param name="request">object扩展</param>
            <returns>序列化成MemoryStream</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToXmlFile(System.Object,System.String)">
            <summary>
            序列化成XML文件
            </summary>
            <param name="o">object扩展</param>
            <param name="fileName">序列化成XML文件</param>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToXml``1(``0)">
            <summary>
            序列化成XML字符串
            </summary>
            <param name="o">object扩展</param>
            <returns>序列化成XML字符串</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToXml(System.Object,System.Text.Encoding)">
            <summary>
            对像转XML字符串
            </summary>
            <param name="source">object扩展</param>
            <param name="encoding">编码</param>
            <returns>对像转XML字符串</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToExceptionDetail(System.Exception)">
            <summary>
            取详细的Exception出错信息
            </summary>
            <param name="ex">object扩展</param>
            <returns>取详细的Exception出错信息</returns>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToFile(System.Exception,System.String)">
            <summary>
            详细的Exception出错信息 写到文件
            </summary>
            <param name="ex">object扩展</param>
            <param name="fileName">文件名 c:\test.log</param>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.ToCache(System.Object,System.String)">
            <summary>
            保存CACHE
            </summary>
            <param name="value">object扩展</param>
            <param name="key">保存CACHE</param>
        </member>
        <member name="M:Pub.Class.ObjectExtensions.FromCache``1(System.String)">
            <summary>
            取CACHE数据
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="key">object扩展</param>
            <returns>取CACHE数据</returns>
        </member>
        <member name="T:Pub.Class.HttpContextExtensions">
            <summary>
            HttpContext扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.HttpContextExtensions.Compress(System.Web.HttpContext)">
            <summary>
            gzip压缩
            </summary>
            <param name="instance">HttpContext扩展</param>
        </member>
        <member name="M:Pub.Class.HttpContextExtensions.IsEncodingAccepted(System.Web.HttpContext,System.String)">
            <summary>
            是否支持压缩
            </summary>
            <param name="instance">HttpContext扩展</param>
            <param name="encoding">gzip/deflate压缩</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.HttpContextExtensions.SetEncoding(System.Web.HttpContext,System.String)">
            <summary>
            重置压缩
            </summary>
            <param name="instance">HttpContext扩展</param>
            <param name="encoding">gzip/deflate压缩</param>
        </member>
        <member name="M:Pub.Class.HttpContextExtensions.Cache(System.Web.HttpContext,System.TimeSpan)">
            <summary>
            缓存
            </summary>
            <param name="instance">HttpContext扩展</param>
            <param name="duration">时间差</param>
        </member>
        <member name="M:Pub.Class.HttpContextExtensions.CacheKD(System.Web.HttpContext,System.Int32)">
            <summary>
            缓存
            </summary>
            <param name="instance">HttpContext扩展</param>
            <param name="durationInMinutes">时间</param>
        </member>
        <member name="M:Pub.Class.HttpContextExtensions.NoCache(System.Web.HttpContext)">
            <summary>
            取消CACHE
            </summary>
            <param name="instance">HttpContext扩展</param>
        </member>
        <member name="T:Pub.Class.IExcelWriter">
            <summary>
            写Excel
            
            修改纪录
                2011.07.04 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.IExcelWriter.Open(System.String)">
            <summary>
            打开excel文件
            </summary>
            <param name="excelPath">excel文件路径</param>
        </member>
        <member name="M:Pub.Class.IExcelWriter.ToExcel(System.Data.DataSet)">
            <summary>
            DataSet导出EXCEL文件
            </summary>
            <param name="ds">DataSet</param>
        </member>
        <member name="M:Pub.Class.IExcelWriter.ToExcel(System.Data.DataTable)">
            <summary>
            DataTable导出EXCEL文件
            </summary>
            <param name="dt">DataTable</param>
        </member>
        <member name="M:Pub.Class.IExcelWriter.Delete(System.String)">
            <summary>
            删除工作表
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Pub.Class.IExcelWriter.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Pub.Class.ExcelWriter">
            <summary>
            写EXCEL
            
            修改纪录
                2011.07.04 版本：1.0 livexy 创建此类
            
            <example>
            <code>
                    ExcelWriter excelWriter = new ExcelWriter("Pub.Class.Excel.OleDb.dll", "Pub.Class.Excel.OleDb.ExcelWriter", "~/test2.xls".GetMapPath());
                    ExcelWriter excelWriter = new ExcelWriter("Pub.Class.Excel.COM.dll", "Pub.Class.Excel.COM.Excel11Writer", "~/test5.xls".GetMapPath());
                    excelWriter.ToExcel(ds);
                    excelWriter.Delete("判断题");
                    excelWriter.ToExcel(ds.Tables[1]);
                    excelWriter.Dispose();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.ExcelWriter.#ctor(System.String,System.String,System.String)">
            <summary>
            构造器
            </summary>
            <param name="dllFileName">dll文件名</param>
            <param name="className">命名空间.类名</param>
            <param name="excelPath">excel文件路径</param>
        </member>
        <member name="M:Pub.Class.ExcelWriter.#ctor(System.String,System.String)">
            <summary>
            构造器 指定classNameDllName(ExcelWriterProviderName) 默认Pub.Class.Excel.OleDb.ExcelWriter,Pub.Class.Excel.OleDb
            </summary>
            <param name="classNameAndAssembly">命名空间.类名,程序集名称</param>
            <param name="excelPath">excel文件路径</param>
        </member>
        <member name="M:Pub.Class.ExcelWriter.#ctor(System.String)">
            <summary>
            构造器 从Web.config中读ExcelWriterProviderName 默认Pub.Class.Excel.OleDb.ExcelWriter,Pub.Class.Excel.OleDb
            </summary>
            <param name="excelPath">excel文件路径</param>
        </member>
        <member name="M:Pub.Class.ExcelWriter.ToExcel(System.Data.DataSet)">
            <summary>
            DataSet导出EXCEL文件
            </summary>
            <param name="ds">DataSet</param>
        </member>
        <member name="M:Pub.Class.ExcelWriter.ToExcel(System.Data.DataTable)">
            <summary>
            DataTable导出EXCEL文件
            </summary>
            <param name="dt">DataTable</param>
        </member>
        <member name="M:Pub.Class.ExcelWriter.Delete(System.String)">
            <summary>
            删除工作表
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Pub.Class.ExcelWriter.InternalDispose">
            <summary>
            用using 自动释放
            </summary>
        </member>
        <member name="T:Pub.Class.IExcelReader">
            <summary>
            读Excel
            
            修改纪录
                2011.07.04 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.IExcelReader.Open(System.String)">
            <summary>
            打开excel文件
            </summary>
            <param name="excelPath">excel文件路径</param>
        </member>
        <member name="M:Pub.Class.IExcelReader.ToDataSet">
            <summary>
            excel转DataSet
            </summary>
            <returns>DataSet</returns>
        </member>
        <member name="M:Pub.Class.IExcelReader.ToDataTable(System.String)">
            <summary>
            excel转DataTable
            </summary>
            <param name="table">DataTable名称</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Pub.Class.IExcelReader.ToDataTable(System.Int32)">
            <summary>
            excel转DataTable
            </summary>
            <param name="i">索引</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Pub.Class.IExcelReader.ToDataTable">
            <summary>
            excel转DataTable 第0个
            </summary>
            <returns>DataTable</returns>
        </member>
        <member name="M:Pub.Class.IExcelReader.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Pub.Class.ExcelReader">
            <summary>
            读EXCEL
            
            修改纪录
                2011.07.04 版本：1.0 livexy 创建此类
            
            <example>
            <code>
                    ExcelReader excelReader = new ExcelReader("Pub.Class.Excel.OleDb.dll", "Pub.Class.Excel.OleDb.ExcelReader", "~/test.xls".GetMapPath());
                    ExcelReader excelReader = new ExcelReader("Pub.Class.Excel.COM.dll", "Pub.Class.Excel.COM.Excel11Reader", "~/test.xls".GetMapPath());
                    DataSet ds = excelReader.ToDataSet();
                    foreach (DataTable dt in ds.Tables) { 
                        Msg.Write(dt.TableName + "：" + dt.ToJson() + "<br /><br />");
                    }
                    Msg.Write(excelReader.ToDataTable("单选题").ToJson());
                    excelReader.Dispose();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.ExcelReader.#ctor(System.String,System.String,System.String)">
            <summary>
            构造器
            </summary>
            <param name="dllFileName">dll文件名</param>
            <param name="className">命名空间.类名</param>
            <param name="excelPath">excel文件路径</param>
        </member>
        <member name="M:Pub.Class.ExcelReader.#ctor(System.String,System.String)">
            <summary>
            构造器 指定classNameDllName(ExcelReaderProviderName) 默认Pub.Class.Excel.OleDb.ExcelReader,Pub.Class.Excel.OleDb
            </summary>
            <param name="classNameAndAssembly">命名空间.类名,程序集名称</param>
            <param name="excelPath">excel文件路径</param>
        </member>
        <member name="M:Pub.Class.ExcelReader.#ctor(System.String)">
            <summary>
            构造器 从Web.config中读ExcelReaderProviderName 默认Pub.Class.Excel.OleDb.ExcelReader,Pub.Class.Excel.OleDb
            </summary>
            <param name="excelPath">excel文件路径</param>
        </member>
        <member name="M:Pub.Class.ExcelReader.ToDataSet">
            <summary>
            excel转DataSet
            </summary>
            <returns>DataSet</returns>
        </member>
        <member name="M:Pub.Class.ExcelReader.ToDataTable(System.String)">
            <summary>
            excel转DataTable
            </summary>
            <param name="table">DataTable名称</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Pub.Class.ExcelReader.ToDataTable(System.Int32)">
            <summary>
            excel转DataTable
            </summary>
            <param name="i">索引</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Pub.Class.ExcelReader.ToDataTable">
            <summary>
            excel转DataTable 第0个
            </summary>
            <returns>DataTable</returns>
        </member>
        <member name="M:Pub.Class.ExcelReader.InternalDispose">
            <summary>
            用using 自动释放
            </summary>
        </member>
        <member name="T:Pub.Class.Xml2">
            <summary>
            Xmls操作类
            
            修改纪录
                2006.05.18 版本：1.0 livexy 创建此类
            
            <example>
            <code>
                string strXmlFile = Server.MapPath("~/web.config");
                Xml2 _xml = new Xml2(strXmlFile);
                _xml.AddNode("configuration//appSettings","add", "key|value", "12|1111111");
                _xml.AddNode("configuration//appSettings", "add", "key|value", "12|1111111", "cexo255");
                Response.Write(_xml.getNodeText("configuration//appSettings//add[@key='12']"));
                _xml.SetAttr("configuration//appSettings//add[@key='']", "value|providerName", "aaaaaaaaaaaa3|System.Data.SqlClient3");
                _xml.AddAttr("configuration//appSettings//add[@key='']", "value|providerName","aaaaaaaaaaaa|System.Data.SqlClient");
                Response.Write(_xml.getAttr("configuration//appSettings//add[@key='']", "value|providerName"));
                _xml.Save();
                switch (_xml.State) { 
                    case 0:
                        Js.Alert(this, "操作成功！");
                        break;
                    case 1:
                        Js.Alert(this, "无法加载XML文件");
                        break;
                    case 2:
                        Js.Alert(this, "保存失败");
                        break;
                    case 3:
                        Js.Alert(this, "参数对应不正确");
                        break;
                    case 4:
                        Js.Alert(this, "操作错误");
                        break;
                }
                string xmlText = _xml.ToXmlText();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.Xml2.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="xmlFile"></param>
        </member>
        <member name="M:Pub.Class.Xml2.GetData">
            <summary>
            返回XML文件所有数据
            </summary>
            <returns>DataSet</returns>
        </member>
        <member name="M:Pub.Class.Xml2.GetData(System.String)">
            <summary>
            返回指定结点的所有数据
            </summary>
            <param name="node">结点</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Pub.Class.Xml2.GetNodeText(System.String)">
            <summary>
            取结点的内容
            </summary>
            <param name="node">结点</param>
            <returns>内容</returns>
        </member>
        <member name="M:Pub.Class.Xml2.SetNodeText(System.String,System.String)">
            <summary>
            重新设置结点的内容
            </summary>
            <param name="node">结点</param>
            <param name="content">内容</param>
        </member>
        <member name="M:Pub.Class.Xml2.AddNode(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            添加有内容的结点。属性名，属性值支持用“|”分开的字符串
            </summary>
            <param name="mainNode">当前结点</param>
            <param name="node">新结点名</param>
            <param name="attributeName">属性名</param>
            <param name="attributeValue">属性值</param>
            <param name="content">内容</param>
        </member>
        <member name="M:Pub.Class.Xml2.AddNode(System.String,System.String,System.String,System.String)">
            <summary>
            添加无内容的结点。属性名，属性值支持用“|”分开的字符串
            </summary>
            <param name="mainNode">当前结点</param>
            <param name="node">新结点名</param>
            <param name="attributeName">属性名</param>
            <param name="attributeValue">属性值</param>
        </member>
        <member name="M:Pub.Class.Xml2.DelNode(System.String)">
            <summary>
            删除结点
            </summary>
            <param name="mainNode"></param>
        </member>
        <member name="M:Pub.Class.Xml2.GetAttr(System.String,System.String)">
            <summary>
            取指定结点的属性值，属性名支持用“|”分开的字符串
            </summary>
            <param name="node">结点</param>
            <param name="attributeName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Xml2.AddAttr(System.String,System.String,System.String)">
            <summary>
            为指定结点添加新的属性值，如果存在则不添加。属性名，属性值支持用“|”分开的字符串
            </summary>
            <param name="node">结点</param>
            <param name="attributeName">属性名</param>
            <param name="attributeValue">属性值</param>
        </member>
        <member name="M:Pub.Class.Xml2.SetAttr(System.String,System.String,System.String)">
            <summary>
            设置指定的属性值,此属性必需存在。属性名，属性值支持用“|”分开的字符串
            </summary>
            <param name="node">结点</param>
            <param name="attributeName">属性名</param>
            <param name="attributeValue">属性值</param>
        </member>
        <member name="M:Pub.Class.Xml2.Save">
            <summary>
            保存XML文件
            </summary>
            <example>
            <code>
                string strXmlFile = Server.MapPath("~/web.config");
                Xml2 _xml = new Xml2(strXmlFile);
                _xml.AddNode("configuration//appSettings","add", "key|value", "12|1111111");
                _xml.AddNode("configuration//appSettings", "add", "key|value", "12|1111111", "cexo255");
                Response.Write(_xml.getNodeText("configuration//appSettings//add[@key='12']"));
                _xml.SetAttr("configuration//appSettings//add[@key='']", "value|providerName", "aaaaaaaaaaaa3|System.Data.SqlClient3");
                _xml.AddAttr("configuration//appSettings//add[@key='']", "value|providerName","aaaaaaaaaaaa|System.Data.SqlClient");
                Response.Write(_xml.getAttr("configuration//appSettings//add[@key='']", "value|providerName"));
                _xml.Save();
                switch (_xml.State) { 
                    case 0:
                        Js.Alert(this, "操作成功！");
                        break;
                    case 1:
                        Js.Alert(this, "无法加载XML文件");
                        break;
                    case 2:
                        Js.Alert(this, "保存失败");
                        break;
                    case 3:
                        Js.Alert(this, "参数对应不正确");
                        break;
                    case 4:
                        Js.Alert(this, "操作错误");
                        break;
                }
                string xmlText = _xml.ToXmlText();
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.Xml2.Close">
            <summary>
            关闭XML对像
            </summary>
        </member>
        <member name="M:Pub.Class.Xml2.ToXmlText">
            <summary>
            转XML字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Xml2.Create(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            新建一个XML文件
            </summary>
            <example>
            <code>
                Xml2.Create("c:\\rss\\rss.xml", "", "", "utf-8", "&lt;root>&lt;/root>")
            </code>
            </example>
            <param name="xmlFile">XML文件路径</param>
            <param name="cssFile">CSS文件路径</param>
            <param name="xlsFile">XLS文件路径</param>
            <param name="encoding">编码</param>
            <param name="node">根结点</param>
            <returns>是否操作成功</returns>
        </member>
        <member name="P:Pub.Class.Xml2.State">
            <summary>
            返回操作状态
            </summary>
        </member>
        <member name="T:Pub.Class.GetWebService">
            <summary>
            WebService Get方式调用
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            Hashtable pas = new Hashtable(); pas["i"] = 100;
            new GetWebService().Call("http://www.test.com/default.asmx", "WebService", "test2", pas);
            </example>
            </code>
            </summary>
        </member>
        <member name="T:Pub.Class.IWebService">
            <summary>
            WebService 调用接口
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.IWebService.Call(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            WebService调用方法
            </summary>
            <param name="url">WebService 接口地址</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:Pub.Class.IWebService.Call(System.String,System.String,System.String,System.Collections.Generic.IList{Pub.Class.UrlParameter})">
            <summary>
            WebService调用方法
            </summary>
            <param name="url">WebService 接口地址</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:Pub.Class.GetWebService.Call(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            WebService Get方式调用
            </summary>
            <param name="url">WebService 接口地址</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:Pub.Class.GetWebService.Call(System.String,System.String,System.String,System.Collections.Generic.IList{Pub.Class.UrlParameter})">
            <summary>
            WebService Get方式调用
            </summary>
            <param name="url">WebService 接口地址</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns>返回字符串</returns>
        </member>
        <member name="T:Pub.Class.MasterPageBase">
            <summary>
            模板页继承类
            
            修改纪录
                2006.05.08 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="F:Pub.Class.MasterPageBase.langList">
            <summary>
            语言CACHE
            </summary>
        </member>
        <member name="F:Pub.Class.MasterPageBase.lang">
            <summary>
            语言
            </summary>
        </member>
        <member name="F:Pub.Class.MasterPageBase.skin">
            <summary>
            皮肤
            </summary>
        </member>
        <member name="F:Pub.Class.MasterPageBase.title">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:Pub.Class.MasterPageBase.description">
            <summary>
            描述
            </summary>
        </member>
        <member name="F:Pub.Class.MasterPageBase.keywords">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:Pub.Class.MasterPageBase.index">
            <summary>
            索引值
            </summary>
        </member>
        <member name="F:Pub.Class.MasterPageBase.js">
            <summary>
            引用JS
            </summary>
        </member>
        <member name="F:Pub.Class.MasterPageBase.css">
            <summary>
            引用CSS
            </summary>
        </member>
        <member name="F:Pub.Class.MasterPageBase.RootPath">
            <summary>
            相对根路径 /开头
            </summary>
        </member>
        <member name="M:Pub.Class.MasterPageBase.GetLang">
            <summary>
            取所有语言
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.MasterPageBase.GetLang(System.String)">
            <summary>
            取语言
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="P:Pub.Class.MasterPageBase.Lang">
            <summary>
            语言
            </summary>
        </member>
        <member name="P:Pub.Class.MasterPageBase.Skin">
            <summary>
            皮肤
            </summary>
        </member>
        <member name="P:Pub.Class.MasterPageBase.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Pub.Class.MasterPageBase.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Pub.Class.MasterPageBase.Keywords">
            <summary>
            关键字
            </summary>
        </member>
        <member name="P:Pub.Class.MasterPageBase.Index">
            <summary>
            索引值
            </summary>
        </member>
        <member name="P:Pub.Class.MasterPageBase.JS">
            <summary>
            引用JS
            </summary>
        </member>
        <member name="P:Pub.Class.MasterPageBase.CSS">
            <summary>
            引用CSS
            </summary>
        </member>
        <member name="T:Pub.Class.LogonType">
            <summary>
            LogonType
            </summary>
        </member>
        <member name="F:Pub.Class.LogonType.Interactive">
            <summary>
            Interactive
            </summary>
        </member>
        <member name="F:Pub.Class.LogonType.Network">
            <summary>
            Batch
            </summary>
        </member>
        <member name="F:Pub.Class.LogonType.Batch">
            <summary>
            Batch
            </summary>
        </member>
        <member name="F:Pub.Class.LogonType.Service">
            <summary>
            Service
            </summary>
        </member>
        <member name="F:Pub.Class.LogonType.Unlock">
            <summary>
            Unlock
            </summary>
        </member>
        <member name="F:Pub.Class.LogonType.NetworkClearText">
            <summary>
            NetworkClearText
            </summary>
        </member>
        <member name="F:Pub.Class.LogonType.NewCredentials">
            <summary>
            NewCredentials
            </summary>
        </member>
        <member name="T:Pub.Class.LogonProvider">
            <summary>
            LogonProvider
            </summary>
        </member>
        <member name="F:Pub.Class.LogonProvider.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:Pub.Class.LogonProvider.WinNT35">
            <summary>
            WinNT35
            </summary>
        </member>
        <member name="F:Pub.Class.LogonProvider.WinNT40">
            <summary>
            WinNT40
            </summary>
        </member>
        <member name="F:Pub.Class.LogonProvider.WinNT50">
            <summary>
            WinNT50
            </summary>
        </member>
        <member name="T:Pub.Class.ShareConnect">
            <summary>
            共享连接类
            
            修改纪录
                2006.05.12 版本：1.0 livexy 创建此类
            
            <example>
            <code>
                using(new ShareConnect(ToSwf.IP, ToSwf.UserName, ToSwf.Password, LogonType.NewCredentials, LogonProvider.WinNT50)){
                    if (!FileFolder.FileExists(flashPrinterApiPath) || (!System.IO.File.Exists(filePath))) return; ==
                }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.ShareConnect.#ctor(System.String,System.String,System.String)">
            <summary>
            访问共享目录
            </summary>
            <param name="domain">共享目录</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Pub.Class.ShareConnect.#ctor(System.String,System.String,System.String,Pub.Class.LogonType,Pub.Class.LogonProvider)">
            <summary>
            访问共享目录
            </summary>
            <param name="domain">共享目录</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <param name="logonType"></param>
            <param name="logonProvider"></param>
        </member>
        <member name="M:Pub.Class.ShareConnect.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:Pub.Class.ShareConnect.Dispose(System.Boolean)">
            <summary>
            释放
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Pub.Class.ShareConnect.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:Pub.Class.CutImage">
            <summary>
            缩略图处理类
            
            修改纪录
                2012.06.02 版本：1.0 livexy 修改为静态类
                2006.05.02 版本：1.0 livexy 创建此类
                
            <example>
            <code>
            CutImage.CutImageByHeight(source, desc, 75); //将图片缩放到指定的高度
            CutImage.CutImageByWidth(source, desc, 75); //将图片缩放到指定的宽度
            CutImage.CutImageByWidthHeight(source, desc, 75, 75); //按宽X长比例切图 并补白
            CutImage.CutImageCustom(source, desc, 75, 75); //按宽X长比例切图 高清
            CutImage.CutImageCustomMin(source, desc, 75, 75); //按宽X长比例切图 压缩大小
            CutImage.CutImageSquare(source, desc, 75); //将图片剪切到一个正方形
            CutImage.CutImageByWidthHeight(source, desc, 75, 100, Color.Transparent); //按宽X长比例切图 并补透明
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.CutImage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Pub.Class.CutImage.GetImage(System.String)">
            <summary>
            获取图片信息
            </summary>
            <param name="imagePath">图片地址</param>
            <returns>成功true失败false</returns>
        </member>
        <member name="M:Pub.Class.CutImage.CutImageCustomMin(System.String,System.String,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            按宽X长比例切图
            </summary>
            <param name="imagePath">源图地址</param>
            <param name="savePath">新图地址</param>
            <param name="cutWidth">宽度</param>
            <param name="cutHeight">高度</param>
            <param name="error">出错时执行</param>
            <returns>成功true失败false</returns>
        </member>
        <member name="M:Pub.Class.CutImage.CutImageCustom(System.String,System.String,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            按宽X长比例切图
            </summary>
            <param name="imagePath">源图地址</param>
            <param name="savePath">新图地址</param>
            <param name="cutWidth">宽度</param>
            <param name="cutHeight">高度</param>
            <param name="error">出错时执行</param>
            <returns>成功true失败false</returns>
        </member>
        <member name="M:Pub.Class.CutImage.CutImageByWidth(System.String,System.String,System.Int32,System.Action{System.Exception})">
            <summary>
            将图片缩放到指定的宽度
            </summary>
            <param name="imagePath">源图地址</param>
            <param name="savePath">新图地址</param>
            <param name="error">出错时执行</param>
            <param name="square">宽度</param>
            <returns>成功true失败false</returns>
        </member>
        <member name="M:Pub.Class.CutImage.CutImageByHeight(System.String,System.String,System.Int32,System.Action{System.Exception})">
            <summary>
            将图片缩放到指定的高度
            </summary>
            <param name="imagePath">源图地址</param>
            <param name="savePath">新图地址</param>
            <param name="square">高度</param>
            <param name="error">出错时执行</param>
            <returns>成功true失败false</returns>
        </member>
        <member name="M:Pub.Class.CutImage.CutImageSquare(System.String,System.String,System.Int32,System.Action{System.Exception})">
            <summary>
            将图片剪切到一个正方形
            </summary>
            <param name="imagePath">源图地址</param>
            <param name="savePath">新图地址</param>
            <param name="square">正方形边长</param>
            <param name="error">出错时执行</param>
            <returns>成功true失败false</returns>
        </member>
        <member name="M:Pub.Class.CutImage.CutImageByWidthHeight(System.String,System.String,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            按宽X长比例切图 并补白
            </summary>
            <param name="imagePath">源图地址</param>
            <param name="savePath">新图地址</param>
            <param name="newWidth">宽度</param>
            <param name="newHeight">高度</param>
            <param name="error">出错时执行</param>
            <returns>成功true失败false</returns>
        </member>
        <member name="M:Pub.Class.CutImage.CutImageByWidthHeight(System.String,System.String,System.Int32,System.Int32,System.Drawing.Color,System.Action{System.Exception})">
            <summary>
            按宽X长比例切图 并补白
            </summary>
            <param name="imagePath">源图地址</param>
            <param name="savePath">新图地址</param>
            <param name="newWidth">宽度</param>
            <param name="newHeight">高度</param>
            <param name="error">出错时执行</param>
            <param name="bgcolor">填充背景色</param>
            <returns>成功true失败false</returns>
        </member>
        <member name="M:Pub.Class.CutImage.GetProperSize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            处理图片长宽显示
            </summary>
            <param name="trueWidth"></param>
            <param name="trueHeight"></param>
            <param name="placeWidth"></param>
            <param name="placeHeight"></param>
            <param name="showWidth"></param>
            <param name="showHeight"></param>
        </member>
        <member name="T:Pub.Class.CachedItem">
            <summary>
            缓存内容实体类
            
            修改纪录
                2006.05.01 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.CachedItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Pub.Class.CachedItem.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="key">key</param>
            <param name="type">类型</param>
        </member>
        <member name="P:Pub.Class.CachedItem.CacheKey">
            <summary>
            缓存键
            </summary>
        </member>
        <member name="P:Pub.Class.CachedItem.CacheType">
            <summary>
            缓存内容的数据类型
            </summary>
        </member>
        <member name="P:Pub.Class.CachedItem.CacheData">
            <summary>
            缓存内容
            </summary>
        </member>
        <member name="P:Pub.Class.CachedItem.StartTime">
            <summary>
            缓存内容开始时间
            </summary>
        </member>
        <member name="P:Pub.Class.CachedItem.EndTime">
            <summary>
            缓存内容结束时间
            </summary>
        </member>
        <member name="T:Pub.Class.Cache2">
            <summary>
            缓存管理
            
            修改纪录
                2009.09.04 版本：1.1 livexy 修改对共享CACHE的支持
                2006.05.01 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            IList&lt;CachedItem> list = Cache2.GetList();
            Cache2.Insert("testCache", 1); 5秒
            Msg.Write(Cache2.Get("testCache"));
            Cache2.Insert("testCache", 1, 2); 10秒
            Cache2.Remove("testCache");
            Cache2.RemoveByPattern("(.+?)Cache");
            Cache2.Clear();
            Cache2.Compress&lt;int>("testCache", 1); 压缩后CACHE 5秒
            Msg.Write(Cache2.Decompress&lt;int>("testCache"));
            </example>
            </code>
            </summary>
        </member>
        <member name="F:Pub.Class.Cache2.PubClassCache">
            <summary>
            启用缓存 缓存分为WebCache/VelocityCache/MemcachedCache/MemcachedCache2
            </summary>
        </member>
        <member name="F:Pub.Class.Cache2._cache">
            <summary>
            不同的缓存调用不同的DLL
            </summary>
        </member>
        <member name="M:Pub.Class.Cache2.GetList">
            <summary>
            取所有缓存对像
            </summary>
            <example>
            <code>
            IList&lt;CachedItem> list = Cache2.GetList();
            </code>
            </example>
            <returns>取所有缓存对像</returns>
        </member>
        <member name="M:Pub.Class.Cache2.Clear">
            <summary>
            清空所有缓存项目
            </summary>
            <example>
            <code>
            Cache2.Clear();
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.Cache2.RemoveByPattern(System.String)">
            <summary>
            删除缓存
            </summary>
            <example>
            <code>
            Cache2.RemoveByPattern("TC_Test_SelectMyTestList_(.+?)");
            Cache2.RemoveByPattern("TC_Test_SelectMyTestList_(d+)");
            Cache2.RemoveByPattern("TC_Test_SelectMyTestList_[\\s\\S]*");
            </code>
            </example>
            <param name="pattern">缓存键正则匹配模式</param>
        </member>
        <member name="M:Pub.Class.Cache2.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <example>
            <code>
            Cache2.Remove("TC_Test_SelectMyTestList_1");
            </code>
            </example>
            <param name="key">缓存键名</param>
        </member>
        <member name="M:Pub.Class.Cache2.Insert(System.String,System.Object)">
            <summary>
            增加缓存项目 
            </summary>
            <example>
            <code>
            Cache2.Insert("test2", 10);
            </code>
            </example>
            <param name="key">缓存键名</param>
            <param name="obj">缓存对象</param>
        </member>
        <member name="M:Pub.Class.Cache2.Insert(System.String,System.Object,System.Int32)">
            <summary>
            增加缓存项目
            </summary>
            <example>
            <code>
            Cache2.Insert("test2", 10, 10);
            </code>
            </example>
            <param name="key">缓存键名</param>
            <param name="obj">缓存对象</param>
            <param name="seconds">缓存秒数</param>
        </member>
        <member name="M:Pub.Class.Cache2.Get(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <example>
            <code>
            Cache2.Get("test2");
            AC_Ask ask = (AC_Ask)Cache2.Get("AC_AskCache_SelectByID_1");
            </code>
            </example>
            <param name="key">缓存键名</param>
            <returns>返回缓存对象</returns>
        </member>
        <member name="M:Pub.Class.Cache2.Get``1(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <example>
            <code>
            Cache2.Get("test2");
            AC_Ask ask = (AC_Ask)Cache2.Get("AC_AskCache_SelectByID_1");
            </code>
            </example>
            <param name="key">缓存键名</param>
            <returns>返回缓存对象</returns>
        </member>
        <member name="M:Pub.Class.Cache2.ContainsKey(System.String)">
            <summary>
            键是否存在
            </summary>
            <param name="key">键</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Cache2.Compress``1(System.String,``0)">
            <summary>
            缓存压缩
            </summary>
            <example>
            <code>
            Cache2.Compress&lt;IList&lt;CachedItem>>("test", new List&lt;CachedItem>() { new CachedItem() { CacheKey = "1", CacheType = "string" }, new CachedItem() { CacheKey = "1", CacheType = "string" } });
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <param name="obj">值</param>
        </member>
        <member name="M:Pub.Class.Cache2.Compress``1(System.String,``0,System.Int32)">
            <summary>
            缓存压缩
            </summary>
            <example>
            <code>
            Cache2.Compress&lt;IList&lt;CachedItem>>("test", new List&lt;CachedItem>() { new CachedItem() { CacheKey = "1", CacheType = "string" }, new CachedItem() { CacheKey = "1", CacheType = "string" } }, 100);
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <param name="obj">值</param>
            <param name="seconds">缓存秒数</param>
        </member>
        <member name="M:Pub.Class.Cache2.Decompress``1(System.String)">
            <summary>
            缓存解压
            </summary>
            <example>
            <code>
            IList&lt;CachedItem> list = Cache2.Decompress&lt;IList&lt;CachedItem>>("test");
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <returns>缓存解压</returns>
        </member>
        <member name="M:Pub.Class.Cache2.Get``1(System.String,System.Func{``0})">
            <summary>
            读与写CACHE
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">键</param>
            <param name="acquire">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Cache2.Get``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            读与写CACHE
            </summary>
            <example>
            <code>
            var list = Cache2.Get&lt;IList&lt;CachedItem>>(key, 1440, () => {
                return Cache2.GetList();
            })
            </code>
            </example>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">键</param>
            <param name="cacheTime">时间</param>
            <param name="acquire">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Cache2.Remove(System.String,System.String[])">
            <summary>
            删除CACHE
            </summary>
            <param name="prefix"></param>
            <param name="delCache"></param>
        </member>
        <member name="T:Pub.Class.Server2">
            <summary>
            Servers类
            
            修改纪录
                2006.05.10 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.Server2.GetMapPath(System.String)">
            <summary>
            获得当前绝对路径
            </summary>
            <param name="strPath">指定的路径</param>
            <returns>绝对路径</returns>
        </member>
        <member name="T:Pub.Class.WebServiceEnum">
            <summary>
            WebService 调用类型 Enum
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="F:Pub.Class.WebServiceEnum.get">
            <summary>
            get
            </summary>
        </member>
        <member name="F:Pub.Class.WebServiceEnum.post">
            <summary>
            post
            </summary>
        </member>
        <member name="F:Pub.Class.WebServiceEnum.soap">
            <summary>
            soap
            </summary>
        </member>
        <member name="F:Pub.Class.WebServiceEnum.dynamic">
            <summary>
            dynamic
            </summary>
        </member>
        <member name="T:Pub.Class.DataTableExtensions">
            <summary>
            DataTable扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToList``1(System.Data.DataTable)">
            <summary>
            最快 DataTable To 实体列表 IL
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").ToList&lt;UC_Member>();
            </code>
            </example>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="dt">DataTable</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToEntity``1(System.Data.DataTable)">
            <summary>
            实体转换 IL
            </summary>
            <typeparam name="TResult">实体类</typeparam>
            <param name="dt">DataTable</param>
            <returns>实体类</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToList2``1(System.Data.DataTable)">
            <summary>
            DataTable To 实体列表 反射CACHE 
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").ToList2&lt;UC_Member>();
            </code>
            </example>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="dt">DataTable</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToList3``1(System.Data.DataTable)">
            <summary>
            DataTable To 实体列表 反射 
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").ToList3&lt;UC_Member>();
            </code>
            </example>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="dt">DataTable</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToDataTableJson(System.Data.DataTable)">
            <summary>
            DataTable 转JSON 速度最快
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").ToDataTableJson();
            </code>
            </example>
            <param name="dt">DataTable</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToJson(System.Data.DataTable)">
            <summary>
            DataTable 转JSON 速度最快
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").ToJson();
            </code>
            </example>
            <param name="dt">DataTable</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToJson(System.Data.DataTable,System.String[])">
            <summary>
            DataTable 转JSON 速度最快
            </summary>
            <param name="dt">DataTable</param>
            <param name="fields">字段列表</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToJson(System.Data.DataTable,System.String[],System.String[])">
            <summary>
            DataTable 转JSON 速度最快
            </summary>
            <param name="dt">DataTable</param>
            <param name="fields">字段列表</param>
            <param name="alias">别名</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToJson(System.Data.DataTable,System.Int32[],System.String[])">
            <summary>
            DataTable 转JSON 速度最快
            </summary>
            <param name="dt">DataTable</param>
            <param name="fields">字段列表</param>
            <param name="alias">别名</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.OrderBy(System.Data.DataTable,System.String)">
            <summary>
            DataTable 排序
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").OrderBy("MemberID desc");
            </code>
            </example>
            <param name="dt">DataTable</param>
            <param name="orderBy">orderBy</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.Where(System.Data.DataTable,System.String)">
            <summary>
            DataTable 条件
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").Where("MemberID=1");
            </code>
            </example>
            <param name="dt">DataTable</param>
            <param name="where">where</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToPage(System.Data.DataTable,System.Int32,System.Int32,System.Int32@)">
            <summary>
            DataTable 分页
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").ToPage(1,10,out totals);
            </code>
            </example>
            <param name="dt">DataTable</param>
            <param name="pageIndex">第几页</param>
            <param name="pageSize">每面大小</param>
            <param name="totalRecords">总记录数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.OrderBy``1(System.Data.DataTable,System.String)">
            <summary>
            DataTable 排序
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").OrderBy&lt;UC_Member>("MemberID desc");
            </code>
            </example>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="dt">DataTable</param>
            <param name="orderBy">orderBy</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.Where``1(System.Data.DataTable,System.String)">
            <summary>
            DataTable 条件
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").Where&lt;UC_Member>("MemberID=1");
            </code>
            </example>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="dt">DataTable</param>
            <param name="where">where</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToPage``1(System.Data.DataTable,System.Int32,System.Int32,System.Int32@)">
            <summary>
            DataTable 分页
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").ToPage&lt;UC_Member>("MemberID desc");
            </code>
            </example>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="dt">DataTable</param>
            <param name="pageIndex">第几页</param>
            <param name="pageSize">每面大小</param>
            <param name="totalRecords">总记录数</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.Get``1(System.Data.DataRow,System.String)">
            <summary>
            DataRow 取field列的值
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").Rows[0].Get&lt;int>("MemeberID")
            </code>
            </example>
            <typeparam name="T">返回值类型</typeparam>
            <param name="row">DataRow</param>
            <param name="field">字段名</param>
            <returns>值</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.Get``1(System.Data.DataRow,System.String,``0)">
            <summary>
            DataRow 取field列的值
            </summary>
            <example>
            <code>
            Data.GetDataTable("Select MemberID,RealName from UC_Member").Rows[0].Get&lt;int>("MemeberID", 0)
            </code>
            </example>
            <typeparam name="T">返回值类型</typeparam>
            <param name="row">DataRow</param>
            <param name="field">字段名</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.Get``1(System.Data.DataRowView,System.String)">
            <summary>
            DataRowView 取field列的值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="row">DataRowView</param>
            <param name="field">字段名</param>
            <returns>值</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.Get``1(System.Data.DataRowView,System.String,``0)">
            <summary>
            DataRowView 取field列的值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="row">DataRowView</param>
            <param name="field">字段名</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.SwapDTCR(System.Data.DataTable)">
            <summary>
            交换DataTable中的行列位置
            </summary>
            <param name="inputDT">要交换的DataTable</param>
            <returns>交换后的DataTable</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToCSV(System.Data.DataTable,System.Char)">
            <summary>
            通过DataTable获得CSV格式数据
            </summary>
            <param name="dataTable">数据表</param>
            <param name="c">char</param>
            <returns>CSV字符串数据</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToCSV(System.Data.DataTable)">
            <summary>
            通过DataTable获得CSV格式数据
            </summary>
            <param name="dataTable">数据表</param>
            <returns>CSV字符串数据</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToCSV(System.Data.DataTable,System.String)">
            <summary>
            DataTable导出CSV文件
            </summary>
            <param name="dt">DataTable</param>
            <param name="fileName">CSV文件路径</param>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToExcel(System.Data.DataTable,System.String)">
            <summary>
            DataTable转换为EXCEL文件
            </summary>
            <param name="dt">DataTable</param>
            <param name="fileName">excel文件路径</param>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.Cell(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            取DataTable行和列值
            </summary>
            <param name="dt">DataTable</param>
            <param name="row">行</param>
            <param name="column">列</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToJson(System.Data.DataSet)">
            <summary>
            DataSet 转 Json [[],[]]
            </summary>
            <param name="ds">DataSet</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToCSV(System.Data.DataSet)">
            <summary>
            通过DataSet获得CSV格式数据
            </summary>
            <param name="dataSet">数据集</param>
            <returns>CSV字符串数据</returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToCSV(System.Data.DataSet,System.String)">
            <summary>
            DataSet导出CSV文件
            </summary>
            <param name="ds">DataSet</param>
            <param name="fileName">CSV文件路径</param>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ToExcel(System.Data.DataSet,System.String)">
            <summary>
            DataSet转EXCEL
            </summary>
            <param name="source">DataSet</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ChangeColumnName(System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            修改列名
            </summary>
            <param name="source">DataTable</param>
            <param name="list">字典</param>
            <param name="isFilter">是否过滤list中不存在的数据</param>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ChangeColumnName(System.Data.DataTable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            修改列名
            </summary>
            <param name="source">DataTable</param>
            <param name="list">字典</param>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.AddColumn``1(System.Data.DataTable,System.String)">
            <summary>
            添加列
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="dt">DataTable</param>
            <param name="columnName">列名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.AddRow(System.Data.DataTable,System.Object[])">
            <summary>
            添加行数据
            </summary>
            <param name="dt">DataTable</param>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DataTableExtensions.ColumnRename(System.Data.DataTable,System.String,System.String)">
            <summary>
            列修改名称
            </summary>
            <param name="dt">DataTable</param>
            <param name="oldCol">老列名</param>
            <param name="newCol">新列名</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.Update">
            <summary>
            手动更新程序
            </summary>
        </member>
        <member name="M:Pub.Class.Update.OnInit(System.EventArgs)">
            <summary>
            Page_Load
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Pub.Class.FileStreamExtensions">
            <summary>
            FileStream扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.FileStreamExtensions.ToBytes(System.IO.FileStream)">
            <summary>
            FileStream to 字节
            </summary>
            <param name="stream">FileStream</param>
            <returns>字节</returns>
        </member>
        <member name="M:Pub.Class.FileStreamExtensions.Save(System.IO.FileStream,System.String)">
            <summary>
            保存文件
            </summary>
            <param name="file">FileStream</param>
            <param name="path">路径</param>
            <returns>路径</returns>
        </member>
        <member name="M:Pub.Class.FileStreamExtensions.Save(System.IO.FileStream,System.String,System.Boolean)">
            <summary>
            保存文件
            </summary>
            <param name="file">FileStream</param>
            <param name="path">路径</param>
            <param name="overwrite">是否重写</param>
            <returns>路径</returns>
        </member>
        <member name="M:Pub.Class.FileStreamExtensions.ReadAll(System.IO.Stream,System.Text.Encoding)">
            <summary>
            读文件内容
            </summary>
            <param name="stream">Stream</param>
            <param name="encoding">编码</param>
            <returns>读文件内容</returns>
        </member>
        <member name="M:Pub.Class.FileStreamExtensions.ReadAll(System.IO.Stream)">
            <summary>
            读文件内容
            </summary>
            <param name="stream">Stream</param>
            <returns>文件内容</returns>
        </member>
        <member name="M:Pub.Class.FileStreamExtensions.IsUTF8(System.IO.FileStream)">
            <summary>
            IsUTF8
            </summary>
            <param name="sbInputStream">FileStream</param>
            <returns>IsUTF8</returns>
        </member>
        <member name="M:Pub.Class.FileStreamExtensions.ToBytes(System.IO.Stream)">
            <summary>
            转字节
            </summary>
            <param name="target">Stream</param>
            <returns>字节</returns>
        </member>
        <member name="M:Pub.Class.FileStreamExtensions.GetEncoding(System.IO.FileStream)">
            <summary>
            取文件编码
            </summary>
            <param name="stream">FileStream</param>
            <returns>文件编码</returns>
        </member>
        <member name="M:Pub.Class.FileStreamExtensions.GetEncoding(System.IO.FileStream,System.Text.Encoding)">
            <summary>
            取文件编码
            </summary>
            <param name="stream">FileStream</param>
            <param name="defaultEncoding">默认编码</param>
            <returns>文件编码</returns>
        </member>
        <member name="M:Pub.Class.FileStreamExtensions.FromMemoryStream``1(System.IO.MemoryStream)">
            <summary>
            反序列化成对像
            </summary>
            <param name="memStream">MemoryStream</param>
            <returns>反序列化成对像</returns>
        </member>
        <member name="M:Pub.Class.FileStreamExtensions.MD5(System.IO.Stream)">
            <summary>
            文件MD5
            </summary>
            <param name="strm">Stream</param>
            <returns>MD5</returns>
        </member>
        <member name="M:Pub.Class.FileStreamExtensions.Hash(System.IO.Stream)">
            <summary>
            Hash
            </summary>
            <param name="strm">Stream</param>
            <returns>Hash值</returns>
        </member>
        <member name="T:Pub.Class.StringExtensions">
            <summary>
            string 扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="F:Pub.Class.StringExtensions.BANWORD">
            <summary>
            过滤字符串
            </summary>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsNullEmpty(System.String)">
            <summary>
            字符串是否为string.Empty || null || ""
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsNull(System.Nullable{System.Guid})">
            <summary>
            Guid是否为 null || "000000-0000-0000-0000000000"
            </summary>
            <param name="guid">Guid扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UnHtml(System.String)">
            <summary>
            防止JS HTML代码被执行 "" &lt; > \n &amp; 空格
            </summary>
            <param name="htmlStr">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UnHtmlNoBR(System.String)">
            <summary>
            防止JS HTML代码被执行 "" &lt; > &amp; 空格 无\n
            </summary>
            <param name="htmlStr">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ShowXmlHtml(System.String)">
            <summary>
            转换为合法的XML文件
            </summary>
            <param name="htmlStr">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ShowHtml(System.String)">
            <summary>
            过滤JS事件
            </summary>
            <param name="htmlStr">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UrlEncode(System.String)">
            <summary>
            UrlEncode
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UrlUpperEncode(System.String)">
            <summary>
            UrlUpperEncode
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UrlEncode2(System.String)">
            <summary>
            UrlEncode
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            UrlEncode
            </summary>
            <param name="str">string扩展</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UrlDecode(System.String)">
            <summary>
            UrlDecode
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            UrlDecode
            </summary>
            <param name="str">string扩展</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UrlEncodeUnicode(System.String)">
            <summary>
            UrlEncodeUnicode等同于JS的escape()
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UrlPathEncode(System.String)">
            <summary>
            UrlPathEncode
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.EncodeFileName(System.String)">
            <summary>
            下载时Encode文件名称
            </summary>
            <param name="fileName">源文件名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.HtmlEncode(System.String)">
            <summary>
            HtmlEncode
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.HtmlDecode(System.String)">
            <summary>
            HtmlDecode
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.CnLength(System.String)">
            <summary>
            中文字符串长度
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.SubString(System.String,System.Int32,System.String)">
            <summary>
            取指定长度的字符串 中文字符占2个字符长度
            </summary>
            <param name="strInput">string扩展</param>
            <param name="len">长度</param>
            <param name="flg">后缀</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetExtension(System.String)">
            <summary>
            取文件扩展名 有.
            </summary>
            <param name="filename">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ChangeExtension(System.String,System.String)">
            <summary>
            修改扩展名 有.
            </summary>
            <param name="filename">string扩展</param>
            <param name="ext">扩展名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetFileName(System.String)">
            <summary>
            取文件名 有扩展名
            </summary>
            <param name="filename">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetFileNameWithoutExtension(System.String)">
            <summary>
            取文件名 无扩展名
            </summary>
            <param name="filename">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetUrlFileName(System.String)">
            <summary>
            取URL中的文件名 有扩展名
            </summary>
            <param name="url">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetHref(System.String)">
            <summary>
            取 href="中的连接">
            </summary>
            <param name="HtmlCode">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetSrc(System.String)">
            <summary>
            取 src="中的连接">
            </summary>
            <param name="HtmlCode">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetEmailHostName(System.String)">
            <summary>
            取EMAIL地址中的@163.com 有@
            </summary>
            <param name="strEmail">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDateTime(System.String)">
            <summary>
            字符串转日期
            </summary>
            <param name="DateTimeStr">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDateTimeString(System.String,System.String)">
            <summary>
            字符串转日期字符串
            </summary>
            <param name="fDateTime">string扩展</param>
            <param name="formatStr">format</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDateTimeString(System.String,System.String,System.String)">
            <summary>
            字符串转日期字符串
            </summary>
            <param name="date">string扩展</param>
            <param name="format">format</param>
            <param name="format2">format</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDateTime(System.String,System.DateTime)">
            <summary>
            字符串转日期
            </summary>
            <param name="DateTimeStr">string扩展</param>
            <param name="defDate">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>
            字符串转日期
            </summary>
            <param name="DateTimeStr">string扩展</param>
            <param name="defDate">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToBytes(System.String)">
            <summary>
            字符串转字节
            </summary>
            <param name="value">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            字符串转字节
            </summary>
            <param name="value">string扩展</param>
            <param name="encoding">Encoding</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToUTF8Bytes(System.String)">
            <summary>
            字符串转字节 UTF8
            </summary>
            <param name="valueToExpand">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.RemoveHTML(System.String)">
            <summary>
            删除HTML标记
            </summary>
            <param name="HtmlCode">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.RemoveAllHTML(System.String)">
            <summary>
            删除HTML标记
            </summary>
            <param name="content">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToSChinese(System.String)">
            <summary>
            转简体中文
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToTChinese(System.String)">
            <summary>
            转繁体中文
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.Reverse(System.String)">
            <summary>
            字符倒排列
            </summary>
            <param name="value">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.Filter(System.String,System.String)">
            <summary>
            过滤脏话
            </summary>
            <param name="str">string扩展</param>
            <param name="word">如：(TMD|MB)</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UBB(System.String)">
            <summary>
            UBB
            </summary>
            <param name="chr">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ClearUBB(System.String)">
            <summary>
            ClearUBB
            </summary>
            <param name="sDetail">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            字符串格式化
            </summary>
            <param name="str">string扩展</param>
            <param name="args">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.AppendFormat(System.String,System.Object[])">
            <summary>
            字符串格式化
            </summary>
            <param name="format">string扩展</param>
            <param name="args">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ConcatWith(System.Object[])">
            <summary>
            字符串联接
            </summary>
            <param name="args">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatWith(System.String,System.Object)">
            <summary>
            字符串格式化
            </summary>
            <param name="text">string扩展</param>
            <param name="arg0">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatWith(System.String,System.Object,System.Object)">
            <summary>
            字符串格式化
            </summary>
            <param name="text">string扩展</param>
            <param name="arg0">值</param>
            <param name="arg1">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatWith(System.String,System.Object,System.Object,System.Object)">
            <summary>
            字符串格式化
            </summary>
            <param name="text">string扩展</param>
            <param name="arg0">值</param>
            <param name="arg1">值</param>
            <param name="arg2">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            字符串格式化
            </summary>
            <param name="text">string扩展</param>
            <param name="provider">IFormatProvider</param>
            <param name="args">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ReplaceWith(System.String,System.String,System.String)">
            <summary>
            字符串替换
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <param name="replaceValue">替换值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ReplaceWith(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            字符串替换
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <param name="replaceValue">替换值</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ReplaceWith(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            字符串替换
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <param name="evaluator">MatchEvaluator</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ReplaceWith(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            字符串替换
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <param name="options">选项</param>
            <param name="evaluator">MatchEvaluator</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ReplaceWith(System.String,System.String,System.String,System.Boolean)">
            <summary>
            字符串替换
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <param name="ReplaceString">替换</param>
            <param name="IsCaseInsensetive">不区分大小写</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.Replace(System.String,System.String,System.String)">
            <summary>
            字符串替换
            </summary>
            <param name="RegValue">string扩展</param>
            <param name="regStart">开始</param>
            <param name="regEnd">结束</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetMatches(System.String,System.String)">
            <summary>
            正则取值 to MatchCollection
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            正则取值 to MatchCollection
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FindBetween(System.String,System.String,System.String)">
            <summary>
            正则取值 to MatchCollection
            </summary>
            <param name="s">string扩展</param>
            <param name="startString">开始</param>
            <param name="endString">结束</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FindBetween(System.String,System.String,System.String,System.Boolean)">
            <summary>
            正则取值 to MatchCollection
            </summary>
            <param name="s">string扩展</param>
            <param name="startString">开始</param>
            <param name="endString">结束</param>
            <param name="recursive">递归</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetMatchingValues(System.String,System.String)">
            <summary>
            正则取值 to list
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetMatchingValues(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            正则取值 to list
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetMatchingValues(System.String,System.String,System.String,System.String)">
            <summary>
            正则取值 to list
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <param name="rep1">替换1</param>
            <param name="rep2">替换2</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetMatchingValue(System.String,System.String,System.String,System.String)">
            <summary>
            正则取值
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <param name="rep1">替换1</param>
            <param name="rep2">替换2</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetMatchingValue(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            正则取值
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <param name="left">左长</param>
            <param name="right">右长</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            分割字符串
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.Split(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="value">string扩展</param>
            <param name="regexPattern">正则</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToXDocument(System.String)">
            <summary>
            xml字符串转 XDocument/XmlDocument/XPathNavigator
            </summary>
            <param name="xml">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToXmlDOM(System.String)">
            <summary>
            xml字符串转 XmlDocument
            </summary>
            <param name="xml">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToXPath(System.String)">
            <summary>
            xml字符串转 XPathNavigator
            </summary>
            <param name="xml">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToPinyin(System.String)">
            <summary>
            转拼音
            </summary>
            <param name="s">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToPinyinChar(System.String)">
            <summary>
            转拼音首字母
            </summary>
            <param name="s">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToPinyinChar2(System.String)">
            <summary>
            转拼音首字母
            </summary>
            <param name="c">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            左截字符串
            </summary>
            <param name="str">string扩展</param>
            <param name="length">长</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            右截字符串
            </summary>
            <param name="str">string扩展</param>
            <param name="length">长</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.JsonEscape(System.String)">
            <summary>
            Json特符字符过滤，参见http://www.json.org/
            </summary>
            <param name="sourceStr">要过滤的源字符串</param>
            <returns>返回过滤的字符串</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToEnum``1(System.String)">
            <summary>
            转枚举类型 如 public enum test { test1, test2 } Msg.WriteEnd("0".ToEnum&lt;test>()); 值是test1
            </summary>
            <example>
            <code>
            public enum test { test1, test2 } 
            Msg.WriteEnd("0".ToEnum&lt;test>()); //值是test1
            </code>
            </example>
            <typeparam name="T">源类型</typeparam>
            <param name="value">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            转枚举类型
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="value">string扩展</param>
            <param name="ignorecase">大小写</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToEnum``1(System.String,``0)">
            <summary>
            转枚举类型
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="value">string扩展</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetEnumNames``1">
            <summary>
            获取枚举所有成员名称
            </summary>
            <typeparam name="T">枚举名,比如Enum1</typeparam>
        </member>
        <member name="M:Pub.Class.StringExtensions.CharacterCount(System.String,System.Char)">
            <summary>
            字符存在数量
            </summary>
            <param name="value">string扩展</param>
            <param name="character">字符</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ForcePrefix(System.String,System.String)">
            <summary>
            加前缀
            </summary>
            <param name="s">string扩展</param>
            <param name="prefix">前缀</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ForceSuffix(System.String,System.String)">
            <summary>
            加后缀
            </summary>
            <param name="s">string扩展</param>
            <param name="suffix">后缀</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.RemovePrefix(System.String,System.String)">
            <summary>
            删除前缀
            </summary>
            <param name="s">string扩展</param>
            <param name="prefix">前缀</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.RemoveSuffix(System.String,System.String)">
            <summary>
            删除后缀
            </summary>
            <param name="s">string扩展</param>
            <param name="suffix">后缀</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.PadLeft(System.String,System.String)">
            <summary>
            在右边补字符串
            </summary>
            <param name="s">string扩展</param>
            <param name="pad">附加</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.PadLeft(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            在右边补字符串
            </summary>
            <param name="s">string扩展</param>
            <param name="pad">附加</param>
            <param name="totalWidth">宽</param>
            <param name="cutOff">是否剪切</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.PadRight(System.String,System.String)">
            <summary>
            在左边补字符串
            </summary>
            <param name="s">string扩展</param>
            <param name="pad">附加</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.PadRight(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            在左边补字符串
            </summary>
            <param name="s">string扩展</param>
            <param name="pad">附加</param>
            <param name="length">长</param>
            <param name="cutOff">是否剪切</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToColor(System.String)">
            <summary>
            字符串转颜色 如"ffffff".ToColor()
            </summary>
            <param name="s">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ContainsArray(System.String,System.String[])">
            <summary>
            字符串数组中是否包含 value
            </summary>
            <param name="value">string扩展</param>
            <param name="keywords">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToNullable``1(System.String)">
            <summary>
            字符串转T类型的NULL 如 "123".ToNullable&lt;long>() 可为null
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="s">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToNullable``1(``0)">
            <summary>
            字符串转T类型的NULL 如 0.ToNullable&lt;long>() 可为null
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetLines(System.String)">
            <summary>
            按行分隔字符串
            </summary>
            <param name="text">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsMatch(System.String,System.String)">
            <summary>
            正则匹配否
            </summary>
            <param name="str">string扩展</param>
            <param name="op">正则</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsIP(System.String)">
            <summary>
            IP否
            </summary>
            <param name="input">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsIPSect(System.String)">
            <summary>
            IP6否
            </summary>
            <param name="ip">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsNumber(System.String)">
            <summary>
            IsNumber
            </summary>
            <param name="strNumber">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsDouble(System.String)">
            <summary>
            IsDouble
            </summary>
            <param name="input">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsInt(System.String)">
            <summary>
            整数否
            </summary>
            <param name="input">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsNumberArray(System.String[])">
            <summary>
            数组里全是数字否
            </summary>
            <param name="strNumber">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsEmail(System.String)">
            <summary>
            信箱否
            </summary>
            <param name="input">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsUrl(System.String)">
            <summary>
            URL否
            </summary>
            <param name="input">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsZip(System.String)">
            <summary>
            邮编否
            </summary>
            <param name="input">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsSafeSqlStr(System.String)">
            <summary>
            安全SQL字符串否
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsDateTime(System.String)">
            <summary>
            日期时间否 正则
            </summary>
            <param name="input">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsDateTime2(System.String)">
            <summary>
            日期时间否 try catch
            </summary>
            <param name="DateTimeStr">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsDate(System.String)">
            <summary>
            日期否 try catch
            </summary>
            <param name="DateStr">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsTime(System.String)">
            <summary>
            时间否
            </summary>
            <param name="TimeStr">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsAlpha(System.String)">
            <summary>
            第一个字母是否a-zA-Z0-9
            </summary>
            <param name="input">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsTelepone(System.String)">
            <summary>
            电话否
            </summary>
            <param name="input">string扩展</param>
            <returns>电话否</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsMobile(System.String)">
            <summary>
            手机号否
            </summary>
            <param name="input">string扩展</param>
            <returns>手机号否</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsStrongPassword(System.String)">
            <summary>
            强密码否
            </summary>
            <param name="password">string扩展</param>
            <returns>强密码否</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsInArray(System.String,System.String)">
            <summary>
            字符串是否在,分隔的字符串内
            </summary>
            <param name="stringarray">string扩展</param>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsInArray(System.String,System.String,System.String)">
            <summary>
            字符串是否在,分隔的字符串内
            </summary>
            <param name="stringarray">string扩展</param>
            <param name="str">字符串</param>
            <param name="strsplit">分割符</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsInArray(System.String,System.String,System.String,System.Boolean)">
            <summary>
            字符串是否在,分隔的字符串内
            </summary>
            <param name="stringarray">string扩展</param>
            <param name="str">字符串</param>
            <param name="strsplit">分割符</param>
            <param name="caseInsensetive">区分大小写</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsBase64(System.String)">
            <summary>
             BASE64否
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsYear(System.String)">
            <summary>
            年否 >=1900 and &lt;=9999
            </summary>
            <param name="input">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsImgFileName(System.String)">
            <summary>
            图片否 jpg jpeg png bmp gif 按文件扩展名来比较
            </summary>
            <param name="filename">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsImgFile(System.String)">
            <summary>
            判断是否IMG文件 bmp/JPEG/GIF/PNG 按前几个字节比较
            </summary>
            <param name="filename">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsImgFile2(System.String)">
            <summary>
            判断是否IMG文件 bmp/JPEG/GIF/PCX/PNG/PSD/RAS/SGI/TIFF 按前几个字节比较并支持更多格式
            </summary>
            <param name="filename">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsGuid(System.String)">
            <summary>
            GUID否
            </summary>
            <param name="s">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsCreditCard(System.String)">
            <summary>
            身份证否
            </summary>
            <param name="s">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsCNStr(System.String)">
            <summary>
            判断是否是中文
            </summary>
            <param name="s">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsColor(System.String)">
            <summary>
            IsColor
            </summary>
            <param name="color">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsUserName(System.String)">
            <summary>
            判断(E文 数字 下划线)
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsNickName(System.String)">
            <summary>
            判断(E文 数字 中文 下划线)
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsGroupName(System.String)">
            <summary>
            判断组名(不允许/\&lt;>{}:*?|")
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsAscii(System.String)">
            <summary>
            IsAscii > 127
            </summary>
            <param name="data">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsBinary(System.String)">
            <summary>
            IsBinary
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetMapPath(System.String)">
            <summary>
            取物理路径
            </summary>
            <param name="strPath">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetAbsolutePath(System.String)">
            <summary>
            将虚拟路径转换为应用程序绝对路径
            </summary>
            <param name="strPath">虚拟路径</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetGlobalMapPath(System.String)">
            <summary>
            取物理路径 主要用在Global文件里
            </summary>
            <param name="strPath">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToGuid(System.String)">
            <summary>
            ToGUID
            </summary>
            <param name="target">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToUniqueIdentifier(System.String)">
            <summary>
            ToGUID
            </summary>
            <param name="target">GUID字符串</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.True(System.String)">
            <summary>
            "ture"/"1" 转为 true
            </summary>
            <param name="source">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.False(System.String)">
            <summary>
            "false"/"0" 转为 false
            </summary>
            <param name="source">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.As``1(System.String)">
            <summary>
            将字符串转T类型数据 如"123".As&lt;int>()
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FromJson``1(System.String)">
            <summary>
            json 转对象 ToJson 反操作
            </summary>
            <example>
            <code>
            "{\"MemberID\":1, \"RealName\"}".FormJson&lt;UC_Member>();
            </code>
            </example>
            <typeparam name="T">源类型</typeparam>
            <param name="json">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FromXml``1(System.String)">
            <summary>
            XML字符串反序列化成对像
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="xml">object扩展</param>
            <returns>XML字符串反序列化成对像</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FromXmlFile``1(System.String)">
            <summary>
            从XML文件中反序列化成对像
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="fileName">object扩展</param>
            <returns>从XML文件中反序列化成对像</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToOriginal(System.String)">
            <summary>
            字符串转意 \n \r \a \b \t \" \' \\ \u***
            </summary>
            <param name="text">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UpperFirstChar(System.String)">
            <summary>
            首字母大小
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UpperFirstChar2(System.String)">
            <summary>
            首字母大写 如果是大写前加_
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.LowerFirstChar(System.String)">
            <summary>
            首字每小写
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.LowerFirstChar2(System.String)">
            <summary>
            首字母小写 如果是小写前加_
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToID(System.String,System.Char,System.Boolean)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <param name="c">分割符</param>
            <param name="isDelZero">是否去除小于等于0的ID</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToLongID(System.String,System.Char,System.Boolean)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <param name="c">分割符</param>
            <param name="isDelZero">是否去除小于等于0的ID</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToIntID(System.String,System.Char,System.Boolean)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <param name="c">分割符</param>
            <param name="isDelZero">是否去除小于等于0的ID</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToID(System.String,System.Char)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <param name="c">分割符</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToID(System.String,System.Boolean)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <param name="isDelZero">是否去除小于等于0的ID</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToID(System.String)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToID(System.String,System.String)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <param name="c">分割符</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToID(System.String,System.String,System.Boolean)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <param name="c">分割符</param>
            <param name="isDelZero">是否去除小于等于0的ID</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToLongID(System.String,System.Char)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <param name="c">分割符</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToLongID(System.String,System.Boolean)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <param name="isDelZero">是否去除小于等于0的ID</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToLongID(System.String)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToIntID(System.String,System.Char)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <param name="c">分割符</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToIntID(System.String,System.Boolean)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <param name="isDelZero">是否去除小于等于0的ID</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FormatToIntID(System.String)">
            <summary>
            检查字符串ID是否合法（大于0），去除小于等于0的ID
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.SafeSql(System.String)">
            <summary>
            安全SQL
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.SafeSql2(System.String)">
            <summary>
            安全SQL
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.SafeSqlSimple(System.String)">
            <summary>
            安全SQL '
            </summary>
            <param name="str">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ShowSafeSql(System.String)">
            <summary>
            还原SafeSql转换之后的数据
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ShowSafeSql2(System.String)">
            <summary>
            还原SafeSql转换之后的数据
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToInt(System.String,System.Int32)">
            <summary>
            ToInt
            </summary>
            <param name="strValue">string扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToTinyInt(System.String,System.Byte)">
            <summary>
            ToTinyInt
            </summary>
            <param name="strValue">string扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToSmallInt(System.String,System.Int16)">
            <summary>
            ToSmallInt
            </summary>
            <param name="strValue">string扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDecimal(System.String,System.Decimal)">
            <summary>
            ToDecimal
            </summary>
            <param name="strValue">string扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToFloat(System.String,System.Single)">
            <summary>
            ToFloat
            </summary>
            <param name="strValue">string扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToBigInt(System.String,System.Int64)">
            <summary>
            ToBigInt
            </summary>
            <param name="strValue">string扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToMoney(System.String,System.Decimal)">
            <summary>
            ToMoney
            </summary>
            <param name="strValue">string扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToInteger(System.String,System.Int32)">
            <summary>
            ToInteger
            </summary>
            <param name="strValue">string扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToBool(System.String,System.Boolean)">
            <summary>
            ToBool
            </summary>
            <param name="strValue">string扩展</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToInt(System.String)">
            <summary>
            ToInt
            </summary>
            <param name="strValue">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToInt(System.Char)">
            <summary>
            ToInt
            </summary>
            <param name="strValue">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToTinyInt(System.String)">
            <summary>
            ToTinyInt
            </summary>
            <param name="strValue">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToSmallInt(System.String)">
            <summary>
            ToSmallInt
            </summary>
            <param name="strValue">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDecimal(System.String)">
            <summary>
            ToDecimal
            </summary>
            <param name="strValue">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToFloat(System.String)">
            <summary>
            ToFloat
            </summary>
            <param name="strValue">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToBigInt(System.String)">
            <summary>
            ToBigInt
            </summary>
            <param name="strValue">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToMoney(System.String)">
            <summary>
            ToMoney
            </summary>
            <param name="strValue">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToInteger(System.String)">
            <summary>
            ToInteger
            </summary>
            <param name="strValue">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToBool(System.String)">
            <summary>
            ToBool
            </summary>
            <param name="strValue">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToSBC(System.String)">
            <summary>
            半角转全角
            </summary>
            <param name="input">string扩展</param>
            <returns>全角</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDBC(System.String)">
            <summary>
            全角转半角
            </summary>
            <param name="input">string扩展</param>
            <returns>半角</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDbTypeForSQLite(System.String)">
            <summary>
            SQLite数据类型转DbType
            </summary>
            <param name="sqlType">string扩展</param>
            <returns>SQLite数据类型转DbType</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDbTypeForSql2005(System.String)">
            <summary>
            Sql2005数据类型转DbType
            </summary>
            <param name="sqlType">string扩展</param>
            <returns>Sql2005数据类型转DbType</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDbTypeForMySql(System.String)">
            <summary>
            MySql数据类型转DbType
            </summary>
            <param name="mySqlType">string扩展</param>
            <returns>MySql数据类型转DbType</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetMimeType(System.String)">
            <summary>
            取文件字符串的MIME
            </summary>
            <param name="str">string扩展</param>
            <returns>取文件字符串的MIME</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetContentType(System.String)">
            <summary>
            文件扩展名取HttpContentType 如.doc application/msword
            </summary>
            <param name="extension">文件扩展名</param>
            <returns>文件扩展名取HttpContentType 如.doc application/msword</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToSecureString(System.String)">
            <summary>
            转SecureString
            </summary>
            <param name="str">string扩展</param>
            <returns>SecureString</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetBinFileFullPath(System.String,System.String)">
            <summary>
            返回DLL文件的全路径
            </summary>
            <example>
            <code>
            Msg.Write("test".GetBinFileFullPath() + "&lt;br />");
            Msg.Write("test.dll".GetBinFileFullPath() + "&lt;br />");
            Msg.Write("test.dllx".GetBinFileFullPath() + "&lt;br />&lt;br />");
            Msg.Write("c:\\test".GetBinFileFullPath() + "&lt;br />");
            Msg.Write("c:\\test.dll".GetBinFileFullPath() + "&lt;br />");
            Msg.Write("c:\\test.dllx".GetBinFileFullPath() + "&lt;br />&lt;br />");
            Msg.Write("~/test".GetBinFileFullPath() + "&lt;br />");
            Msg.Write("~/test.dll".GetBinFileFullPath() + "&lt;br />");
            Msg.Write("~/test.dllx".GetBinFileFullPath() + "&lt;br />&lt;br />");
            </code>
            </example>
            <param name="fileName">文件名/文件绝对路径/文件相对路径</param>
            <param name="ext">指定扩展名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.LoadFileStream(System.String)">
            <summary>
            读文件流
            </summary>
            <param name="dllFullPath">dll路径或文件名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.LoadDynamicDLLAssembly(System.String)">
            <summary>
            动态加载dll程序集 CACHE
            </summary>
            <param name="dllFullPath">dll路径或文件名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.LoadDLLAssembly(System.String)">
            <summary>
            加载DLL程序集 CACHE
            </summary>
            <param name="dllFullPath">dll路径或文件名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.LoadAssembly(System.String)">
            <summary>
            加载程序集 CACHE
            </summary>
            <param name="assembly">程序集名称或dll路径或文件名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.LoadDLLClass(System.String,System.String)">
            <summary>
            动态加载指定目录下的DLL类 Activator.CreateInstance CACHE
            </summary>
            <param name="dllFileName">bin目录下的dll文件名</param>
            <param name="className">命名空间和类名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.LoadClass(System.String,System.String)">
            <summary>
            动态加载类 Activator.CreateInstance CACHE
            </summary>
            <param name="assembly">程序集名称或dll文件路径 支持绝对路径和相对路径</param>
            <param name="className">命名空间.类名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.LoadDynamicDLLClass(System.String,System.String)">
            <summary>
            动态加载指定目录下的DLL类 Activator.CreateInstance CACHE
            </summary>
            <param name="dllFileName">dll文件路径 支持绝对路径和相对路径</param>
            <param name="className">命名空间.类名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetClassCache">
            <summary>
            返回程序集的Cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetAssemblyCache">
            <summary>
            返回类的Cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.LoadDynamicClass(System.String,System.String)">
            <summary>
            动态加载类 CACHE
            </summary>
            <param name="assembly">程序集名或dll文件路径 支持绝对路径和相对路径</param>
            <param name="className">命名空间.类名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.LoadClass(System.String)">
            <summary>
            加载类 Activator.CreateInstance CACHE
            </summary>
            <param name="classNameAndAssembly">命名空间.类名,程序集名称</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsUnicode(System.String)">
            <summary>
            Unicode否
            </summary>
            <param name="s">string扩展</param>
            <returns>Unicode否</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ReplaceRN(System.String,System.String)">
            <summary>
            \r\n替换成空格
            </summary>
            <param name="input">要去除新行的字符串</param>
            <param name="replace">是否添加空格</param>
            <returns>已经去除新行的字符串</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ReplaceRNToBR(System.String)">
            <summary>
            \r\n替换成&lt;br />
            </summary>
            <param name="input">string扩展</param>
            <returns>\r\n替换成br</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.SubHtmlString(System.String,System.Int32,System.String)">
            <summary>
            截断HTML代码长度
            </summary>
            <param name="htmlString">string扩展</param>
            <param name="maxLength">最大长</param>
            <param name="flg">扩展字符</param>
            <returns>截断HTML代码长度</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.UTF8ToGB2312(System.String)">
            <summary>
            UTF8ToGB2312
            </summary>
            <param name="str">string扩展</param>
            <returns>UTF8ToGB2312</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GB2312ToUTF8(System.String)">
            <summary>
            GB2312ToUTF8
            </summary>
            <param name="str">string扩展</param>
            <returns>GB2312ToUTF8</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetParentPath(System.String,System.Char)">
            <summary>
            取父路径
            </summary>
            <example>
            <code>
            Msg.Write("c:/test/www".GetParentPath());
            Msg.Write("c:/test/www/".GetParentPath());
            Msg.Write("c:\\test\\www".GetParentPath('\\'));
            </code>
            </example>
            <param name="path">string扩展</param>
            <param name="c">char</param>
            <returns>取父路径</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetParentPath(System.String)">
            <summary>
            取父路径
            </summary>
            <param name="path">string扩展</param>
            <returns>取父路径</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetSimpleFileName(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            转换长文件名为短文件名
            </summary>
            <example>
            <code>
            string name = "http://www.testxt.test.com/test/test/test/test/test.aspx".GetSimpleFileName("...", 20, 10, 30)
            </code>
            </example>
            <param name="fullname">string扩展</param>
            <param name="repstring">替换的字符串</param>
            <param name="leftnum">左长</param>
            <param name="rightnum">右长</param>
            <param name="charnum">总长</param>
            <returns>转换长文件名为短文件名</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.WriteXMLEnd(System.String)">
            <summary>
            向页面输出xml内容
            </summary>
            <param name="xmlnode">xml内容</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.WriteJSONEnd(System.String)">
            <summary>
            输出json内容
            </summary>
            <param name="json">string扩展</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.WriteJSONPEnd(System.String)">
            <summary>
            输出jsonp内容
            </summary>
            <param name="json">string扩展</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.WriteEnd(System.String)">
            <summary>
            输出内容 并结束
            </summary>
            <param name="text">string扩展</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.Write(System.String)">
            <summary>
            输出内容
            </summary>
            <param name="text">string扩展</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.TrimEnd(System.String,System.String)">
            <summary>
            删除最后N个字符
            </summary>
            <param name="str">string扩展</param>
            <param name="lastchar">最后一个字符串</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.TrimEnd(System.String)">
            <summary>
            删除最后N个字符
            </summary>
            <param name="str">string扩展</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.TrimEnd(System.String,System.Int32)">
            <summary>
            删除最后N个字符
            </summary>
            <param name="str">string扩展</param>
            <param name="len">长度</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.TrimStart(System.String,System.String)">
            <summary>
            删除前面N个字符
            </summary>
            <param name="str">string扩展</param>
            <param name="prevchar">最后一个字符串</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.TrimStart(System.String)">
            <summary>
            删除前面N个字符
            </summary>
            <param name="str">string扩展</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.TrimStart(System.String,System.Int32)">
            <summary>
            删除前面N个字符
            </summary>
            <param name="str">string扩展</param>
            <param name="len">长度</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.Trim(System.String,System.Int32)">
            <summary>
            删除前面和后面N个字符
            </summary>
            <param name="str">string扩展</param>
            <param name="len">长度</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.Trim(System.String,System.String)">
            <summary>
            删除前面和后面N个字符
            </summary>
            <param name="str">string扩展</param>
            <param name="nchar">最后一个字符串</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToFile(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            保存到文件
            </summary>
            <param name="str">内容</param>
            <param name="fileName">文件路径</param>
            <param name="encoding">编码</param>
            <param name="isOver">是否重写</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToFile(System.String,System.String)">
            <summary>
            保存到文件
            </summary>
            <param name="str">内容</param>
            <param name="fileName">文件路径</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            保存到文件
            </summary>
            <param name="str">内容</param>
            <param name="fileName">文件路径</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.CheckOnNullEmpty(System.String,System.String)">
            <summary>
            CheckOnNullEmpty 检测是否为空，如果为空提示异常
            </summary>
            <param name="str">object扩展</param>
            <param name="parameterName">参数名</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.CheckOnNullEmpty(System.String,System.String,System.String)">
            <summary>
            CheckOnNullEmpty 检测是否为空，如果为空提示异常
            </summary>
            <param name="str">object扩展</param>
            <param name="parameterName">参数名</param>
            <param name="message">消息</param>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetHtmlEncoding(System.String,System.Text.Encoding)">
            <summary>
            取HTML内容编码 正则 utf8 gb_2312 utf_8 zh_cn
            </summary>
            <param name="contentType"></param>
            <param name="defaultEncoding">Encoding</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.RemoveJsonNull(System.String)">
            <summary>
            去除json的空属性
            </summary>
            <param name="json">json</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.RemoveEmptyNodes(System.String)">
            <summary>
            去除xml中的空节点
            </summary>
            <param name="xml">xml</param>
            <returns>整理过的xml字符串</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IfLengthEqual(System.String,System.Int32,System.String)">
            <summary>
            如果长等于
            </summary>
            <param name="obj">源数据</param>
            <param name="length">长度</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IfLengthNotEqual(System.String,System.Int32,System.String)">
            <summary>
            如果长不等于
            </summary>
            <param name="obj">源数据</param>
            <param name="length">长度</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IfLengthMoreThan(System.String,System.Int32,System.String)">
            <summary>
            如果长大于
            </summary>
            <param name="obj">源数据</param>
            <param name="length">长度</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IfLengthLessThan(System.String,System.Int32,System.String)">
            <summary>
            如果长小于
            </summary>
            <param name="obj">源数据</param>
            <param name="length">长度</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IfLengthMoreThanOrEqual(System.String,System.Int32,System.String)">
            <summary>
            如果长大于等于
            </summary>
            <param name="obj">源数据</param>
            <param name="length">长度</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IfLengthLessThanOrEqual(System.String,System.Int32,System.String)">
            <summary>
            如果长小于等于
            </summary>
            <param name="obj">源数据</param>
            <param name="length">长度</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IfEqual(System.String,System.String,System.String)">
            <summary>
            如果等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IfNotEqual(System.String,System.String,System.String)">
            <summary>
            如果不等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IfNullOrEmpty(System.String,System.String)">
            <summary>
            如果空
            </summary>
            <param name="obj">源数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IfNotNullOrEmpty(System.String,System.String)">
            <summary>
            如果非空
            </summary>
            <param name="obj">源数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.TrimIndexEnd(System.String,System.String)">
            <summary>
            删除结尾处指定字符串以后的字符
            </summary>
            <param name="obj">源字符串</param>
            <param name="end">存在的字符串</param>
            <returns>删除结尾处指定字符串以后的字符</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.TrimIndexStart(System.String,System.String)">
            <summary>
            删除行首处指定字符串以前的字符
            </summary>
            <param name="obj">源字符串</param>
            <param name="start">存在的字符串</param>
            <returns>删除行首处指定字符串以前的字符</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.Ascii2Native(System.String)">
            <summary>
            unicode ascii码转中文 Native2Ascii反操作
            </summary>
            <param name="str">字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.Native2Ascii(System.String)">
            <summary>
            中文转unicode ascii码 Ascii2Native反操作
            </summary>
            <param name="str">字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.To16Bytes(System.String)">
            <summary>
            16进制字节转字符串
            </summary>
            <param name="s">16进制字节</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToStr(System.String)">
            <summary>
            ToStr()
            </summary>
            <param name="strValue">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToStr2(System.String)">
            <summary>
            ToStr()
            </summary>
            <param name="strValue">string扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ReadAllBytes(System.String)">
            <summary>
            读取文件成字节
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDateTime(System.String,System.String)">
            <summary>
            字符串转日期
            </summary>
            <param name="date">string扩展</param>
            <param name="format">format</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToDictionary(System.String,System.String,System.String)">
            <summary>
            string转IDictionary ToDictionary("=","&amp;")
            </summary>
            <param name="parameters">string</param>
            <param name="split1">分隔符1</param>
            <param name="split2">分隔符2</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.CheckJson(System.String)">
            <summary>
            过滤JSON “”｛｝【】“ ：
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetJsonString(System.String,System.String)">
            <summary>
            提取JSON指定key的值
            </summary>
            <param name="json">json字符串</param>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetJsonInt(System.String,System.String)">
            <summary>
            提取JSON指定key的值
            </summary>
            <param name="json">json字符串</param>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetJsonBool(System.String,System.String)">
            <summary>
            提取JSON指定key的值
            </summary>
            <param name="json">json字符串</param>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetJsonLong(System.String,System.String)">
            <summary>
            提取JSON指定key的值
            </summary>
            <param name="json">json字符串</param>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetJsonDecimal(System.String,System.String)">
            <summary>
            提取JSON指定key的值
            </summary>
            <param name="json">json字符串</param>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetJsonObject(System.String,System.String)">
            <summary>
            提取JSON指定key的值
            </summary>
            <param name="json">json字符串</param>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetJsonArray(System.String,System.String)">
            <summary>
            提取JSON指定key的值
            </summary>
            <param name="json">json字符串</param>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetJsonArrays(System.String,System.String)">
            <summary>
            提取JSON指定key的值
            </summary>
            <param name="json">json字符串</param>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetXmlNodeText(System.String,System.String)">
            <summary>
            提取XML指定节点的内容
            </summary>
            <param name="xml">xml字符串</param>
            <param name="nodeName">节点名称</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetXmlNodeAttrString(System.String,System.String,System.String)">
            <summary>
            提取XML指定节点的属性值
            </summary>
            <param name="xml">xml字符串</param>
            <param name="nodeName">节点名称</param>
            <param name="attrName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetXmlNodeAttrInt(System.String,System.String,System.String)">
            <summary>
            提取XML指定节点的属性值
            </summary>
            <param name="xml">xml字符串</param>
            <param name="nodeName">节点名称</param>
            <param name="attrName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetXmlNodeAttrLong(System.String,System.String,System.String)">
            <summary>
            提取XML指定节点的属性值
            </summary>
            <param name="xml">xml字符串</param>
            <param name="nodeName">节点名称</param>
            <param name="attrName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.GetXmlNodeAttrDecimal(System.String,System.String,System.String)">
            <summary>
            提取XML指定节点的属性值
            </summary>
            <param name="xml">xml字符串</param>
            <param name="nodeName">节点名称</param>
            <param name="attrName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FromBase64(System.String)">
            <summary>
            base64转字节
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.FromBase64(System.String,System.Text.Encoding)">
            <summary>
            base64转字符串
            </summary>
            <param name="str"></param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToStrings(System.String,System.Char)">
            <summary>
            分解;分隔字符串
            </summary>
            <param name="str">字符串</param>
            <param name="split">分隔字符串</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.RemoveRegexChar(System.String)">
            <summary>
            正则字符转意
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsEncode(System.Char)">
            <summary>
            是否encode编码
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsEncode(System.String)">
            <summary>
            是否encode编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsPhysicalPath(System.String)">
            <summary>
            是否物理路径
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.IsRelativePath(System.String)">
            <summary>
            是否相对路径
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToSQL(System.String)">
            <summary>
            ToSQL
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringExtensions.ToStringBySecureString(System.Security.SecureString)">
            <summary>
            SecureString to String
            </summary>
            <param name="s">SecureString</param>
            <returns>String</returns>
        </member>
        <member name="T:Pub.Class.EncryptExtensions">
            <summary>
            加密码方法
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.AESEncode(System.String,System.String)">
            <summary>
            AES加密
            </summary>
            <param name="encryptString">明文</param>
            <param name="encryptKey">KEY</param>
            <returns>AES密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.AESDecode(System.String,System.String)">
            <summary>
            AES解密
            </summary>
            <param name="decryptString">AES密文</param>
            <param name="decryptKey">KEY</param>
            <returns>明文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.DESEncode(System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="encryptString">明文</param>
            <param name="encryptKey">KEY</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.DESDecode(System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="decryptString">密文</param>
            <param name="decryptKey">KEY</param>
            <returns>明文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.DES3Encode(System.String,System.String)">
            <summary>
            3DES加密(以utf-8编码)
            </summary>
            <param name="data">要加密的数据</param>
            <param name="key">密钥</param>
            <returns>加密后数据</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.DES3Decode(System.String,System.String)">
            <summary>
            3DES解密(以utf-8编码)
            </summary>
            <param name="data">要解密的数据</param>
            <param name="key">密钥</param>
            <returns>解密后数据</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.Base64Encode(System.String,System.Text.Encoding)">
            <summary>
            Base64加密
            </summary>
            <param name="encryptString">明文</param>
            <param name="encoding">编码</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.Base64Decode(System.String,System.Text.Encoding)">
            <summary>
            Base64解密
            </summary>
            <param name="decryptString">密文</param>
            <param name="encoding">编码</param>
            <returns>明文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.RSADecrypt(System.String,System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="s">密文</param>
            <param name="key">KEY</param>
            <returns>明文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.RSAEncrypt(System.String,System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="s">明文</param>
            <param name="key">KEY</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.MD5(System.String,System.Text.Encoding)">
            <summary>
            获取数据的MD5摘要
            </summary>
            <param name="data">原始数据</param>
            <param name="encoding">编码类型</param>
            <returns>MD5摘要</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.SHA256(System.String)">
            <summary>
            SHA256加密
            </summary>
            <param name="str">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.SHA1(System.String)">
            <summary>
            SHA1加密
            </summary>
            <param name="str">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.SHA512(System.String)">
            <summary>
            SHA512加密
            </summary>
            <param name="str">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.SHA1Hash(System.String)">
            <summary>
            SHA1Hash加密
            </summary>
            <param name="stringToHash">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.SHA256Hash(System.String)">
            <summary>
            SHA256Hash加密
            </summary>
            <param name="stringToHash">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.SHA512Hash(System.String)">
            <summary>
            SHA512Hash加密
            </summary>
            <param name="stringToHash">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.RijndaelEncrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Rijndael加密
            </summary>
            <param name="s">明文</param>
            <param name="key">KEY</param>
            <param name="mode">CipherMode</param>
            <param name="iv">iv</param>
            <param name="padding">PaddingMode</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.RijndaelDecrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Rijndael解密
            </summary>
            <param name="s">密文</param>
            <param name="key">KEY</param>
            <param name="mode">CipherMode</param>
            <param name="iv">iv</param>
            <param name="padding">PaddingMode</param>
            <returns>明文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.RC2Encrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            RC2加密
            </summary>
            <param name="s">明文</param>
            <param name="key">KEY</param>
            <param name="mode">CipherMode</param>
            <param name="iv">iv</param>
            <param name="padding">PaddingMode</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.RC2Decrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            RC2解密
            </summary>
            <param name="s">密文</param>
            <param name="key">KEY</param>
            <param name="mode">CipherMode</param>
            <param name="iv">iv</param>
            <param name="padding">PaddingMode</param>
            <returns>明文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.TripleDESEncrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            TripleDES加密
            </summary>
            <param name="s">明文</param>
            <param name="key">KEY</param>
            <param name="mode">CipherMode</param>
            <param name="iv">iv</param>
            <param name="padding">PaddingMode</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.TripleDESDecrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            TripleDES解密
            </summary>
            <param name="s">密文</param>
            <param name="key">KEY</param>
            <param name="mode">CipherMode</param>
            <param name="iv">iv</param>
            <param name="padding">PaddingMode</param>
            <returns>明文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.VernamEncrypt(System.String,System.String)">
            <summary>
            VernamEncrypt
            </summary>
            <param name="Input">明文</param>
            <param name="Key">KEY</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.VernamDecrypt(System.String,System.String)">
            <summary>
            VernamDecrypt
            </summary>
            <param name="Input">密文</param>
            <param name="Key">KEY</param>
            <returns>明文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.CaesarEncrypt(System.String,System.String)">
            <summary>
            CaesarDecrypt
            </summary>
            <param name="Input">明文</param>
            <param name="Key">Key</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.EncryptExtensions.CaesarDecrypt(System.String,System.String)">
            <summary>
            CaesarDecrypt
            </summary>
            <param name="Input">密文</param>
            <param name="Key">Key</param>
            <returns>明文</returns>
        </member>
        <member name="T:Pub.Class.Watermark">
            <summary>
            添加水印类 只支持添加图片水印
            
            修改纪录
                2006.05.15 版本：1.0 livexy 创建此类
            
            <example>
            <code>
                //图片水印
                Watermark wm = new Watermark();
                wm.DrawedImagePath= Server.MapPath("") + "/upfile/" + "backlogo.gif";
                wm.ModifyImagePath=path; 
                wm.RightSpace=184;
                wm.BottoamSpace=81;
                wm.LucencyPercent=50;
                wm.OutPath=Server.MapPath("") + "/upfile/" + fileName + "_new" + extension;
                wm.DrawImage();
                //保存加水印过后的图片,删除原始图片 
                mFileName=fileName + "_new" + extension;
                if(File.Exists(path)) {  File.Delete(path); } 
                
                //文字水印
                Watermark wm = new Watermark();
                wm.ModifyImagePath=path; 
                wm.OutPath=Server.MapPath("") + "/upfile/" + fileName + "_new" + extension;
                wm.DrawText("测试", 1, 100);
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.Watermark.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Pub.Class.Watermark.DrawImage">
            <summary>
            开始绘制图片水印
            </summary>
            <example>
            <code>
                Watermark wm = new Watermark();
                wm.DrawedImagePath= Server.MapPath("") + "/upfile/" + "backlogo.gif";
                wm.ModifyImagePath=path; 
                wm.RightSpace=184;
                wm.BottoamSpace=81;
                wm.LucencyPercent=50;
                wm.OutPath=Server.MapPath("") + "/upfile/" + fileName + "_new" + extension;
                wm.DrawImage();
                
                //保存加水印过后的图片,删除原始图片 
                mFileName=fileName + "_new" + extension;
                if(File.Exists(path)) {  File.Delete(path); } 
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.Watermark.DrawText(System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            开始绘制文字水印
            </summary>
            <example>
            <code>
            Watermark wm = new Watermark();
            wm.ModifyImagePath=path; 
            wm.OutPath=Server.MapPath("") + "/upfile/" + fileName + "_new" + extension;
            wm.DrawText("测试", 1, 100);
            </code>
            </example>
            <param name="watermarkText">文字</param>
            <param name="watermarkStatus">1-9</param>
            <param name="quality">质量</param>
            <param name="fontname">字体</param>
            <param name="fontsize">大小</param>
        </member>
        <member name="P:Pub.Class.Watermark.ModifyImagePath">
            <summary>
            获取或设置要修改的图像路径
            </summary>
        </member>
        <member name="P:Pub.Class.Watermark.DrawedImagePath">
            <summary>
            获取或设置在画的图片路径(水印图片)
            </summary>
        </member>
        <member name="P:Pub.Class.Watermark.RightSpace">
            <summary>
            获取或设置水印在修改图片中的右边距
            </summary>
        </member>
        <member name="P:Pub.Class.Watermark.BottoamSpace">
            <summary>
            获取或设置水印在修改图片中距底部的高度
            </summary>
        </member>
        <member name="P:Pub.Class.Watermark.LucencyPercent">
            <summary>
            获取或设置要绘制水印的透明度,注意是原来图片透明度的百分比
            </summary>
        </member>
        <member name="P:Pub.Class.Watermark.OutPath">
            <summary>
            获取或设置要输出图像的路径
            </summary>
        </member>
        <member name="T:Pub.Class.Safe">
            <summary>
            安全操作类
            
            修改纪录
                2006.05.10 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.Safe.IsSafeUrl(System.String)">
            <summary>
            不允许在本地提交数据
            </summary>
            <remarks>返回是否是安全URL</remarks>
            <param name="doMain">域名</param>
        </member>
        <member name="M:Pub.Class.Safe.IsExistProcess(System.String)">
            <summary>
            进程启动数量
            </summary>
            <param name="processName">进程名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Safe.GetPIDByProcessWindowTitle(System.String)">
            <summary>
            获取窗体的进程标识ID
            </summary>
            <param name="windowTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Safe.GetPIDByProcessName(System.String)">
            <summary>
            根据进程名获取PID
            </summary>
            <param name="processName"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Safe.FindWindowByProcessName(System.String)">
            <summary>
            根据窗体标题查找窗口句柄（支持模糊匹配）
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Safe.ProcessHandle(System.String)">
            <summary>
            进程启动数量
            </summary>
            <param name="processName">进程名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Safe.KillProcess(System.String)">
            <summary>
            杀死进程
            </summary>
            <param name="processName">进程名</param>
        </member>
        <member name="M:Pub.Class.Safe.KillProcess(System.String,System.Int32)">
            <summary>
            杀死进程
            </summary>
            <param name="processName">进程名</param>
            <param name="TimeToKill">延时</param>
        </member>
        <member name="M:Pub.Class.Safe.KillProcessAsync(System.String,System.Int32)">
            <summary>
            杀死进程
            </summary>
            <param name="processName">进程名</param>
            <param name="TimeToKill">延时</param>
        </member>
        <member name="M:Pub.Class.Safe.RunWait(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            运行一个进程并等待它执行完成
            </summary>
            <param name="cmd">进程</param>
            <param name="arguments">参数</param>
            <param name="isOutput">是否返回输出数据</param>
            <param name="commands">执行多行命令</param>
            <returns>如果进程出错返回错误日志</returns>
        </member>
        <member name="M:Pub.Class.Safe.RunWaitHandle(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            运行一个进程并等待它执行完成
            </summary>
            <param name="cmd">进程</param>
            <param name="arguments">参数</param>
            <param name="isOutput">是否返回输出数据</param>
            <param name="commands">执行多行命令</param>
            <returns>如果进程出错返回错误日志</returns>
        </member>
        <member name="M:Pub.Class.Safe.RunWait(System.String,System.Diagnostics.ProcessWindowStyle,System.String)">
            <summary>
            运行一个进程并等待它执行完成 可指定窗口样式
            </summary>
            <param name="cmd">进程</param>
            <param name="arguments">参数</param>
            <param name="winStyle">窗口状态 最大化 最小化 隐藏</param>
            <returns>如果进程出错返回错误日志</returns>
        </member>
        <member name="M:Pub.Class.Safe.RunWaitHandle(System.String,System.Diagnostics.ProcessWindowStyle,System.String)">
            <summary>
            运行一个进程并等待它执行完成 可指定窗口样式
            </summary>
            <param name="cmd">进程</param>
            <param name="arguments">参数</param>
            <param name="winStyle">窗口状态 最大化 最小化 隐藏</param>
            <returns>如果进程出错返回错误日志</returns>
        </member>
        <member name="M:Pub.Class.Safe.RunAsync(System.String,System.String)">
            <summary>
            异步执行进程
            </summary>
            <param name="cmd">进程</param>
            <param name="arguments">参数</param>
            <returns>如果进程出错返回错误日志</returns>
        </member>
        <member name="M:Pub.Class.Safe.RunAsync(System.String,System.Diagnostics.ProcessWindowStyle,System.String)">
            <summary>
            异步执行进程
            </summary>
            <param name="cmd">进程</param>
            <param name="arguments">参数</param>
            <param name="winStyle">窗口状态 最大化 最小化 隐藏</param>
            <returns>如果进程出错返回错误日志</returns>
        </member>
        <member name="M:Pub.Class.Safe.RestartIISProcess">
            <summary>
            hack tip:通过更新web.config文件方式来重启IIS进程池（注：iis中web园数量须大于1,且为非虚拟主机用户才可调用该方法）
            </summary>
        </member>
        <member name="M:Pub.Class.Safe.SetDateTime">
            <summary>
            设置打开页面的时间
            </summary>
        </member>
        <member name="M:Pub.Class.Safe.IsRefresh(System.Int32)">
            <summary>
            判断是否在指定多少秒内提交数据，来达到判断是否刷新页面的目的
            </summary>
            <param name="seconds">多少秒内</param>
            <returns>是/否</returns>
        </member>
        <member name="M:Pub.Class.Safe.SafeGetPost(System.String)">
            <summary>
            安全提交，防本地提交
            </summary>
            <param name="doMain">域名</param>
        </member>
        <member name="M:Pub.Class.Safe.DllInvoke(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            加载DLL的方法 不支持重载方法 速度慢
            </summary>
            <example>
            <code>
            Safe.DllInvoke("../bin/Pub.Class.dll".GetMapPath(), "Pub.Class", "Session2", "Set", new object[] { "test", "3" });
            Msg.Write(Safe.DllInvoke("../bin/Pub.Class.dll".GetMapPath(), "Pub.Class", "Session2", "Get", new object[] { "test" }));
            </code>
            </example>
            <param name="DllFileName">dll全路径</param>
            <param name="NameSpace">命名空间</param>
            <param name="ClassName">类名</param>
            <param name="MethodName">方法名</param>
            <param name="ObjArrayParams">参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Pub.Class.Safe.Expand(System.Exception)">
            <summary>
            显示详细的出错信息
            </summary>
            <param name="ex">Exception ex</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Safe._expandException(System.Exception,System.Int32,System.Text.StringBuilder)">
            <summary>
            显示详细的出错信息
            </summary>
            <param name="ex">Exception ex</param>
            <param name="offSet"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Pub.Class.Safe.expandData(System.Collections.IDictionary,System.Int32)">
            <summary>
            显示详细的出错信息
            </summary>
            <param name="iDictionary">IDictionary</param>
            <param name="offSet">offSet</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.CopyDataStruct">
            <summary>
            WM_COPYDATA消息所要求的数据结构
            </summary>
        </member>
        <member name="F:Pub.Class.CopyDataStruct.dwData">
            <summary>
            handler
            </summary>
        </member>
        <member name="F:Pub.Class.CopyDataStruct.cbData">
            <summary>
            cb data
            </summary>
        </member>
        <member name="F:Pub.Class.CopyDataStruct.lpData">
            <summary>
            lp data
            </summary>
        </member>
        <member name="T:Pub.Class.PARAFORMAT2">
            <summary>
            设置RichTextBox行距所需要的数据结构,PARAFORMAT2
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.cbSize">
            <summary>
            cbSize
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.dwMask">
            <summary>
            dwMask
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.wNumbering">
            <summary>
            wNumbering
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.wReserved">
            <summary>
            wReserved
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.dxStartIndent">
            <summary>
            dxStartIndent
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.dxRightIndent">
            <summary>
            dxRightIndent
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.dxOffset">
            <summary>
            dxOffset
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.wAlignment">
            <summary>
            wAlignment
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.cTabCount">
            <summary>
            cTabCount
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.rgxTabs">
            <summary>
            rgxTabs
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.dySpaceBefore">
            <summary>
            dySpaceBefore
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.dySpaceAfter">
            <summary>
            dySpaceAfter
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.dyLineSpacing">
            <summary>
            dyLineSpacing
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.sStyle">
            <summary>
            sStyle
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.bLineSpacingRule">
            <summary>
            bLineSpacingRule
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.bOutlineLevel">
            <summary>
            bOutlineLevel
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.wShadingWeight">
            <summary>
            wShadingWeight
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.wShadingStyle">
            <summary>
            wShadingStyle
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.wNumberingStart">
            <summary>
            wNumberingStart
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.wNumberingStyle">
            <summary>
            wNumberingStyle
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.wNumberingTab">
            <summary>
            wNumberingTab
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.wBorderSpace">
            <summary>
            wBorderSpace
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.wBorderWidth">
            <summary>
            wBorderWidth
            </summary>
        </member>
        <member name="F:Pub.Class.PARAFORMAT2.wBorders">
            <summary>
            wBorders
            </summary>
        </member>
        <member name="T:Pub.Class.WinApi">
            <summary>
            WinApi
            </summary>
            <example>
            <code>
            IntPtr _hWndInvisibleWindow;
            if (_hWndInvisibleWindow != IntPtr.Zero) WinApi.SendMessage(_hWndInvisibleWindow, WinApi.WM_SYSCOMMAND, WinApi.SC_CLOSE, 0);  
            IntPtr hBuiltInDialog = WinApi.FindWindow("#32770", "");
            if (hBuiltInDialog != IntPtr.Zero) {
                List&lt;IntPtr> childWindows = WinApi.EnumChildWindows(hBuiltInDialog); 
                List&lt;string> childWindowNames = WinApi.GetWindowNames(childWindows);
                if (!childWindowNames.Contains("Nur N&amp;ame")) return;
                if (!childWindowNames.Contains("Mehr Spalten")) return;
                _hWndInvisibleWindow = WinApi.CreateWindowEx(0, "Static", "X4UTrick", 0, 0, 0, 0, 0, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero); 
                WinApi.SetParent(hBuiltInDialog, _hWndInvisibleWindow);
                WinApi.SendMessage(hBuiltInDialog, WinApi.WM_SYSCOMMAND, WinApi.SC_CLOSE, 0);
            }
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.WinApi.PostMessage(System.IntPtr,System.UInt32,System.Int32,System.Int32)">
            <param name="hWnd">窗口句柄</param>
            <param name="msg">消息</param>
            <param name="wParam">参数1</param>
            <param name="lParam">参数2</param>
        </member>
        <member name="M:Pub.Class.WinApi.PostMessage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="hWnd">窗口句柄</param>
            <param name="msg">消息</param>
            <param name="wParam">参数1</param>
            <param name="lParam">参数2</param>
        </member>
        <member name="M:Pub.Class.WinApi.MouseLeftClick(System.IntPtr,System.Drawing.Point)">
            <summary>
            鼠标左键单击
            </summary>
            <param name="handle">窗口句柄</param>
            <param name="x">位置</param>
        </member>
        <member name="M:Pub.Class.WinApi.ClickButton(System.IntPtr,System.String)">
            <summary>
            按钮单击事件
            </summary>
            <param name="CurrnetFormHandle">窗口句柄</param>
            <param name="strWindow">按钮标题</param>
        </member>
        <member name="M:Pub.Class.WinApi.ClickButton(System.IntPtr,System.String,System.String)">
            <summary>
            按钮单击事件
            </summary>
            <param name="CurrnetFormHandle">窗口句柄</param>
            <param name="strClass">按钮类名</param>
            <param name="strWindow">按钮标题</param>
        </member>
        <member name="M:Pub.Class.WinApi.ClickButton(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            按钮单击事件
            </summary>
            <param name="hwdParent">窗口句柄</param>
            <param name="hwndChildAfter"></param>
            <param name="strClass">按钮类名</param>
            <param name="strWindow">按钮标题</param>
        </member>
        <member name="M:Pub.Class.WinApi.GetParent(System.IntPtr)">
            <summary>
            获取父窗口句柄
            </summary>
            <example>
            <code>
            WinApi.GetParent(this.HWND)
            </code>
            </example>
            <param name="hWnd">窗口句柄</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.GetWindowRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
            获取窗口位置和大小
            </summary>
            <example>
            <code>
            WinApi.GetWindowRect(this.HWND)
            </code>
            </example>
            <param name="hwnd">窗口句柄</param>
            <param name="rc">位置和大小</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.GetClientRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
            获取工作区位置和大小
            </summary>
            <example>
            <code>
            Rectangle clientSize = WinApi.GetClientRect(this.HWND);
            </code>
            </example>
            <param name="hwnd">窗口句柄</param>
            <param name="rc">位置和大小</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            移动窗口
            </summary>
            <example>
            <code>
            WinApi.MoveWindow(this.HWND, left, this.Top, this.Width, this.Height, true);
            </code>
            </example>
            <param name="hwnd">窗口句柄</param>
            <param name="x">x坐标</param>
            <param name="y">y坐标</param>
            <param name="nWidth">宽</param>
            <param name="nHeight">高</param>
            <param name="bRepaint"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.ScreenToClient(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
            
            </summary>
            <example>
            <code>
            Rectangle clientPoint = WinApi.ScreenToClient(this.Parent.HWND, WinApi.GetWindowRect(this.HWND));
            </code>
            </example>
            <param name="hWnd">窗口句柄</param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.SetTextBySendMessage(System.IntPtr,System.String)">
            <summary>
            给文本框赋值
            </summary>
            <example>
            <code>
            WinApi.SetTextBySendMessage(this.HWND, "测试数据");
            </code>
            </example>
            <param name="hWnd">句柄</param>
            <param name="lParam">要发送的内容</param>
        </member>
        <member name="M:Pub.Class.WinApi.SetWindowText(System.IntPtr,System.String)">
            <summary>
            设置窗口标题
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="lpString">标题</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.GetWindowText(System.IntPtr)">
            <summary>
            获得窗口内容或标题
            </summary>
            <example>
            <code>
            WinApi.GetText(this.HWND)
            </code>
            </example>
            <param name="hWnd">句柄</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.GetWindowTexts(System.Collections.Generic.List{System.IntPtr})">
            <summary>
            获得窗口内容或标题
            </summary>
            <param name="windowHandles">句柄列表</param>
            <returns></returns>
            <example>
            <code>
            List&lt;string> childWindowNames = WinApi.GetWindowTexts(childWindows);
            if (!childWindowNames.Contains("Nur N&amp;ame")) return;
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.WinApi.GetClassName(System.IntPtr)">
            <summary>
            找类名
            </summary>
            <example>
            <code>
            WinApi.GetClassName(this.HWND);
            </code>
            </example>
            <param name="hWnd">句柄</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.GetWindowRect(System.IntPtr)">
            <summary>
            窗口在屏幕位置
            </summary>
            <param name="hWnd">句柄</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.ScreenToClient(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
            窗口相对屏幕位置转换成父窗口位置
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.GetClientRect(System.IntPtr)">
            <summary>
            窗口大小
            </summary>
            <param name="hWnd">窗口句柄</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.keybd_event(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            模拟键盘按键
            keybd_event(179, 0, 0, 0);
            keybd_event(179, 0, 2, 0);  
            keybd_event((byte)Keys.CapsLock , 0, 0, 0);
            keybd_event((byte)Keys.CapsLock , 0, 2, 0);
            模拟按下'ALT+F4'键
            keybd_event(18,0,0,0);
            keybd_event(115,0,0,0);
            keybd_event(115,0,KEYEVENTF_KEYUP,0);
            keybd_event(18,0,KEYEVENTF_KEYUP,0); 
            </summary>
            <param name="bVk">虚拟键值</param>
            <param name="bScan">一般为0</param>
            <param name="dwFlags">这里是整数类型 0 为按下，2为释放</param>
            <param name="dwExtraInfo">这里是整数类型 一般情况下设成为0</param>
        </member>
        <member name="M:Pub.Class.WinApi.KeyboardEvent(System.Char)">
            <summary>
            模拟键盘输入
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Pub.Class.WinApi.KeyboardEvent(System.String)">
            <summary>
            模拟键盘输入
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Pub.Class.WinApi.BlockInput(System.Boolean)">
            <summary>
            锁定鼠标键盘
            </summary>
            <param name="Block">True:锁 False:解</param>
        </member>
        <member name="M:Pub.Class.WinApi.LockWorkStation">
            <summary>
            windows的系统锁定
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.EnumChildWindows(System.Int32,System.Int32,System.Int32)">
            <summary>
            遍历所有子窗口
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.EnumChildWindows(System.IntPtr)">
            <summary>
            遍历所有子窗口
            </summary>
            <example>
            <code>
            List&lt;IntPtr> childWindows = WinApi.EnumChildWindows(hBuiltInDialog);
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.WinApi.EnumChildWindows(System.IntPtr,Pub.Class.WinApi.EnumWindowProc,System.IntPtr)">
            <summary>
            遍历所有子窗口
            </summary>
        </member>
        <member name="M:Pub.Class.WinApi.CreateWindowEx(System.UInt32,System.String,System.String,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            创建一个窗口
            </summary>
            <example>
            <code>
            IntPtr _hWndInvisibleWindow = WinApi.CreateWindowEx(0, "Static", "X4UTrick", 0, 0, 0, 0, 0, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero, IntPtr.Zero); 
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.WinApi.SetWindowLong(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="nIndex">指定要设定的值的信息</param>
            <param name="dwNewLong">新值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.FlashWindow(System.IntPtr,System.Int32)">
            <summary>
            窗体闪烁 FlashWindow(this.Handle, 5);
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.AnimateWindow(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            动画窗口
            AnimateWindow(this.Handle, 500, Win32.AW_VER_NEGATIVE);
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.SetDlgItemText(System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="hDlg">指定含有控制的对话框</param>
            <param name="nIDDlgItem">标识带有将被设置的标题和文本的控制。</param>
            <param name="lpString">指向一个以NULL结尾的字符串指针，该字符串指针包含了将被复制到控制的文本。</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.GetLocalWindow">
            <summary>
            当前窗口
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.GetAllDesktopWindows">
            <summary>
            取桌面上的所有父级窗口
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.FindWindow(System.String,System.String)">
            <summary>
            查找窗口句柄，如果找到多个匹配窗口，则返回顶层窗口句柄
            </summary>
            <param name="className">窗口类名</param>
            <param name="windowName">窗口标题</param>
            <example>
            <code>
            IntPtr h = WinApi.FindWindow("#32770", "");
            if (h != IntPtr.Zero) { }
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.WinApi.FindWindowByText(System.String)">
            <summary>
            查找窗口句柄，如果找到多个匹配窗口，则返回顶层窗口句柄
            </summary>
            <param name="windowName">窗口标题</param>
        </member>
        <member name="M:Pub.Class.WinApi.FindWindowByClass(System.String)">
            <summary>
            查找窗口句柄，如果找到多个匹配窗口，则返回顶层窗口句柄
            </summary>
            <param name="className">窗口类名</param>
        </member>
        <member name="M:Pub.Class.WinApi.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
            查找窗口句柄，如果找到多个匹配窗口，则返回顶层窗口句柄
            </summary>
            <param name="handlerParent">父窗口句柄, 如果为0, 则以桌面窗口为父窗口, 查找桌面窗口的所有子窗口</param>
            <param name="handlerChildAfter">子窗口句柄,
            1. 子窗口必须是父窗口的直接子窗口.
            2. 如果子窗口为0,则从父窗口的第一个子窗口开始查找</param>
            <param name="childClassName">子窗口类名</param>
            <param name="childWindowName">子窗口标题</param>
        </member>
        <member name="M:Pub.Class.WinApi.FindWindowExByText(System.IntPtr,System.String)">
            <summary>
            查找窗口句柄，如果找到多个匹配窗口，则返回顶层窗口句柄
            </summary>
            <param name="handlerParent">父窗口句柄, 如果为0, 则以桌面窗口为父窗口, 查找桌面窗口的所有子窗口</param>
            <param name="childWindowName">子窗口标题</param>
        </member>
        <member name="M:Pub.Class.WinApi.FindWindowExByText(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            查找窗口句柄，如果找到多个匹配窗口，则返回顶层窗口句柄
            </summary>
            <param name="handlerParent">父窗口句柄, 如果为0, 则以桌面窗口为父窗口, 查找桌面窗口的所有子窗口</param>
            <param name="handlerChildAfter">子窗口句柄,
            1. 子窗口必须是父窗口的直接子窗口.
            2. 如果子窗口为0,则从父窗口的第一个子窗口开始查找</param>
            <param name="childWindowName">子窗口标题</param>
        </member>
        <member name="M:Pub.Class.WinApi.FindWindowExByClass(System.IntPtr,System.String)">
            <summary>
            查找窗口句柄，如果找到多个匹配窗口，则返回顶层窗口句柄
            </summary>
            <param name="handlerParent">父窗口句柄, 如果为0, 则以桌面窗口为父窗口, 查找桌面窗口的所有子窗口</param>
            <param name="childClassName">子窗口类名</param>
        </member>
        <member name="M:Pub.Class.WinApi.FindWindowExByClass(System.IntPtr,System.IntPtr,System.String)">
            <summary>
            查找窗口句柄，如果找到多个匹配窗口，则返回顶层窗口句柄
            </summary>
            <param name="handlerParent">父窗口句柄, 如果为0, 则以桌面窗口为父窗口, 查找桌面窗口的所有子窗口</param>
            <param name="handlerChildAfter">子窗口句柄,
            1. 子窗口必须是父窗口的直接子窗口.
            2. 如果子窗口为0,则从父窗口的第一个子窗口开始查找</param>
            <param name="childClassName">子窗口类名</param>
        </member>
        <member name="M:Pub.Class.WinApi.FindWindowExByClasss(System.IntPtr,System.String)">
            <summary>
            全部子窗口句柄
            </summary>
            <param name="hwndParent">窗口句柄</param>
            <param name="className">类名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.FindWindowExByTexts(System.IntPtr,System.String)">
            <summary>
            全部子窗口句柄
            </summary>
            <param name="hwndParent">窗口句柄</param>
            <param name="className">类名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.SetForegroundWindow(System.IntPtr)">
            <summary>
            设置活动窗口
            </summary>
            <param name="handlerWindow">窗口句柄</param>
        </member>
        <member name="M:Pub.Class.WinApi.ShowWindowAsync(System.IntPtr,System.Int32)">
            <summary>
            激活窗口，设置窗口状态 1默认 2最小化窗口 3最大化窗口
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="cmdShow">窗口状态 1默认 2最小化窗口 3最大化窗口</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.SetActiveWindow(System.IntPtr)">
            <summary>
            激活窗口
            </summary>
            <param name="hWnd">窗口句柄</param>
        </member>
        <member name="M:Pub.Class.WinApi.SetActiveWindow(System.IntPtr,System.Int32)">
            <summary>
            激活窗口,并设置窗口状态 1默认 2最小化窗口 3最大化窗口
            </summary>
            <param name="handlerWindow">窗口句柄</param>
            <param name="status">窗口状态 1默认 2最小化窗口 3最大化窗口</param>
        </member>
        <member name="M:Pub.Class.WinApi.ShowWindow(System.IntPtr,System.UInt32)">
            <summary>
            显示或隐藏窗口
            </summary>
            <param name="handlerWindow">窗口句柄</param>
            <param name="cmd">命令 1显示 0隐藏</param>
        </member>
        <member name="M:Pub.Class.WinApi.ShowWindow(System.IntPtr)">
            <summary>
            显示窗口
            </summary>
            <param name="handlerWindow">窗口句柄</param>
        </member>
        <member name="M:Pub.Class.WinApi.HideWindow(System.IntPtr)">
            <summary>
            隐藏窗口
            </summary>
            <param name="handlerWindow">窗口句柄</param>
        </member>
        <member name="M:Pub.Class.WinApi.ShowTaskBar">
            <summary>
            显示任务栏
            </summary>
        </member>
        <member name="M:Pub.Class.WinApi.HideTaskBar">
            <summary>
            隐藏任务栏
            </summary>
        </member>
        <member name="M:Pub.Class.WinApi.SendMessage(System.IntPtr,System.UInt32,System.Int32,System.Int32)">
            <summary>
            向窗口发送Windows消息
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="msg">消息</param>
            <param name="wParam">参数1</param>
            <param name="lParam">参数2</param>
            <example>
            <code>
            WinApi.SendMessage(hBuiltInDialog, WinApi.WM_SYSCOMMAND, WinApi.SC_CLOSE, 0); 
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.WinApi.SendMessage(System.IntPtr,System.Int32,System.Int32,Pub.Class.CopyDataStruct@)">
            <summary>
            向窗口发送Windows消息
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="msg">消息</param>
            <param name="wParam">参数1</param>
            <param name="lParam">参数2</param>
        </member>
        <member name="M:Pub.Class.WinApi.SendMessage(System.IntPtr,System.Int32,System.Int32,Pub.Class.PARAFORMAT2@)">
            <summary>
            向窗口发送Windows消息
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="msg">消息</param>
            <param name="wParam">参数1</param>
            <param name="lParam">参数2</param>
        </member>
        <member name="M:Pub.Class.WinApi.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.String)">
            <summary>
            SendMessage(this.textBox1.Handle, WMessages.WM_SETTEXT, IntPtr.Zero, s);
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="msg">消息</param>
            <param name="wParam">参数1</param>
            <param name="lParam">参数2</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.SendMessage(System.IntPtr,System.Int32,System.Int32,System.String)">
            <summary>
            发送消息(要等处理程序处理完，发送程序才能继续执行)
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="msg">消息</param>
            <param name="wParam">参数1</param>
            <param name="lParam">参数2</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.SendMessage(System.Runtime.InteropServices.HandleRef,System.UInt32,System.IntPtr,System.String)">
            <param name="hWnd">窗口句柄</param>
            <param name="msg">消息</param>
            <param name="wParam">参数1</param>
            <param name="lParam">参数2</param>
        </member>
        <member name="M:Pub.Class.WinApi.SendMessage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="hWnd">窗口句柄</param>
            <param name="msg">消息</param>
            <param name="wParam">参数1</param>
            <param name="lParam">参数2</param>
        </member>
        <member name="M:Pub.Class.WinApi.GetFocus">
            <summary>
            获取当前焦点控件的窗口句柄
            </summary>
        </member>
        <member name="M:Pub.Class.WinApi.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            获取窗口句柄的类名
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="lpClassName">获取的类名</param>
            <param name="nMaxCount">接收类名缓冲区的大小</param>
        </member>
        <member name="M:Pub.Class.WinApi.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
            获取窗口句柄的标题
            </summary>
            <param name="handler">窗口句柄</param>
            <param name="text">获取的标题</param>
            <param name="size">接收标题缓冲区的大小</param>
        </member>
        <member name="M:Pub.Class.WinApi.ShowCursor(System.Boolean)">
            <summary>
            显示或隐藏鼠标
            </summary>
            <param name="isShow">是否显示鼠标</param>
        </member>
        <member name="M:Pub.Class.WinApi.SetCursorPos(System.Int32,System.Int32)">
            <summary>
            设置光标位置
            </summary>
            <param name="x">鼠标的X坐标</param>
            <param name="y">鼠标的Y坐标</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.GetCursorPos(System.Drawing.Point@)">
            <summary>
            获取当前鼠标的位置
            </summary>
            <param name="point">鼠标的当前位置</param>
        </member>
        <member name="M:Pub.Class.WinApi.ClientToScreen(System.IntPtr,System.Drawing.Point@)">
            <summary>
            获取窗口句柄的屏幕坐标
            </summary>
            <param name="handler">窗口句柄</param>
            <param name="point">窗口句柄的位置</param>
        </member>
        <member name="M:Pub.Class.WinApi.WindowFromPoint(System.Drawing.Point)">
            <summary>
            通过屏幕坐标获取窗口句柄
            </summary>
            <param name="Point">屏幕的位置</param>
        </member>
        <member name="M:Pub.Class.WinApi.SetWindowPos(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            SetWindowPos(this.Handle, 100, Screen.PrimaryScreen.Bounds.Width - this.Width, Screen.PrimaryScreen.Bounds.Height - this.Height - 30, 50, 50, 1);
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="hWndInsertAfter">前一个的窗口句柄</param>
            <param name="x">X坐标</param>
            <param name="y">Y坐标</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="flags">标识</param>
        </member>
        <member name="M:Pub.Class.WinApi.mouse_event(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            模拟鼠标事件
            mouse_event(WMessages.MOUSEEVENTF_RIGHTDOWN, X , Y , 0, 0);
            keybd_event((byte)Keys.F11, 0, 0, 0);//按下F11
            keybd_event((byte)Keys.F11, 0, 0x2, 0);   //弹起F11
            </summary>
            <param name="dwFlags">鼠标事件</param>
            <param name="dx">X坐标</param>
            <param name="dy">Y坐标</param>
            <param name="cButtons"></param>
            <param name="dwExtraInfo"></param>
        </member>
        <member name="M:Pub.Class.WinApi.ReadProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            读进程内存
            </summary>
            <param name="hProcess"></param>
            <param name="lpBaseAddress"></param>
            <param name="lpBuffer"></param>
            <param name="nSize"></param>
            <param name="lpNumberOfBytesRead"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.OpenProcess(System.Int32,System.Boolean,System.Int32)">
            <summary>
            打开进程
            </summary>
            <param name="dwDesiredAccess"></param>
            <param name="bInheritHandle"></param>
            <param name="dwProcessId"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.WriteProcessMemory(System.IntPtr,System.IntPtr,System.Int32[],System.Int32,System.IntPtr)">
            <summary>
            写内存
            </summary>
            <param name="hProcess"></param>
            <param name="lpBaseAddress"></param>
            <param name="lpBuffer"></param>
            <param name="nSize"></param>
            <param name="lpNumberOfBytesWritten"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.ReadMemoryValue(System.Int32,System.String)">
            <summary>
            读取内存中的值
            </summary>
            <param name="baseAddress"></param>
            <param name="processName"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.WriteMemoryValue(System.Int32,System.String,System.Int32)">
            <summary>
            将值写入指定内存地址中
            </summary>
            <param name="baseAddress"></param>
            <param name="processName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Pub.Class.WinApi.QueryThreadCycleTime(System.IntPtr,System.UInt64@)">
            <summary>
            QueryThreadCycleTime kernel32.dll API
            </summary>
            <param name="threadHandle">句柄</param>
            <param name="cycleTime"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.GetCurrentThread">
            <summary>
            GetCurrentThread kernel32.dll API
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WinApi.GetCycleCount">
            <summary>
            线程执行周期
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.StringBuilderExtensions">
            <summary>
            StringBuilder 扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.StringBuilderExtensions.IsNullEmpty(System.Text.StringBuilder)">
            <summary>
            是否空或null
            </summary>
            <param name="sb">StringBuilder扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.StringBuilderExtensions.Clear(System.Text.StringBuilder)">
            <summary>
            清空
            </summary>
            <param name="sb">StringBuilder扩展</param>
        </member>
        <member name="M:Pub.Class.StringBuilderExtensions.RemoveLastChar(System.Text.StringBuilder,System.String)">
            <summary>
            删除最后N个字符
            </summary>
            <param name="sb">StringBuilder扩展</param>
            <param name="lastchar">最后一个字符串</param>
        </member>
        <member name="M:Pub.Class.StringBuilderExtensions.RemoveLastChar(System.Text.StringBuilder)">
            <summary>
            删除最后1个字符
            </summary>
            <param name="sb">StringBuilder扩展</param>
        </member>
        <member name="M:Pub.Class.StringBuilderExtensions.RemoveLastChar(System.Text.StringBuilder,System.Int32)">
            <summary>
            删除最后N个字符
            </summary>
            <param name="sb">StringBuilder扩展</param>
            <param name="len">长度</param>
        </member>
        <member name="M:Pub.Class.StringBuilderExtensions.ClearAll(System.Text.StringBuilder)">
            <summary>
            清空
            </summary>
            <param name="sb">StringBuilder扩展</param>
        </member>
        <member name="M:Pub.Class.StringBuilderExtensions.RemoveLast(System.Text.StringBuilder,System.String)">
            <summary>
            删除最后N个字符
            </summary>
            <param name="sb">StringBuilder扩展</param>
            <param name="lastchar">最后一个字符串</param>
        </member>
        <member name="M:Pub.Class.StringBuilderExtensions.RemoveLast(System.Text.StringBuilder)">
            <summary>
            删除最后1个字符
            </summary>
            <param name="sb">StringBuilder扩展</param>
        </member>
        <member name="M:Pub.Class.StringBuilderExtensions.RemoveLast(System.Text.StringBuilder,System.Int32)">
            <summary>
            删除最后N个字符
            </summary>
            <param name="sb">StringBuilder扩展</param>
            <param name="len">长度</param>
        </member>
        <member name="M:Pub.Class.StringBuilderExtensions.GetGoogleSitemap(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            GoogleSitemap
            </summary>
            <param name="code">StringBuilder扩展</param>
            <param name="loc">网址</param>
            <param name="changefreq">更改的频率</param>
            <param name="priority">记录优先级</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringBuilderExtensions.GetGoogleSitemap(System.Text.StringBuilder,System.String)">
            <summary>
            Google Sitemap
            </summary>
            <param name="code">StringBuilder扩展</param>
            <param name="loc">网址</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.StringBuilderExtensions.GetBaiduSitemap(System.Text.StringBuilder,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Baidu Sitemap
            </summary>
            <param name="code">StringBuilder扩展</param>
            <param name="title">标题</param>
            <param name="link">链接</param>
            <param name="description">描述</param>
            <param name="text">内容</param>
            <param name="image">图片</param>
            <param name="keywords">关键字</param>
            <param name="category">分类</param>
            <param name="author">作者</param>
            <param name="source">源地址</param>
            <param name="pubDate">发布时间</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.ISerializeBytes">
            <summary>
            序列化接口
            
            修改纪录
                2011.07.11 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.ISerializeBytes.Serialize``1(``0)">
            <summary>
            序列化
            </summary>
            <param name="o">对像</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Pub.Class.ISerializeBytes.Deserialize``1(System.Byte[])">
            <summary>
            data反序列化成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="data">内容</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.ISerializeBytes.SerializeFile``1(``0,System.String)">
            <summary>
            序列成文件
            </summary>
            <param name="o">对像</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Pub.Class.ISerializeBytes.DeserializeFile``1(System.String)">
            <summary>
            文件反序列化成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="fileName">文件名</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.ISerializeBytes.SerializeEncode``1(``0,System.String)">
            <summary>
            序列化后DES加密
            </summary>
            <param name="o">对像</param>
            <param name="key">加密KEY</param>
            <returns>密文</returns>
        </member>
        <member name="M:Pub.Class.ISerializeBytes.DecodeDeserialize``1(System.Byte[],System.String)">
            <summary>
            DES解密后反序列化成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="data">密文</param>
            <param name="key">解密KEY</param>
            <returns>对像</returns>
        </member>
        <member name="T:Pub.Class.SqlitePagerSQL">
            <summary>
            Sqlite分页  支持Sqlite
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            PagerSql pagerSql = new SqlitePagerSQL().GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email");
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.SqlitePagerSQL.GetSQL(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            分页SQL调用方法
            </summary>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="tableName">表名称</param>
            <param name="pk">主键</param>
            <param name="fieldList">字段列表</param>
            <param name="where">where条件 and or 开始</param>
            <param name="groupBy">分组条件</param>
            <param name="orderBy">排序条件</param>
            <returns>分页SQL</returns>
        </member>
        <member name="T:Pub.Class.NotInPagerSQL">
            <summary>
            使用Not In 分页  支持ACCESS MSSQL2000+
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            PagerSql pagerSql = new NotInPagerSQL().GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email");
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.NotInPagerSQL.GetSQL(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            分页SQL调用方法
            </summary>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="tableName">表名称</param>
            <param name="pk">主键</param>
            <param name="fieldList">字段列表</param>
            <param name="where">where条件 and or 开始</param>
            <param name="groupBy">分组条件</param>
            <param name="orderBy">排序条件</param>
            <returns>分页SQL</returns>
        </member>
        <member name="T:Pub.Class.IDecompress">
            <summary>
            解压缩文件
            
            修改纪录
                2011.07.11 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.IDecompress.File(System.String,System.String,System.String)">
            <summary>
            解压缩文件
            </summary>
            <param name="zipPath">ZIP文件</param>
            <param name="directory">解压到目录</param>
            <param name="password">密码</param>
        </member>
        <member name="T:Pub.Class.Decompress">
            <summary>
            解压缩文件
            
            修改纪录
                2011.07.11 版本：1.0 livexy 创建此类
            
            <example>
            <code>
                    new Decompress("Pub.Class.SharpZip.dll", "Pub.Class.SharpZip.Decompress")
                        .File("~/web.config.zip".GetMapPath(), "~/back/".GetMapPath())
                        .Dispose();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.Decompress.#ctor(System.String,System.String)">
            <summary>
            构造器 指定DLL文件和全类名
            </summary>
            <param name="dllFileName">dll文件名</param>
            <param name="className">命名空间.类名</param>
        </member>
        <member name="M:Pub.Class.Decompress.#ctor(System.String)">
            <summary>
            构造器 指定classNameDllName(DecompressProviderName) 默认Pub.Class.SharpZip.Decompress,Pub.Class.SharpZip
            </summary>
            <param name="classNameAndAssembly">命名空间.类名,程序集名称</param>
        </member>
        <member name="M:Pub.Class.Decompress.#ctor">
            <summary>
            构造器 从Web.config中读DecompressProviderName 默认Pub.Class.SharpZip.Decompress,Pub.Class.SharpZip
            </summary>
        </member>
        <member name="M:Pub.Class.Decompress.File(System.String,System.String,System.String)">
            <summary>
            解压缩文件
            </summary>
            <param name="zipPath">ZIP文件</param>
            <param name="directory">解压到目录</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Pub.Class.Decompress.File(System.String,System.String)">
            <summary>
            解压缩文件
            </summary>
            <param name="zipPath">ZIP文件</param>
            <param name="directory">解压到目录</param>
        </member>
        <member name="M:Pub.Class.Decompress.InternalDispose">
            <summary>
            用using 自动释放
            </summary>
        </member>
        <member name="T:Pub.Class.Operator">
            <summary>
            运算符号
            
            修改纪录
                2011.07.10 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.Like">
            <summary>
            Like 模糊查询
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.Equal">
            <summary>
            ＝ is equal to 等于号 
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.NotEqual">
            <summary>
            &lt;> (≠) is not equal to 不等于号
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.MoreThan">
            <summary>
            ＞ is more than 大于号
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.LessThan">
            <summary>
            ＜ is less than 小于号 
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.MoreThanOrEqual">
            <summary>
            ≥ is more than or equal to 大于或等于号 
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.LessThanOrEqual">
            <summary>
            ≤ is less than or equal to 小于或等于号
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.Between">
            <summary>
            在某个值的中间，拆成两个符号 >= 和 &lt;=
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.In">
            <summary>
            在某个字符串值中
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.And">
            <summary>
            And操作
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.Or">
            <summary>
            Or操作
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.Field">
            <summary>
            值为字段
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.Is">
            <summary>
            is null
            </summary>
        </member>
        <member name="F:Pub.Class.Operator.IsNot">
            <summary>
            is not null
            </summary>
        </member>
        <member name="T:Pub.Class.SearchInfo">
            <summary>
            查询信息实体类
            
            修改纪录
                2011.07.10 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.SearchInfo.#ctor">
            <summary>
            查询信息实体类
            </summary>
        </member>
        <member name="M:Pub.Class.SearchInfo.#ctor(Pub.Class.Operator,System.String,System.Object,Pub.Class.Operator,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="andor">字段的and/or操作符号</param>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="type">是否有开始和结束括号</param>
        </member>
        <member name="M:Pub.Class.SearchInfo.#ctor(Pub.Class.Operator,System.String,System.Object,Pub.Class.Operator,System.Int32,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="andor">字段的and/or操作符号</param>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <param name="type">是否有开始和结束括号</param>
        </member>
        <member name="P:Pub.Class.SearchInfo.AndOr">
            <summary>
            字段的and/or操作符号
            </summary>
        </member>
        <member name="P:Pub.Class.SearchInfo.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:Pub.Class.SearchInfo.FieldValue">
            <summary>
            字段的值
            </summary>
        </member>
        <member name="P:Pub.Class.SearchInfo.Operator">
            <summary>
            字段的操作符号
            </summary>
        </member>
        <member name="P:Pub.Class.SearchInfo.Where">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:Pub.Class.SearchInfo.Type">
            <summary>
            类型 0没有开始和结束 1开始 2结束
            </summary>
        </member>
        <member name="T:Pub.Class.Where">
            <summary>
            Where操作
            
            修改纪录
                2011.07.10 版本：1.0 livexy 创建此类
            
            <code>
            <example>
                string where = new Where()
                    .And("UserName", "test1001", Operator.Equal)
                    .AndBegin("MemberID", 1000, Operator.LessThan)
                    .And("Score", 90, Operator.MoreThan)
                    .And("Account", "test%", Operator.Like)
                    .AndEnd("Status", "(1,2)", Operator.In)
                    .And("CreateTime", "'2011-01-01' and '2011-12-12'", Operator.Between)
                    .And("LastLoginTime", "2011-01-01", Operator.MoreThanOrEqual)
                    .And("LastLoginTime", "2011-12-12", Operator.LessThanOrEqual)
                    .And("UserName", "", Operator.Equal, true)
                    .Or("MemberID", 999, Operator.NotEqual)
                    .ToSql().TrimStart(3);
                Msg.WriteEnd(where);
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.Where.And(System.String,System.Object,Pub.Class.Operator)">
            <summary>
            And操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.AndP(System.String,System.Object,Pub.Class.Operator)">
            <summary>
            And操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.AndBegin(System.String,System.Object,Pub.Class.Operator)">
            <summary>
            And操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.AndBeginP(System.String,System.Object,Pub.Class.Operator)">
            <summary>
            And操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.AndEnd(System.String,System.Object,Pub.Class.Operator)">
            <summary>
            And操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.AndEndP(System.String,System.Object,Pub.Class.Operator)">
            <summary>
            And操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.Or(System.String,System.Object,Pub.Class.Operator)">
            <summary>
            Or操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.OrP(System.String,System.Object,Pub.Class.Operator)">
            <summary>
            Or操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.OrBegin(System.String,System.Object,Pub.Class.Operator)">
            <summary>
            Or操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.OrBeginP(System.String,System.Object,Pub.Class.Operator)">
            <summary>
            Or操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.OrEnd(System.String,System.Object,Pub.Class.Operator)">
            <summary>
            Or操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.OrEndP(System.String,System.Object,Pub.Class.Operator)">
            <summary>
            Or操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.And(System.String,System.Object,Pub.Class.Operator,System.Boolean)">
            <summary>
            And操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.AndP(System.String,System.Object,Pub.Class.Operator,System.Boolean)">
            <summary>
            And操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.AndBegin(System.String,System.Object,Pub.Class.Operator,System.Boolean)">
            <summary>
            And操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.AndBeginP(System.String,System.Object,Pub.Class.Operator,System.Boolean)">
            <summary>
            And操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.AndEnd(System.String,System.Object,Pub.Class.Operator,System.Boolean)">
            <summary>
            And操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.AndEndP(System.String,System.Object,Pub.Class.Operator,System.Boolean)">
            <summary>
            And操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.Or(System.String,System.Object,Pub.Class.Operator,System.Boolean)">
            <summary>
            Or操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.OrP(System.String,System.Object,Pub.Class.Operator,System.Boolean)">
            <summary>
            Or操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.OrBegin(System.String,System.Object,Pub.Class.Operator,System.Boolean)">
            <summary>
            Or操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.OrBeginP(System.String,System.Object,Pub.Class.Operator,System.Boolean)">
            <summary>
            Or操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.OrEnd(System.String,System.Object,Pub.Class.Operator,System.Boolean)">
            <summary>
            Or操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.OrEndP(System.String,System.Object,Pub.Class.Operator,System.Boolean)">
            <summary>
            Or操作
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="fieldValue">字段的值</param>
            <param name="oper">字段的操作符号</param>
            <param name="where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Where.ToSql">
            <summary>
            转换为SQL字符串
            </summary>
            <returns>SQL字符串</returns>
        </member>
        <member name="M:Pub.Class.Where.ToParameters(System.String)">
            <summary>
            转换为SQL字符串
            </summary>
            <returns>SQL字符串</returns>
        </member>
        <member name="M:Pub.Class.Where.ToString">
            <summary>
            转换为SQL字符串
            </summary>
            <returns>SQL字符串</returns>
        </member>
        <member name="M:Pub.Class.Where.OperatorToStr(Pub.Class.Operator)">
            <summary>
            转换枚举类型为对应的语句操作符号
            </summary>
            <param name="oper">SqlOperator枚举对象</param>
            <returns><![CDATA[对应的Sql语句操作符号（如 ">" "<>" ">=")]]></returns>
        </member>
        <member name="M:Pub.Class.Where.ValueToStr(System.Object)">
            <summary>
            值转换为可用的字符或数字
            </summary>
            <param name="value">要转换的值</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.RegistryEnum">
            <summary>
            注册表根键枚举
            
            修改纪录
                2012.01.06 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="F:Pub.Class.RegistryEnum.LocalMachine">
            <summary>
            LocalMachine HKEY_LOCAL_MACHINE
            </summary>
        </member>
        <member name="F:Pub.Class.RegistryEnum.ClassesRoot">
            <summary>
            ClassesRoot HKEY_CLASSES_ROOT
            </summary>
        </member>
        <member name="F:Pub.Class.RegistryEnum.CurrentConfig">
            <summary>
            CurrentConfig HKEY_CURRENT_CONFIG
            </summary>
        </member>
        <member name="F:Pub.Class.RegistryEnum.CurrentUser">
            <summary>
            CurrentUser HKEY_CURRENT_USER
            </summary>
        </member>
        <member name="F:Pub.Class.RegistryEnum.DynData">
            <summary>
            DynData
            </summary>
        </member>
        <member name="F:Pub.Class.RegistryEnum.PerformanceData">
            <summary>
            PerformanceData
            </summary>
        </member>
        <member name="F:Pub.Class.RegistryEnum.Users">
            <summary>
            Users HKEY_USERS
            </summary>
        </member>
        <member name="T:Pub.Class.Registry2">
            <summary>
            注册表操作
            
            修改纪录
                2012.01.06 版本：1.1 livexy 修改加入RegistryEnum
                2007.04.29 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            string path = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
            string key = "ToSwfFlv";
            Msg.Write(Registry2.Exists(path, "360Disabled"));
            string str = Registry2.Read(path, key).ToStr();
            if (str.IsNullEmpty()) Registry2.Write(path, key, "ToSwfFlv.exe");
            Msg.Write(str);
            Registry2.Delete(path, key);
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.Registry2.Read(Pub.Class.RegistryEnum,System.String,System.String)">
            <summary>
            读注册表
            </summary>
            <param name="registryEnum">注册表根键枚举</param>
            <param name="path">路径</param>
            <param name="valueName">key</param>
            <returns>值</returns>
        </member>
        <member name="M:Pub.Class.Registry2.Read(System.String,System.String)">
            <summary>
            读注册表
            </summary>
            <param name="path">路径</param>
            <param name="valueName">key</param>
            <returns>值</returns>
        </member>
        <member name="M:Pub.Class.Registry2.Write(Pub.Class.RegistryEnum,System.String,System.String,System.Object)">
            <summary>
            写注册表
            </summary>
            <param name="registryEnum">注册表根键枚举</param>
            <param name="path">路径</param>
            <param name="valueName">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.Registry2.Write(System.String,System.String,System.Object)">
            <summary>
            写注册表 Registry.LocalMachine HKEY_LOCAL_MACHINE 
            </summary>
            <param name="path">路径</param>
            <param name="valueName">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.Registry2.Delete(Pub.Class.RegistryEnum,System.String,System.String)">
            <summary>
            删除注册表
            </summary>
            <param name="registryEnum">注册表根键枚举</param>
            <param name="path">路径</param>
            <param name="valueName">key</param>
        </member>
        <member name="M:Pub.Class.Registry2.Delete(System.String,System.String)">
            <summary>
            删除注册表
            </summary>
            <param name="path">路径</param>
            <param name="valueName">key</param>
        </member>
        <member name="M:Pub.Class.Registry2.Exists(Pub.Class.RegistryEnum,System.String,System.String)">
            <summary>
            判断一个注册表项是否存在
            </summary>
            <param name="registryEnum">注册表根键枚举</param>
            <param name="path">注册表子项</param>
            <param name="key">键</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Pub.Class.Registry2.Exists(System.String,System.String)">
            <summary>
            判断一个注册表项是否存在 Registry.LocalMachine HKEY_LOCAL_MACHINE
            </summary>
            <param name="path">注册表子项</param>
            <param name="key">键</param>
            <returns>是否存在</returns>
        </member>
        <member name="T:Pub.Class.Database">
            <summary>
            数据库访问类
            
            修改纪录
                2010.08.01 版本：1.0 livexy 创建此类
            
            </summary>
            <example>
            <code>
            事务操作：
            Database db = new Database("dbkey");
            SqlConnection conn = new SqlConnection(db.ConnectionString);
            conn.Open();
            using (SqlTransaction trans = conn.BeginTransaction()) {
                try {
                    db.ExecuteNonQuery(trans,);
                    db.ExecuteNonQuery(trans,);
                    trans.Commit();
                } catch (Exception ex) {
                    trans.Rollback();
                    throw ex;
                }
            }
            conn.Close();
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.Database.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="pool">连接名称</param>
        </member>
        <member name="M:Pub.Class.Database.#ctor(System.String,System.String,System.String)">
            <summary>
            构造器
            </summary>
            <param name="dbType">数据库类型 SqlServer、Access、MySql、OleDb、Odbc、Oracle、SQLite</param>
            <param name="connString">连接字符串</param>
            <param name="pool">连接名称</param>
        </member>
        <member name="F:Pub.Class.Database.connString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="F:Pub.Class.Database.key">
            <summary>
            连接池
            </summary>
        </member>
        <member name="F:Pub.Class.Database.dbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:Pub.Class.Database.factory">
            <summary>
            DbProviderFactory实例
            </summary>
        </member>
        <member name="F:Pub.Class.Database.provider">
            <summary>
            数据接口
            </summary>
        </member>
        <member name="F:Pub.Class.Database.queryCount">
            <summary>
            查询次数统计
            </summary>
        </member>
        <member name="F:Pub.Class.Database.paramCache">
            <summary>
            Parameters缓存哈希表
            </summary>
        </member>
        <member name="M:Pub.Class.Database.ResetDbProvider">
            <summary>
            刷新数据库提供者
            </summary>
        </member>
        <member name="M:Pub.Class.Database.AttachParameters(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            将DbParameter参数数组(参数值)分配给DbCommand命令.
            这个方法将给任何一个参数分配DBNull.Value;
            该操作将阻止默认值的使用.
            </summary>
            <param name="command">命令名</param>
            <param name="commandParameters">DbParameters数组</param>
        </member>
        <member name="M:Pub.Class.Database.AssignParameterValues(System.Data.Common.DbParameter[],System.Data.DataRow)">
            <summary>
            将DataRow类型的列值分配到DbParameter参数数组.
            </summary>
            <param name="commandParameters">要分配值的DbParameter参数数组</param>
            <param name="dataRow">将要分配给存储过程参数的DataRow</param>
        </member>
        <member name="M:Pub.Class.Database.AssignParameterValues(System.Data.Common.DbParameter[],System.Object[])">
            <summary>
            将一个对象数组分配给DbParameter参数数组.
            </summary>
            <param name="commandParameters">要分配值的DbParameter参数数组</param>
            <param name="parameterValues">将要分配给存储过程参数的对象数组</param>
        </member>
        <member name="M:Pub.Class.Database.PrepareCommand(System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Boolean@)">
            <summary>
            预处理用户提供的命令,数据库连接/事务/命令类型/参数
            </summary>
            <param name="command">要处理的DbCommand</param>
            <param name="connection">数据库连接</param>
            <param name="transaction">一个有效的事务或者是null值</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名或都SQL命令文本</param>
            <param name="commandParameters">和命令相关联的DbParameter参数数组,如果没有参数为'null'</param>
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param>
        </member>
        <member name="M:Pub.Class.Database.DiscoverSpParameterSet(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            探索运行时的存储过程,返回DbParameter参数数组.
            初始化参数值为 DBNull.Value.
            </summary>
            <param name="connection">一个有效的数据库连接</param>
            <param name="spName">存储过程名称</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回DbParameter参数数组</returns>
        </member>
        <member name="M:Pub.Class.Database.CloneParameters(System.Data.Common.DbParameter[])">
            <summary>
            DbParameter参数数组的深层拷贝.
            </summary>
            <param name="originalParameters">原始参数数组</param>
            <returns>返回一个同样的参数数组</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.String)">
            <summary>
            执行指定连接字符串,类型的DbCommand.
            </summary>
            <remarks>
            示例:  
             int result = ExecSql("SELECT * FROM [tableName]");
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定连接字符串,类型的DbCommand.
            </summary>
            <remarks>
            示例:  
             int result = ExecSql("PublishOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Int32@,System.String)">
            <summary>
            执行指定连接字符串,类型的DbCommand.
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(out id,"SELECT * FROM [tableName]");
            </remarks>
            <param name="id">返回自增ID</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Data.CommandType,System.String)">
            <summary>
            执行指定连接字符串,类型的DbCommand.
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定连接字符串,类型的DbCommand.
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(CommandType.StoredProcedure, "PublishOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Int32@,System.Data.CommandType,System.String)">
            <summary>
            执行指定连接字符串,并返回刚插入的自增ID
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(out id, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="id">返回自增ID</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Int32@,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定连接字符串并返回刚插入的自增ID,类型的DbCommand.
            </summary>
            <param name="id">返回自增ID</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令 
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接对象的命令
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(conn, CommandType.StoredProcedure, "PublishOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">T存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Int32@,System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令并返回自增ID 
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="id">id</param>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Int32@,System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接对象的命令
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(conn, CommandType.StoredProcedure, "PublishOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="id">id</param>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">T存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:  
             int result = ExecSql(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:  
             int result = ExecSql("PublishOrders", 24, 36);
            </remarks>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行带事务的DbCommand.
            </summary>
            <remarks>
            示例.:  
             int result = ExecSql(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行带事务的DbCommand(指定参数).
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(trans, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Int32@,System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行带事务的DbCommand.
            </summary>
            <remarks>
            示例.:  
             int result = ExecSql(out id,trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="id">返回自增ID</param>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Int32@,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行带事务的DbCommand(指定参数).
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(out id,trans, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="id">返回自增ID</param>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSql(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            执行带事务的DbCommand(指定参数值).
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:  
             int result = ExecSql(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.Connection``1(System.Func{System.Data.Common.DbConnection,Pub.Class.Database,``0},System.Action{System.Exception})">
            <summary>
            使用一个数据库链接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exec"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Database.ExecTran``1(System.Func{System.Data.Common.DbTransaction,``0},System.Action{System.Exception})">
            <summary>
            执行事务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exec"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Database.ExecTran``1(System.Func{Pub.Class.Database,System.Data.Common.DbTransaction,``0},System.Action{System.Exception})">
            <summary>
            执行事务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exec"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Database.ExecTran``1(System.Func{System.Data.Common.DbConnection,Pub.Class.Database,System.Data.Common.DbTransaction,``0},System.Action{System.Exception})">
            <summary>
            执行事务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exec"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Database.ExecuteCommandWithSplitter(System.String,System.String)">
            <summary>
            运行含有GO命令的多条SQL命令
            </summary>
            <param name="commandText">SQL命令字符串</param>
            <param name="splitter">分割字符串</param>
        </member>
        <member name="M:Pub.Class.Database.ExecuteCommandWithSplitter(System.String)">
            <summary>
            运行含有GO命令的多条SQL命令
            </summary>
            <param name="commandText">SQL命令字符串</param>
        </member>
        <member name="M:Pub.Class.Database.GetDataSet(System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet("SELECT * FROM [table1]");
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSet(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet("SELECT * FROM [table1]", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSet(System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet(CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例: 
             DataSet ds = GetDataSet(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSet(System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值.
            示例: 
             DataSet ds = GetDataSet("GetOrders", 24, 36);
            </remarks>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet(conn, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSet(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.:  
             DataSet ds = GetDataSet(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定事务的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定事务的命令,指定参数,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet(trans, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSet(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            执行指定事务的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.:  
             DataSet ds = GetDataSet(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">事务</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTable(System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataTable("SELECT * FROM [table1]");
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataTable("SELECT * FROM [table1]", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTable(System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataTable(CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例: 
             DataTable dt = GetDataTable(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTable(System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值.
            示例: 
             DataTable dt = GetDataSet("GetOrders", 24, 36);
            </remarks>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTable(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataSet(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTable(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataSet(conn, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTable(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.:  
             DataTable dt = GetDataTable(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTable(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定事务的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataSet(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTable(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定事务的命令,指定参数,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataSet(trans, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTable(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            执行指定事务的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.:  
             DataTable dt = GetDataTable(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">事务</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReader(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[],Pub.Class.Database.DbConnectionOwnership)">
            <summary>
            执行指定数据库连接对象的数据阅读器.
            </summary>
            <remarks>
            如果是BaseDbHelper打开连接,当连接关闭DataReader也将关闭.
            如果是调用都打开连接,DataReader由调用都管理.
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="transaction">一个有效的事务,或者为 'null'</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameters参数数组,如果没有参数则为'null'</param>
            <param name="connectionOwnership">标识数据库连接对象是由调用者提供还是由BaseDbHelper提供</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReader(System.String)">
            <summary>
            执行指定数据库连接字符串的数据阅读器.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader("GetOrders");
            </remarks>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReader(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader("GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组(new DbParameter("@prodid", 24))</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReader(System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的数据阅读器.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader(CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组(new DbParameter("@prodid", 24))</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReader(System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例:  
             DbDataReader dr = GetDbDataReader("GetOrders", 24, 36);
            </remarks>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReader(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的数据阅读器.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReader(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader(conn, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReader(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例:  
             DbDataReader dr = GetDbDataReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">T存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:  
              DbDataReader dr = GetDbDataReader(trans, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReader(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             DbDataReader dr = GetDbDataReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalar(System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar("GetOrderCount");
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(CommandType.StoredProcedure, "GetOrderCount", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalar(System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(CommandType.StoredProcedure, "GetOrderCount", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalar(System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数值,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             int orderCount = (int)GetScalar("GetOrderCount", 24, 36);
            </remarks>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalar(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalar(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalar(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数值,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             int orderCount = (int)GetScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库事务的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库事务的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new DbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalar(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            执行指定数据库事务的命令,指定参数值,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             int orderCount = (int)GetScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.FillDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例:  
             FillDataSet(CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)</param>
        </member>
        <member name="M:Pub.Class.Database.FillDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.指定命令参数.
            </summary>
            <remarks>
            示例:  
             FillDataSet(CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:Pub.Class.Database.FillDataSet(System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             FillDataSet(CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>    
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:Pub.Class.Database.FillDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例:  
             FillDataSet(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>    
        </member>
        <member name="M:Pub.Class.Database.FillDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定参数.
            </summary>
            <remarks>
            示例:  
             FillDataSet(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
        </member>
        <member name="M:Pub.Class.Database.FillDataSet(System.Data.Common.DbConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             FillDataSet(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:Pub.Class.Database.FillDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例:  
             FillDataSet(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:Pub.Class.Database.FillDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集,指定参数.
            </summary>
            <remarks>
            示例:  
             FillDataSet(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new DbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
        </member>
        <member name="M:Pub.Class.Database.FillDataSet(System.Data.Common.DbTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             FillDataSet(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:Pub.Class.Database.FillDataSet(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            [私有方法][内部调用]执行指定数据库连接对象/事务的命令,映射数据表并填充数据集,DataSet/TableNames/DbParameters.
            </summary>
            <remarks>
            示例:  
             FillDataSet(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
        </member>
        <member name="M:Pub.Class.Database.UpdateDataSet(System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.DataSet,System.String)">
            <summary>
            执行数据集更新到数据库,指定inserted, updated, or deleted命令.
            </summary>
            <remarks>
            示例:  
             UpdateDataSet(insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">[追加记录]一个有效的SQL语句或存储过程</param>
            <param name="deleteCommand">[删除记录]一个有效的SQL语句或存储过程</param>
            <param name="updateCommand">[更新记录]一个有效的SQL语句或存储过程</param>
            <param name="dataSet">要更新到数据库的DataSet</param>
            <param name="tableName">要更新到数据库的DataTable</param>
        </member>
        <member name="M:Pub.Class.Database.CreateCommand(System.Data.Common.DbConnection,System.String,System.String[])">
            <summary>
            创建DbCommand命令,指定数据库连接对象,存储过程名和参数.
            </summary>
            <remarks>
            示例:  
             DbCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="sourceColumns">源表的列名称数组</param>
            <returns>返回DbCommand命令</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSqlTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSqlTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.ExecSqlTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSetTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSetTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataSetTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTableTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataTable.</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTableTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataTable.</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDataTableTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataTable.</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReaderTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReaderTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetDbDataReaderTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalarTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalarTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalarTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Database.CacheParameterSet(System.String,System.Data.Common.DbParameter[])">
            <summary>
            追加参数数组到缓存.
            </summary>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">要缓存的参数数组</param>
        </member>
        <member name="M:Pub.Class.Database.GetCachedParameterSet(System.String)">
            <summary>
            从缓存中获取参数数组.
            </summary>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>参数数组</returns>
        </member>
        <member name="M:Pub.Class.Database.GetSpParameterSet(System.String)">
            <summary>
            返回指定的存储过程的参数集
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="spName">存储过程名</param>
            <returns>返回DbParameter参数数组</returns>
        </member>
        <member name="M:Pub.Class.Database.GetSpParameterSet(System.String,System.Boolean)">
            <summary>
            返回指定的存储过程的参数集
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回DbParameter参数数组</returns>
        </member>
        <member name="M:Pub.Class.Database.GetSpParameterSet(System.Data.Common.DbConnection,System.String)">
            <summary>
            [内部]返回指定的存储过程的参数集(使用连接对象).
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="connection">一个有效的数据库连接字符</param>
            <param name="spName">存储过程名</param>
            <returns>返回DbParameter参数数组</returns>
        </member>
        <member name="M:Pub.Class.Database.GetSpParameterSet(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            [内部]返回指定的存储过程的参数集(使用连接对象)
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">
            是否包含返回值参数
            </param>
            <returns>返回DbParameter参数数组</returns>
        </member>
        <member name="M:Pub.Class.Database.GetSpParameterSetInternal(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            [私有]返回指定的存储过程的参数集(使用连接对象)
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回DbParameter参数数组</returns>
        </member>
        <member name="M:Pub.Class.Database.MakeInParam(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            输入参数
            </summary>
            <param name="ParamName">参数名</param>
            <param name="DbType">参数类型</param>
            <param name="Size">参数大小</param>
            <param name="Value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Database.MakeOutParam(System.String,System.Data.DbType,System.Int32)">
            <summary>
            输出参数
            </summary>
            <param name="ParamName">参数名</param>
            <param name="DbType">参数类型</param>
            <param name="Size">参数大小</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Database.MakeParam(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            参数
            </summary>
            <param name="ParamName">参数名</param>
            <param name="DbType">参数类型</param>
            <param name="Size">参数大小</param>
            <param name="Direction">输入/输出</param>
            <param name="Value">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalarToStr(System.Data.CommandType,System.String)">
            <summary>
            取第一行第一列数据
            </summary>
            <param name="commandType">commandType</param>
            <param name="commandText">SQL</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Database.GetScalarToStr(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            取第一行第一列数据
            </summary>
            <param name="commandType">commandType</param>
            <param name="commandText">SQL</param>
            <param name="commandParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Database.GetIdentifierStart">
            <summary>
            起始字符
            </summary>
        </member>
        <member name="M:Pub.Class.Database.GetIdentifierEnd">
            <summary>
            结束字符
            </summary>
        </member>
        <member name="M:Pub.Class.Database.GetParamIdentifier">
            <summary>
            参数前导符号
            </summary>
        </member>
        <member name="M:Pub.Class.Database.DataBulkCopy(System.Data.DataTable,Pub.Class.BulkCopyOptions,System.Boolean,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            SqlServer大数据复制
            </summary>
            <param name="dt">数据源 dt.TableName一定要和数据库表名对应</param>
            <param name="dbkey">数据库</param>
            <param name="sqlOptions">选项 默认Default</param>
            <param name="isTran">是否使用事务 默认false</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Database.DataBulkCopy(System.Data.DataTable,System.Action{System.Exception},Pub.Class.BulkCopyOptions,System.Boolean,System.Int32,System.Int32)">
            <summary>
            SqlServer大数据复制
            </summary>
            <param name="dt">数据源 dt.TableName一定要和数据库表名对应</param>
            <param name="dbkey">数据库</param>
            <param name="options">选项 默认Default</param>
            <param name="isTran">是否使用事务 默认false</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Database.DataBulkCopy(System.Data.DataTable,System.Boolean,Pub.Class.BulkCopyOptions,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            SqlServer大数据复制
            </summary>
            <param name="dt">数据源 dt.TableName一定要和数据库表名对应</param>
            <param name="dbkey">数据库</param>
            <param name="options">选项 默认Default</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <param name="isTran">使用事务</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Database.DataBulkCopy(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.DataTable,Pub.Class.BulkCopyOptions,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            大数据复制
            </summary>
            <param name="conn">连接源</param>
            <param name="tran">事务</param>
            <param name="dt">数据源 dt.TableName一定要和数据库表名对应</param>
            <param name="options">选项 默认Default</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Database.DataBulkCopy(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.DataTable,System.Action{System.Exception},Pub.Class.BulkCopyOptions,System.Int32,System.Int32)">
            <summary>
            大数据复制
            </summary>
            <param name="conn">连接源</param>
            <param name="tran">事务</param>
            <param name="dt">数据源 dt.TableName一定要和数据库表名对应</param>
            <param name="options">选项 默认Default</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Database.DataBulkCopy(System.Data.IDataReader,System.String,Pub.Class.BulkCopyOptions,System.Boolean,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            SqlServer大数据复制
            </summary>
            <param name="dr">数据源</param>
            <param name="tableName">对应的表名</param>
            <param name="dbkey">数据库</param>
            <param name="options">选项 默认Default</param>
            <param name="isTran">是否使用事务 默认false</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Database.DataBulkCopy(System.Data.IDataReader,System.String,System.Action{System.Exception},Pub.Class.BulkCopyOptions,System.Boolean,System.Int32,System.Int32)">
            <summary>
            SqlServer大数据复制
            </summary>
            <param name="dr">数据源</param>
            <param name="tableName">对应的表名</param>
            <param name="dbkey">数据库</param>
            <param name="options">选项 默认Default</param>
            <param name="isTran">是否使用事务 默认false</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Database.DataBulkCopy(System.Data.IDataReader,System.String,System.Boolean,Pub.Class.BulkCopyOptions,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            SqlServer大数据复制
            </summary>
            <param name="dr">数据源</param>
            <param name="tableName">对应的表名</param>
            <param name="dbkey">数据库</param>
            <param name="options">选项 默认Default</param>
            <param name="isTran">是否使用事务 默认false</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns>true/false</returns>
        </member>
        <member name="P:Pub.Class.Database.QueryCount">
            <summary>
            查询次数统计
            </summary>
        </member>
        <member name="P:Pub.Class.Database.ConnString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Pub.Class.Database.Pool">
            <summary>
            连接池
            </summary>
        </member>
        <member name="P:Pub.Class.Database.DBType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Pub.Class.Database.Provider">
            <summary>
            IDbProvider接口
            </summary>
        </member>
        <member name="P:Pub.Class.Database.Factory">
            <summary>
            DbFactory实例
            </summary>
        </member>
        <member name="T:Pub.Class.Database.DbConnectionOwnership">
            <summary>
            枚举,标识数据库连接是由BaseDbHelper提供还是由调用者提供
            </summary>
        </member>
        <member name="F:Pub.Class.Database.DbConnectionOwnership.Internal">
            <summary>由BaseDbHelper提供连接</summary>
        </member>
        <member name="F:Pub.Class.Database.DbConnectionOwnership.External">
            <summary>由调用者提供连接</summary>
        </member>
        <member name="T:Pub.Class.SimpleLog">
            <summary>
            日志管理类
            
            修改纪录
                2006.05.03 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.SimpleLog.Write(System.String,System.Text.Encoding)">
            <summary>
            写日志
            </summary>
            <param name="msg">消息</param>
            <param name="encoding">编码</param>
            <returns>true/false</returns>
        </member>
        <member name="T:Pub.Class.WebServiceHelper">
            <summary>
            WebService操作类
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
                Hashtable pas = new Hashtable(); pas["i"] = 100;
                new WebServiceHelper(WebServiceEnum.get).Call("http://www.test.com/default.asmx", "WebService", "test2", pas)
                new WebServiceHelper(WebServiceEnum.post).Call("http://www.test.com/default.asmx", "WebService", "test2", pas)
                new WebServiceHelper(WebServiceEnum.soap).Call("http://www.test.com/default.asmx", "WebService", "test2", pas)
                new WebServiceHelper(WebServiceEnum.dynamic).Call("http://www.test.com/default.asmx", "WebService", "test2", pas)
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.WebServiceHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="WebServiceEnum">WebService 调用类型 Enum string</param>
        </member>
        <member name="M:Pub.Class.WebServiceHelper.#ctor(Pub.Class.WebServiceEnum)">
            <summary>
            构造函数
            </summary>
            <param name="WebServiceEnum">WebService 调用类型 Enum</param>
        </member>
        <member name="M:Pub.Class.WebServiceHelper.init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Pub.Class.WebServiceHelper.InternalDispose">
            <summary>
            用using 自动释放
            </summary>
        </member>
        <member name="M:Pub.Class.WebServiceHelper.Call(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            WebService调用方法
            </summary>
            <param name="url">WebService 接口地址</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:Pub.Class.WebServiceHelper.Call(System.String,System.String,System.String,System.Collections.Generic.IList{Pub.Class.UrlParameter})">
            <summary>
            WebService调用方法
            </summary>
            <param name="url">WebService 接口地址</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns>返回字符串</returns>
        </member>
        <member name="T:Pub.Class.ICollectionExtensions">
            <summary>
            ICollection扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.ICollectionExtensions.IsNullEmpty(System.Collections.ICollection)">
            <summary>
            IsNullEmpty
            </summary>
            <param name="self">ICollection扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            添加项
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">IList列表</param>
            <param name="item">值</param>
            <returns>IList列表</returns>
        </member>
        <member name="M:Pub.Class.ICollectionExtensions.AddUnique``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            添加唯一项
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">IList列表</param>
            <param name="item">值</param>
            <returns>IList列表</returns>
        </member>
        <member name="M:Pub.Class.ICollectionExtensions.AddUnique``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加唯一项 
            </summary>
            <example>
            <code>
            IList&lt;string> list2 = new List&lt;string>(); 
            list2.AddUnique&lt;string>("test1"); 
            list.AddUnique&lt;string>(list2);
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="collection">ICollection扩展</param>
            <param name="values">值</param>
            <returns>true/false</returns>
        </member>
        <member name="T:Pub.Class.DoubleExtensions">
            <summary>
            double扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.PercentageOf(System.Double,System.Int32)">
            <summary>
            百分率
            </summary>
            <param name="number"></param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.PercentageOf(System.Double,System.Single)">
            <summary>
            百分率
            </summary>
            <param name="number"></param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.PercentageOf(System.Double,System.Double)">
            <summary>
            百分率
            </summary>
            <param name="number"></param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.PercentageOf(System.Double,System.Int64)">
            <summary>
            百分率
            </summary>
            <param name="number"></param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.PercentOf(System.Double,System.Int32)">
            <summary>
            百分之
            </summary>
            <param name="position"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.PercentOf(System.Double,System.Single)">
            <summary>
            百分之
            </summary>
            <param name="position"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.PercentOf(System.Double,System.Double)">
            <summary>
            百分之
            </summary>
            <param name="position"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.PercentOf(System.Double,System.Int64)">
            <summary>
            百分之
            </summary>
            <param name="position"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.Round(System.Double,System.Int32)">
            <summary>
            保留decimalPoints位小数
            </summary>
            <param name="val">值</param>
            <param name="decimalPoints">小数位数</param>
            <returns>保留decimalPoints位小数</returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.Round2(System.Double)">
            <summary>
            保留2位小数
            </summary>
            <param name="val">值</param>
            <returns>保留2位小数</returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.Round(System.Double)">
            <summary>
            保留2位小数
            </summary>
            <param name="value">值</param>
            <returns>保留2位小数</returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.ToCurrency(System.Double)">
            <summary>
            金额 三位,分割
            </summary>
            <param name="value">值</param>
            <returns>金额 三位,分割</returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.ToRMB(System.Double)">
            <summary>
            人民币转大写
            </summary>
            <param name="value">人民币</param>
            <returns>大写人民币</returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.IfEqual(System.Double,System.Double,System.Double)">
            <summary>
            如果等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.IfNotEqual(System.Double,System.Double,System.Double)">
            <summary>
            如果不等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.IfMoreThan(System.Double,System.Double,System.Double)">
            <summary>
            如果大于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.IfLessThan(System.Double,System.Double,System.Double)">
            <summary>
            如果小于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.IfMoreThanOrEqual(System.Double,System.Double,System.Double)">
            <summary>
            如果大于等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DoubleExtensions.IfLessThanOrEqual(System.Double,System.Double,System.Double)">
            <summary>
            如果小于等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.Parameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Pub.Class.Parameters.CommandText">
            <summary>
            SQL代码
            </summary>
        </member>
        <member name="P:Pub.Class.Parameters.ParameterList">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="T:Pub.Class.SQL">
            <summary>
            动态生成SQL语句
            
            修改纪录
                2011.11.17 版本：1.1 livexy 添加允许插入null和允许修改null数据
                2011.10.29 版本：1.0 livexy 创建此类
            
            <code>
            <example>
                string strSql = new SQL()
                    .Select("MemberID", "RealName", "CustomerName")
                    .Top(1)
                    .Distinct()
                    .From("UC_Member as a")
                    .InnerJoin("EC_Customer as b").On("a.CustomerID", "=", "b.CustomerID")
                    .Where("MemberID=1")
                    .Where(new Where().And("Account", "admin", Operator.Equal))
                    .GroupBy("MemberID", "RealName", "CustomerName")
                    .Having("MemberID=1")
                    .OrderBy("MemberID")
                    .OrderByDescending("RealName")
                    .ToString();
                
                string strSql = new SQL()
                    .Select(News_Category._CategoryName, News._NewsID)
                    .From(News._)
                    .InnerJoin(News_Category._).On(News._NCID, "=", News_Category._NCID)
                    //.Count(News._NewsID)
                    .Where(News._NewsID, "&lt;", "10")
                    .Where(new Where().And(News._NewsID, 3, Operator.Equal))
                    .Top(1)
                    .Distinct()
                    .GroupBy(News_Category._CategoryName, News._NewsID)
                    .Having(News._NewsID, "&lt;", "10")
                    .OrderByDescending(News._NewsID)
                    .ToString();
                Msg.Write(Data.GetScalar(strSql).ToString() + "&lt;br />");
                
                string strSql = new SQL()
                    .Insert(News_Category._)
                    .Value(News_Category._CategoryName, "test")
                    .Value(News_Category._ParentID, 0)
                    .Value(News_Category._ExtUrl, "http://www.relaxlife.net")
                    .Value(News_Category._OrderNum, 0)
                    .ToString();
                string strSql = new SQL()
                    .Insert(News_Category._, News_Category._CategoryName, News_Category._ParentID, News_Category._ExtUrl, News_Category._OrderNum)
                    .Values("test", 1, "http://www.relaxlife.net", 0)
                    .ToString();
                string strSql = new SQL()
                    .Insert(News_Category._, News_Category._CategoryName, News_Category._ParentID, News_Category._ExtUrl, News_Category._OrderNum)
                    .Select(News_Category._CategoryName, News_Category._ParentID, News_Category._ExtUrl, News_Category._OrderNum)
                    .From(News_Category._)
                    .ToString();
                Msg.Write(Data.ExecSql(strSql).ToString() + "&lt;br />");
                
                string strSql = new SQL()
                    .Update(News_Category._)
                    .Set("OrderNum=OrderNum+1")
                    .Set(News_Category._IsHide, false)
                    .Where(News_Category._NCID, "=", "1")
                
                string strSql = new SQL()
                    .Delete()
                    .From(News_Category._)
                    .Where(News_Category._NCID, "=", "1")
                    .ToString();
                
                string strSql = new SQL()
                    .Delete(News_Category._)
                    .Where(News_Category._NCID, "=", "1")
                    .ToString();
                string strSql = new SQL()
                    .Delete(News_Category._)
                    .From(News_Category._)
                    .Where(News_Category._NCID, "=", "1")
                    .ToString();
                
                Msg.Write(Data.ExecSql(strSql).ToString() + "&lt;br />");
                Msg.WriteEnd(strSql.Replace("\n", "&lt;br />"));
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.SQL.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Pub.Class.SQL.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="sql">sql</param>
        </member>
        <member name="M:Pub.Class.SQL.AddParameter(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.AddParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.OutputParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            输出参数
            </summary>
            <param name="name"></param>
            <param name="DbType"></param>
            <param name="Size"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.Database(System.String)">
            <summary>
            设置DB
            </summary>
            <param name="dbkey">dbkey</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.Database(System.String[])">
            <summary>
            设置DB
            </summary>
            <param name="dbkey">dbkey</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.Select">
            <summary>
            查询SQL *
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Select(System.String)">
            <summary>
            查询SQL
            </summary>
            <param name="fields">字段列表</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Select(System.String[])">
            <summary>
            查询SQL
            </summary>
            <param name="fields">字段列表</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Count(System.String)">
            <summary>
            取总数
            </summary>
            <param name="field">字段</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Max(System.String)">
            <summary>
            max
            </summary>
            <param name="field">字段</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Min(System.String)">
            <summary>
            min
            </summary>
            <param name="field">字段</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Count">
            <summary>
            取总数 字段*
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Distinct">
            <summary>
            去除重复
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Top(System.Int32)">
            <summary>
            只取前N条记录
            </summary>
            <param name="n">前N条记录</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Limit(System.Int64,System.Int32)">
            <summary>
            取M记录之后N条记录
            </summary>
            <param name="offset">M</param>
            <param name="rows">N</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Limit(System.Int32)">
            <summary>
            只取前N条记录
            </summary>
            <param name="rows">N</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.From(System.String[])">
            <summary>
            查询表
            </summary>
            <param name="tables">表名列表</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.FromNoLock(System.String[])">
            <summary>
            查询表 无锁
            </summary>
            <param name="tables">表名列表</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.FromAlias(System.String,System.String)">
            <summary>
            查询表
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.FromAliasNoLock(System.String,System.String)">
            <summary>
            查询表 无锁
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.InnerJoin(System.String,System.String)">
            <summary>
            内联查询
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.InnerJoinNoLock(System.String,System.String)">
            <summary>
            内联查询 无锁
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.LeftJoin(System.String,System.String)">
            <summary>
            左联查询
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.LeftJoinNoLock(System.String,System.String)">
            <summary>
            左联查询 无锁
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.RightJoin(System.String,System.String)">
            <summary>
            右联查询
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.RightJoinNoLock(System.String,System.String)">
            <summary>
            右联查询 无锁
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.FullJoin(System.String,System.String)">
            <summary>
            full联查询
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.FullJoinNoLock(System.String,System.String)">
            <summary>
            full联查询 无锁
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.LeftOuterJoin(System.String,System.String)">
            <summary>
            左外联查询
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.LeftOuterJoinNoLock(System.String,System.String)">
            <summary>
            左外联查询 无锁
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.RightOuterJoin(System.String,System.String)">
            <summary>
            右外联查询
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.RightOuterJoinNoLock(System.String,System.String)">
            <summary>
            右外联查询 无锁
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.FullOuterJoin(System.String,System.String)">
            <summary>
            full外联查询
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.FullOuterJoinNoLock(System.String,System.String)">
            <summary>
            full外联查询 无锁
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.CrossJoin(System.String,System.String)">
            <summary>
            笛卡尔积
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.CrossJoinNoLock(System.String,System.String)">
            <summary>
            笛卡尔积 无锁
            </summary>
            <param name="table">表名</param>
            <param name="alias">别名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.On(System.String,System.String,System.String)">
            <summary>
            联接查询条件
            </summary>
            <param name="left">左</param>
            <param name="op">操作符</param>
            <param name="right">右</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.AndOn(System.String,System.String,System.String)">
            <summary>
            联接查询条件
            </summary>
            <param name="left">左</param>
            <param name="op">操作符</param>
            <param name="right">右</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.OrOn(System.String,System.String,System.String)">
            <summary>
            联接查询条件
            </summary>
            <param name="left">左</param>
            <param name="op">操作符</param>
            <param name="right">右</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.On(Pub.Class.Where)">
            <summary>
            联接查询条件
            </summary>
            <param name="where">条件</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.On(Pub.Class.Parameters)">
            <summary>
            联接查询条件
            </summary>
            <param name="command">条件</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.On(System.String,System.Boolean)">
            <summary>
            联接查询条件
            </summary>
            <param name="where">条件 默认1=1</param>
            <param name="addon">是否在前面加on 默认不加on</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.GroupBy(System.String)">
            <summary>
            分组
            </summary>
            <param name="field">字段</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.GroupBy(System.String[])">
            <summary>
            分组
            </summary>
            <param name="fields">字段数组</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Compute(System.String)">
            <summary>
            汇总
            </summary>
            <param name="field">字段</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Compute(System.String[])">
            <summary>
            汇总
            </summary>
            <param name="fields">字段数组</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.WithCube">
            <summary>
            CUBE 生成的结果集显示了所选列中值的所有组合的聚合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.WithRollUp">
            <summary>
            ROLLUP 生成的结果集显示了所选列中值的某一层次结构的聚合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.Having(Pub.Class.Where)">
            <summary>
            分组条件
            </summary>
            <param name="where">条件</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Having(Pub.Class.Parameters)">
            <summary>
            分组条件
            </summary>
            <param name="command">条件</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Having(System.String)">
            <summary>
            分组条件
            </summary>
            <param name="where">条件</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Having(System.String,System.String,System.String)">
            <summary>
            分组条件
            </summary>
            <param name="left">左</param>
            <param name="op">操作符</param>
            <param name="right">右</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.AndHaving(System.String,System.String,System.String)">
            <summary>
            分组条件
            </summary>
            <param name="left">左</param>
            <param name="op">操作符</param>
            <param name="right">右</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.OrHaving(System.String,System.String,System.String)">
            <summary>
            分组条件
            </summary>
            <param name="left">左</param>
            <param name="op">操作符</param>
            <param name="right">右</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.OrderBy(System.String)">
            <summary>
            正序
            </summary>
            <param name="field">字段</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.OrderByDescending(System.String)">
            <summary>
            倒序
            </summary>
            <param name="field">字段</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Order(System.String)">
            <summary>
            排序
            </summary>
            <param name="orders"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.Where(Pub.Class.Where)">
            <summary>
            条件
            </summary>
            <param name="where">条件</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Where(Pub.Class.Parameters)">
            <summary>
            条件
            </summary>
            <param name="command">条件</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Where(System.String)">
            <summary>
            条件 
            </summary>
            <param name="where">条件 为空时是1=1</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Where(System.String,System.String,System.String)">
            <summary>
            条件
            </summary>
            <param name="left">左</param>
            <param name="op">操作符</param>
            <param name="right">右</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.AndWhere(System.String,System.String,System.String)">
            <summary>
            条件
            </summary>
            <param name="left">左</param>
            <param name="op">操作符</param>
            <param name="right">右</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.OrWhere(System.String,System.String,System.String)">
            <summary>
            条件
            </summary>
            <param name="left">左</param>
            <param name="op">操作符</param>
            <param name="right">右</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Update(System.String)">
            <summary>
            更新
            </summary>
            <param name="table">表名</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Set(System.String)">
            <summary>
            设置值
            </summary>
            <param name="keyEqValue">键=值</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Set(System.String,System.Object,System.Boolean)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="useNULL">是否允许更新为null的数据</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Set(System.String,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.SetP(System.String,System.Object,System.Boolean)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="useNULL">是否允许更新为null的数据</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Delete(System.String[])">
            <summary>
            删除
            </summary>
            <param name="tables">表</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Delete">
            <summary>
            删除
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Insert(System.String)">
            <summary>
            添加
            </summary>
            <param name="table">表</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.InsertNoLock(System.String)">
            <summary>
            添加
            </summary>
            <param name="table">表</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Insert(System.String,System.String[])">
            <summary>
            添加
            </summary>
            <param name="table">表</param>
            <param name="fields">字段</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Values(System.Object[])">
            <summary>
            值
            </summary>
            <param name="values">值</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Value(System.String,System.Object,System.Boolean)">
            <summary>
            值
            </summary>
            <param name="field">字段</param>
            <param name="value">值</param>
            <param name="useNULL">是否插入为null的数据</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.Value(System.String,System.Object)">
            <summary>
            值
            </summary>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.ValueP(System.String,System.Object,System.Boolean)">
            <summary>
            值
            </summary>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SQL.ToSelectString">
            <summary>
            生成查询SQL
            </summary>
            <returns>查询SQL代码</returns>
        </member>
        <member name="M:Pub.Class.SQL.ToInsertString">
            <summary>
            生成插入SQL
            </summary>
            <returns>插入SQL代码</returns>
        </member>
        <member name="M:Pub.Class.SQL.ToUpdateString">
            <summary>
            生成修改SQL
            </summary>
            <returns>修改SQL代码</returns>
        </member>
        <member name="M:Pub.Class.SQL.ToDeleteString">
            <summary>
            生成删除SQL
            </summary>
            <returns>删除SQL代码</returns>
        </member>
        <member name="M:Pub.Class.SQL.ToString">
            <summary>
            生成查询、插入、修改、删除SQL
            </summary>
            <returns>查询、插入、修改、删除SQL代码</returns>
        </member>
        <member name="M:Pub.Class.SQL.As(System.String)">
            <summary>
            返回(SQL) as alias
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.UnionStr(Pub.Class.SQL)">
            <summary>
            Union
            </summary>
            <param name="sql">sql</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.UnionAllStr(Pub.Class.SQL)">
            <summary>
            UnionAll
            </summary>
            <param name="sql">sql</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.UnionAll(Pub.Class.SQL)">
            <summary>
            UnionAll
            </summary>
            <param name="sql">sql</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.Union(Pub.Class.SQL)">
            <summary>
            Union
            </summary>
            <param name="sql">sql</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.AddSQL(Pub.Class.SQL)">
            <summary>
            AddSQL
            </summary>
            <param name="sql">sql</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.AddSQL(System.String)">
            <summary>
            AddSQL
            </summary>
            <param name="sql">sql</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.Union(System.String)">
            <summary>
            Union
            </summary>
            <param name="sql">sql</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.UnionAll(System.String)">
            <summary>
            UnionAll
            </summary>
            <param name="sql">sql</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.IfExistsStr(Pub.Class.SQL,Pub.Class.SQL)">
            <summary>
            如果存在
            </summary>
            <param name="trueExec">true 时执行SQL</param>
            <param name="falseExec">false 时执行SQL</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.IfNotExistsStr(Pub.Class.SQL,Pub.Class.SQL)">
            <summary>
            如果不存在
            </summary>
            <param name="trueExec">true 时执行SQL</param>
            <param name="falseExec">false 时执行SQL</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.IfExists(Pub.Class.SQL,Pub.Class.SQL)">
            <summary>
            如果存在
            </summary>
            <param name="trueExec">true 时执行SQL</param>
            <param name="falseExec">false 时执行SQL</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.IfNotExists(Pub.Class.SQL,Pub.Class.SQL)">
            <summary>
            如果不存在
            </summary>
            <param name="trueExec">true 时执行SQL</param>
            <param name="falseExec">false 时执行SQL</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.IfExistsBeginEnd(Pub.Class.SQL,Pub.Class.SQL)">
            <summary>
            如果存在
            </summary>
            <param name="trueExec">true 时执行SQL</param>
            <param name="falseExec">false 时执行SQL</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ToList``1(System.Int32,System.Int32)">
            <summary>
            返回数据列表
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="cacheSeconds">cache时间 秒*5</param>
            <param name="timeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ToEntity``1(System.Int32,System.Int32)">
            <summary>
            返回实体类
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="cacheSeconds">cache时间 秒*5</param>
            <param name="timeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ToScalar(System.Int32,System.Int32)">
            <summary>
            返回第一行第一列数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="cacheSeconds">cache时间 秒*5</param>
            <param name="timeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ToExec(System.Int32)">
            <summary>
            返回影响行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ToExecTran(System.Int32,System.Action{System.Exception})">
            <summary>
            返回事务影响行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ToDataReader(System.Int32,System.Int32)">
            <summary>
            返回DataReader
            </summary>
            <param name="cacheSeconds">cache时间 秒*5</param>
            <param name="timeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ToDataTable(System.Int32,System.Int32)">
            <summary>
            返回DataTable
            </summary>
            <param name="cacheSeconds">cache时间 秒*5</param>
            <param name="timeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ToDataSet(System.Int32,System.Int32)">
            <summary>
            返回DataSet
            </summary>
            <param name="cacheSeconds">cache时间 秒*5</param>
            <param name="timeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ParametersToValues">
            <summary>
            参数值列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ParametersToNames">
            <summary>
            参数名列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ToListByParameters``1(System.Int32)">
            <summary>
            返回数据列表
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="cacheSeconds">cache时间 秒*5</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ToEntityByParameters``1(System.Int32)">
            <summary>
            返回实体类
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="cacheSeconds">cache时间 秒*5</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ToScalarByParameters(System.Int32)">
            <summary>
            返回第一行第一列数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="cacheSeconds">cache时间 秒*5</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SQL.ToExecByParameters">
            <summary>
            返回第一行第一列数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.PagerSQLEnum">
            <summary>
            PagerSQL 调用类型 Enum
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="F:Pub.Class.PagerSQLEnum.not_in">
            <summary>
            not_in
            </summary>
        </member>
        <member name="F:Pub.Class.PagerSQLEnum.max_top">
            <summary>
            top_max
            </summary>
        </member>
        <member name="F:Pub.Class.PagerSQLEnum.top_top">
            <summary>
            top_top
            </summary>
        </member>
        <member name="F:Pub.Class.PagerSQLEnum.row_number">
            <summary>
            row_number
            </summary>
        </member>
        <member name="F:Pub.Class.PagerSQLEnum.mysql">
            <summary>
            mysql
            </summary>
        </member>
        <member name="F:Pub.Class.PagerSQLEnum.oracle">
            <summary>
            oracle
            </summary>
        </member>
        <member name="F:Pub.Class.PagerSQLEnum.sqlite">
            <summary>
            sqlite
            </summary>
        </member>
        <member name="T:Pub.Class.DecimalExtensions">
            <summary>
            Decimal扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.PercentageOf(System.Decimal,System.Int32)">
            <summary>
            百分率
            </summary>
            <param name="number">值</param>
            <param name="percent">百分之</param>
            <returns>百分率</returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.PercentageOf(System.Decimal,System.Decimal)">
            <summary>
            百分率
            </summary>
            <param name="number">值</param>
            <param name="percent">百分之</param>
            <returns>百分率</returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.PercentageOf(System.Decimal,System.Int64)">
            <summary>
            百分率
            </summary>
            <param name="number">值</param>
            <param name="percent">百分之</param>
            <returns>百分率</returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.PercentOf(System.Decimal,System.Int32)">
            <summary>
            百分之
            </summary>
            <param name="position">位置</param>
            <param name="total">总数</param>
            <returns>百分之</returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.PercentOf(System.Decimal,System.Decimal)">
            <summary>
            百分之
            </summary>
            <param name="position"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.PercentOf(System.Decimal,System.Int64)">
            <summary>
            百分之
            </summary>
            <param name="position"></param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.Round(System.Decimal,System.Int32)">
            <summary>
            保留decimalPoints位小数
            </summary>
            <param name="val">值</param>
            <param name="decimalPoints">小数位数</param>
            <returns>保留decimalPoints位小数</returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.Round2(System.Decimal)">
            <summary>
            保留2位小数
            </summary>
            <param name="val">值</param>
            <returns>保留2位小数</returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.ToCurrency(System.Decimal)">
            <summary>
            金额 三位,分割
            </summary>
            <param name="value">值</param>
            <returns>金额 三位,分割</returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.ToRMB2(System.Decimal)">
            <summary>
            人民币转大写
            </summary>
            <param name="num">人民币</param>
            <returns>大写人民币</returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.ToRMB(System.Decimal)">
            <summary>
            把数字转换大写人民币
            </summary>
            <param name="input">人民币</param>
            <returns>大写人民币</returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.IfEqual(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            如果等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.IfNotEqual(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            如果不等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.IfMoreThan(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            如果大于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.IfLessThan(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            如果小于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.IfMoreThanOrEqual(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            如果大于等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DecimalExtensions.IfLessThanOrEqual(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            如果小于等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.TypeExtensions">
            <summary>
            Type 扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.TypeExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            创建对像的实例
            </summary>
            <param name="type">Type扩展</param>
            <param name="constructorParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            创建对像的实例 泛形
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="type">Type扩展</param>
            <param name="constructorParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.GetPropertyCache(System.Type,System.String)">
            <summary>
            将对像的属性CACHE
            </summary>
            <param name="type">Type扩展</param>
            <param name="propertyName">属性</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.GetPropertiesCache(System.Type)">
            <summary>
            将对像的属性CACHE
            </summary>
            <param name="type">Type扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Is Nullable
            </summary>
            <param name="t">Type扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.IsSystemType(System.Type)">
            <summary>
            是否系统类型
            </summary>
            <param name="type">Type扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.ToDbType(System.Type)">
            <summary>
            系统类型转DbType
            </summary>
            <param name="Type">Type扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.ToSqlDBType(System.Data.DbType)">
            <summary>
            DbType 转 SqlDbType
            </summary>
            <param name="dbType">Type扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.ToSQLiteType(System.Data.DbType)">
            <summary>
            DbType 转 SQLiteType
            </summary>
            <param name="dbType">Type扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.ToSql2005Type(System.Data.DbType)">
            <summary>
            DbType 转 Sql2005Type
            </summary>
            <param name="dbType">Type扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.ToMySqlType(System.Data.DbType)">
            <summary>
            DbType 转 MySql
            </summary>
            <param name="dbType">Type扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.FindMembers(System.Type)">
            <summary>
            FindMembers
            </summary>
            <param name="type">Type</param>
            <returns>IEnumerable MemberInfo</returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.FindMember(System.Type)">
            <summary>
            FindMember
            </summary>
            <param name="classType">Type</param>
            <returns>MemberInfo</returns>
        </member>
        <member name="M:Pub.Class.TypeExtensions.ToType(System.Data.DbType)">
            <summary>
            DbType to Type
            </summary>
            <param name="Type">DbType</param>
            <returns>Type</returns>
        </member>
        <member name="T:Pub.Class.SerializeBytes">
            <summary>
            写日志
            
            修改纪录
                2013.02.12 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeBytes.#ctor(System.String,System.String)">
            <summary>
            构造器 指定DLL文件和全类名
            </summary>
            <param name="dllFileName">dll文件名</param>
            <param name="className">命名空间.类名</param>
        </member>
        <member name="M:Pub.Class.SerializeBytes.#ctor(System.String)">
            <summary>
            构造器 指定classNameDllName(SerializeBytesProviderName) 默认Pub.Class.JavaScriptSerializerString
            </summary>
            <param name="classNameAndAssembly">命名空间.类名,程序集名称</param>
        </member>
        <member name="M:Pub.Class.SerializeBytes.#ctor">
            <summary>
            构造器 从Web.config中读SerializeBytesProviderName 默认Pub.Class.SimpleSerializeBytes,Pub.Class
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeBytes.Serialize``1(``0)">
            <summary>
             序列化
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeBytes.Deserialize``1(System.Byte[])">
            <summary>
             反序列化
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeBytes.SerializeFile``1(``0,System.String)">
            <summary>
             序列化文件
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeBytes.DeserializeFile``1(System.String)">
            <summary>
             反序列化文件
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeBytes.SerializeEncode``1(``0,System.String)">
            <summary>
             序列化 DES加密
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeBytes.DecodeDeserialize``1(System.Byte[],System.String)">
            <summary>
             反序列化 DES解密
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeBytes.ToBytes``1(``0)">
            <summary>
             序列化
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeBytes.FromBytes``1(System.Byte[])">
            <summary>
             反序列化
            </summary>
        </member>
        <member name="P:Pub.Class.SerializeBytes.ErrorMessage">
            <summary>
            出错消息
            </summary>
        </member>
        <member name="T:Pub.Class.JavaScriptSerializerString">
            <summary>
            json序列化和反序列化
            
            修改纪录
                2011.07.11 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            User u1 = new User() { UserID = 1000, Name = "熊华春" };
            var serialize = new JavaScriptSerializerString();
            string s = serialize.Serialize(u1);
            serialize.Deserialize&lt;User>(s);
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.JavaScriptSerializerString.Serialize``1(``0)">
            <summary>
            序列成json
            </summary>
            <param name="o">对像</param>
            <returns>json</returns>
        </member>
        <member name="M:Pub.Class.JavaScriptSerializerString.Deserialize``1(System.String)">
            <summary>
            json反序列化成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="data">xml</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.JavaScriptSerializerString.SerializeFile``1(``0,System.String)">
            <summary>
            序列成json文件
            </summary>
            <param name="o">对像</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Pub.Class.JavaScriptSerializerString.DeserializeFile``1(System.String)">
            <summary>
            json文件反序列化成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="fileName">文件名</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.JavaScriptSerializerString.SerializeEncode``1(``0,System.String)">
            <summary>
            序列成XML后DES加密
            </summary>
            <param name="o">对像</param>
            <param name="key">加密KEY</param>
            <returns>XML密文</returns>
        </member>
        <member name="M:Pub.Class.JavaScriptSerializerString.DecodeDeserialize``1(System.String,System.String)">
            <summary>
            DES解密后反序列成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="data">XML密文</param>
            <param name="key">解密KEY</param>
            <returns>对像</returns>
        </member>
        <member name="T:Pub.Class.TopTopPagerSQL">
            <summary>
            使用Top Top 分页  支持ACCESS MSSQL2000+  只允许主键排序
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            PagerSql pagerSql = new TopTopPagerSQL().GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email");
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.TopTopPagerSQL.GetSQL(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            分页SQL调用方法 只允许主键排序
            </summary>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="tableName">表名称</param>
            <param name="pk">主键</param>
            <param name="fieldList">字段列表</param>
            <param name="where">where条件 and or 开始</param>
            <param name="groupBy">分组条件</param>
            <param name="orderBy">排序条件</param>
            <returns>分页SQL</returns>
        </member>
        <member name="T:Pub.Class.RowNumberPagerSQL">
            <summary>
            使用Row_Number() 分页 支持MSSQL2005+
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            PagerSql pagerSql = new RowNumberPagerSQL().GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email");
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.RowNumberPagerSQL.GetSQL(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            分页SQL调用方法
            </summary>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="tableName">表名称</param>
            <param name="pk">主键</param>
            <param name="fieldList">字段列表</param>
            <param name="where">where条件 and or 开始</param>
            <param name="groupBy">分组条件</param>
            <param name="orderBy">排序条件</param>
            <returns>分页SQL</returns>
        </member>
        <member name="T:Pub.Class.MaxTopPagerSQL">
            <summary>
            使用Top Max 分页  支持ACCESS MSSQL2000+ 只允许主键排序
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            PagerSql pagerSql = new MaxTopPagerSQL().GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email");
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.MaxTopPagerSQL.GetSQL(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            分页SQL调用方法 MaxTop MinTop 只允许主键排序
            </summary>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="tableName">表名称</param>
            <param name="pk">主键</param>
            <param name="fieldList">字段列表</param>
            <param name="where">where条件 and or 开始</param>
            <param name="groupBy">分组条件</param>
            <param name="orderBy">排序条件</param>
            <returns>分页SQL</returns>
        </member>
        <member name="T:Pub.Class.Log">
            <summary>
            写日志
            
            修改纪录
                2013.02.12 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.Log.#ctor(System.String,System.String)">
            <summary>
            构造器 指定DLL文件和全类名
            </summary>
            <param name="dllFileName">dll文件名</param>
            <param name="className">命名空间.类名</param>
        </member>
        <member name="M:Pub.Class.Log.#ctor(System.String)">
            <summary>
            构造器 指定classNameDllName(LogProviderName) 默认Pub.Class.SimpleLog,Pub.Class
            </summary>
            <param name="classNameAndAssembly">命名空间.类名,程序集名称</param>
        </member>
        <member name="M:Pub.Class.Log.#ctor">
            <summary>
            构造器 从Web.config中读LogProviderName 默认Pub.Class.SimpleLog,Pub.Class
            </summary>
        </member>
        <member name="M:Pub.Class.Log.Write(System.String,System.Text.Encoding)">
            <summary>
             写日志
            </summary>
             <param name="msg">消息</param>
             <param name="encoding">编码</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Log.Write(System.Exception,System.Text.Encoding)">
            <summary>
            写日志
            </summary>
            <param name="ex">消息</param>
            <param name="encoding">编码</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Log.WriteLog(System.String,System.Text.Encoding)">
            <summary>
             写日志
            </summary>
             <param name="msg">消息</param>
             <param name="encoding">编码</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Log.WriteLog(System.Exception,System.Text.Encoding)">
            <summary>
            写日志
            </summary>
            <param name="ex">消息</param>
            <param name="encoding">编码</param>
            <returns>true/false</returns>
        </member>
        <member name="P:Pub.Class.Log.ErrorMessage">
            <summary>
            出错消息
            </summary>
        </member>
        <member name="T:Pub.Class.ISafeDictionary`2">
            <summary>
            安全Dictionary接口
            
            修改纪录
                2012.03.02 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            private static ISafeDictionary&lt;string, object> classCache = new SafeDictionarySlim&lt;string, object>();
            </example>
            </code>
            </summary>
            <typeparam name="K">key类型</typeparam>
            <typeparam name="V">value类型</typeparam>
        </member>
        <member name="M:Pub.Class.ISafeDictionary`2.Add(`0,`1)">
            <summary>
            添加元素
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.ISafeDictionary`2.Clear">
            <summary>
            清空所有元素
            </summary>
        </member>
        <member name="M:Pub.Class.ISafeDictionary`2.ContainsKey(`0)">
            <summary>
            元素是否存在
            </summary>
            <param name="key">key</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ISafeDictionary`2.Remove(`0)">
            <summary>
            删除指定元素
            </summary>
            <param name="key">key</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ISafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            取指定的元素
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ISafeDictionary`2.AddOrUpdate(`0,`1)">
            <summary>
            添加或修改元素
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.ISafeDictionary`2.Get(`0,System.Func{`1})">
            <summary>
            读与写
            </summary>
            <param name="key">K key</param>
            <param name="acquire">Func&lt;V></param>
            <returns>V</returns>
        </member>
        <member name="P:Pub.Class.ISafeDictionary`2.Keys">
            <summary>
            取所有key
            </summary>
        </member>
        <member name="P:Pub.Class.ISafeDictionary`2.Values">
            <summary>
            取所有value
            </summary>
        </member>
        <member name="P:Pub.Class.ISafeDictionary`2.Item(`0)">
            <summary>
            获取或设置具有指定键的元素
            </summary>
            <param name="key">要获取或设置的元素的键</param>
            <returns>带有指定键的元素</returns>
        </member>
        <member name="P:Pub.Class.ISafeDictionary`2.Count">
            <summary>
            元素数量
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.SafeDictionary`2">
            <summary>
            安全Dictionary 使用lock
            
            修改纪录
                2012.03.02 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            private static ISafeDictionary&lt;string, object> classCache = new SafeDictionary&lt;string, object>();
            </example>
            </code>
            </summary>
            <typeparam name="K">key类型</typeparam>
            <typeparam name="V">value类型</typeparam>
        </member>
        <member name="M:Pub.Class.SafeDictionary`2.Add(`0,`1)">
            <summary>
            添加元素
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.SafeDictionary`2.Clear">
            <summary>
            清空所有元素
            </summary>
        </member>
        <member name="M:Pub.Class.SafeDictionary`2.ContainsKey(`0)">
            <summary>
            元素是否存在
            </summary>
            <param name="key">key</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.SafeDictionary`2.Remove(`0)">
            <summary>
            删除指定元素
            </summary>
            <param name="key">key</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.SafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            取指定的元素
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.SafeDictionary`2.AddOrUpdate(`0,`1)">
            <summary>
            添加或修改元素
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.SafeDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{K@V}}#GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SafeDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SafeDictionary`2.Get(`0,System.Func{`1})">
            <summary>
            读与写
            </summary>
            <param name="key">K key</param>
            <param name="acquire">Func&lt;V></param>
            <returns>V</returns>
        </member>
        <member name="P:Pub.Class.SafeDictionary`2.Keys">
            <summary>
            取所有key
            </summary>
        </member>
        <member name="P:Pub.Class.SafeDictionary`2.Values">
            <summary>
            取所有value
            </summary>
        </member>
        <member name="P:Pub.Class.SafeDictionary`2.Item(`0)">
            <summary>
            获取或设置具有指定键的元素
            </summary>
            <param name="key">要获取或设置的元素的键</param>
            <returns>带有指定键的元素</returns>
        </member>
        <member name="P:Pub.Class.SafeDictionary`2.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="T:Pub.Class.SafeDictionarySlim`2">
            <summary>
            安全Dictionary 使用ReaderWriterLockSlim
            
            修改纪录
                2012.03.02 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            private static ISafeDictionary&lt;string, object> classCache = new SafeDictionarySlim&lt;string, object>();
            </example>
            </code>
            </summary>
            <typeparam name="K">key类型</typeparam>
            <typeparam name="V">value类型</typeparam>
        </member>
        <member name="M:Pub.Class.SafeDictionarySlim`2.Add(`0,`1)">
            <summary>
            添加元素
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.SafeDictionarySlim`2.Clear">
            <summary>
            清空所有元素
            </summary>
        </member>
        <member name="M:Pub.Class.SafeDictionarySlim`2.ContainsKey(`0)">
            <summary>
            元素是否存在
            </summary>
            <param name="key">key</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.SafeDictionarySlim`2.Remove(`0)">
            <summary>
            删除指定元素
            </summary>
            <param name="key">key</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.SafeDictionarySlim`2.TryGetValue(`0,`1@)">
            <summary>
            取指定的元素
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.SafeDictionarySlim`2.AddOrUpdate(`0,`1)">
            <summary>
            添加或修改元素
            </summary>
            <param name="key">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.SafeDictionarySlim`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{K@V}}#GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SafeDictionarySlim`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SafeDictionarySlim`2.Get(`0,System.Func{`1})">
            <summary>
            读与写
            </summary>
            <param name="key">K key</param>
            <param name="acquire">Func&lt;V></param>
            <returns>V</returns>
        </member>
        <member name="P:Pub.Class.SafeDictionarySlim`2.Keys">
            <summary>
            取所有key
            </summary>
        </member>
        <member name="P:Pub.Class.SafeDictionarySlim`2.Values">
            <summary>
            取所有value
            </summary>
        </member>
        <member name="P:Pub.Class.SafeDictionarySlim`2.Item(`0)">
            <summary>
            获取或设置具有指定键的元素
            </summary>
            <param name="key">要获取或设置的元素的键</param>
            <returns>带有指定键的元素</returns>
        </member>
        <member name="P:Pub.Class.SafeDictionarySlim`2.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="T:Pub.Class.ISafeList`1">
            <summary>
            安全List接口
            
            修改纪录
                2012.03.02 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            private static ISafeList&lt;string> classCache = new SafeListSlim&lt;string>();
            </example>
            </code>
            </summary>
            <typeparam name="V">value类型</typeparam>
        </member>
        <member name="M:Pub.Class.ISafeList`1.Add(`0)">
            <summary>
            添加元素
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.ISafeList`1.AddUnique(`0)">
            <summary>
            添加唯一元素
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.ISafeList`1.Insert(System.Int32,`0)">
            <summary>
            插入元素
            </summary>
            <param name="index">索引</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.ISafeList`1.InsertUnique(System.Int32,`0)">
            <summary>
            插入唯一元素
            </summary>
            <param name="index">索引</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.ISafeList`1.Clear">
            <summary>
            清空所有元素
            </summary>
        </member>
        <member name="M:Pub.Class.ISafeList`1.Contains(`0)">
            <summary>
            元素是否存在
            </summary>
            <param name="value">元素</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ISafeList`1.IndexOf(`0)">
            <summary>
            首元素是否存在
            </summary>
            <param name="value">元素</param>
            <returns>返回索引号</returns>
        </member>
        <member name="M:Pub.Class.ISafeList`1.LastIndexOf(`0)">
            <summary>
            尾元素是否存在
            </summary>
            <param name="value">元素</param>
            <returns>返回索引号</returns>
        </member>
        <member name="M:Pub.Class.ISafeList`1.Remove(`0)">
            <summary>
            删除指定元素 只删除第一个匹配项
            </summary>
            <param name="value">value</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ISafeList`1.Remove(System.Int32)">
            <summary>
            删除指定元素
            </summary>
            <param name="index">索引</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ISafeList`1.Reverse">
            <summary>
            元素的顺序反转
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.ISafeList`1.Pop">
            <summary>
            出栈
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ISafeList`1.Push(`0)">
            <summary>
            进栈
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="P:Pub.Class.ISafeList`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素。
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引。</param>
            <returns>指定索引处的元素。</returns>
        </member>
        <member name="P:Pub.Class.ISafeList`1.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="T:Pub.Class.SafeList`1">
            <summary>
            安全List 使用ReaderWriterLockSlim
            
            修改纪录
                2012.03.08 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            private static SafeListSlim&lt;string> classCache = new SafeListSlim&lt;string>();
            </example>
            </code>
            </summary>
            <typeparam name="V">value类型</typeparam>
        </member>
        <member name="M:Pub.Class.SafeList`1.Add(`0)">
            <summary>
            添加元素
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.SafeList`1.AddUnique(`0)">
            <summary>
            添加唯一元素
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.SafeList`1.Insert(System.Int32,`0)">
            <summary>
            插入元素
            </summary>
            <param name="index">索引</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.SafeList`1.InsertUnique(System.Int32,`0)">
            <summary>
            插入唯一元素
            </summary>
            <param name="index">索引</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.SafeList`1.Clear">
            <summary>
            清空所有元素
            </summary>
        </member>
        <member name="M:Pub.Class.SafeList`1.Contains(`0)">
            <summary>
            元素是否存在
            </summary>
            <param name="value">元素</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.SafeList`1.IndexOf(`0)">
            <summary>
            首元素是否存在
            </summary>
            <param name="value">元素</param>
            <returns>返回索引号</returns>
        </member>
        <member name="M:Pub.Class.SafeList`1.LastIndexOf(`0)">
            <summary>
            尾元素是否存在
            </summary>
            <param name="value">元素</param>
            <returns>返回索引号</returns>
        </member>
        <member name="M:Pub.Class.SafeList`1.Remove(`0)">
            <summary>
            删除指定元素 只删除第一个匹配项
            </summary>
            <param name="value">value</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.SafeList`1.Remove(System.Int32)">
            <summary>
            删除指定元素
            </summary>
            <param name="index">索引</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.SafeList`1.Reverse">
            <summary>
            元素的顺序反转
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SafeList`1.Pop">
            <summary>
            出栈
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SafeList`1.Push(`0)">
            <summary>
            进栈
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SafeList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SafeList`1.System#Collections#Generic#IEnumerable{V}#GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Pub.Class.SafeList`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素。
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引。</param>
            <returns>指定索引处的元素。</returns>
        </member>
        <member name="P:Pub.Class.SafeList`1.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="T:Pub.Class.SafeListSlim`1">
            <summary>
            安全List 使用ReaderWriterLockSlim
            
            修改纪录
                2012.03.08 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            private static SafeListSlim&lt;string> classCache = new SafeListSlim&lt;string>();
            </example>
            </code>
            </summary>
            <typeparam name="V">value类型</typeparam>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.Add(`0)">
            <summary>
            添加元素
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.AddUnique(`0)">
            <summary>
            添加唯一元素
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.Insert(System.Int32,`0)">
            <summary>
            插入元素
            </summary>
            <param name="index">索引</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.InsertUnique(System.Int32,`0)">
            <summary>
            插入唯一元素
            </summary>
            <param name="index">索引</param>
            <param name="value">value</param>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.Clear">
            <summary>
            清空所有元素
            </summary>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.Contains(`0)">
            <summary>
            元素是否存在
            </summary>
            <param name="value">元素</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.IndexOf(`0)">
            <summary>
            首元素是否存在
            </summary>
            <param name="value">元素</param>
            <returns>返回索引号</returns>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.LastIndexOf(`0)">
            <summary>
            尾元素是否存在
            </summary>
            <param name="value">元素</param>
            <returns>返回索引号</returns>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.Remove(`0)">
            <summary>
            删除指定元素 只删除第一个匹配项
            </summary>
            <param name="value">value</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.Remove(System.Int32)">
            <summary>
            删除指定元素
            </summary>
            <param name="index">索引</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.Reverse">
            <summary>
            元素的顺序反转
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.Pop">
            <summary>
            出栈
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.Push(`0)">
            <summary>
            进栈
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SafeListSlim`1.System#Collections#Generic#IEnumerable{V}#GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Pub.Class.SafeListSlim`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素。
            </summary>
            <param name="index">要获得或设置的元素从零开始的索引。</param>
            <returns>指定索引处的元素。</returns>
        </member>
        <member name="P:Pub.Class.SafeListSlim`1.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="T:Pub.Class.Singleton`1">
            <summary>
            Singleton 泛型单实例类
            
            修改纪录
                2008.06.12 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            public class UC_Member : Singleton&lt;UC_Member> { }
            </code>
            </example>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Pub.Class.Singleton`1.Instance">
            <summary>
            获取实例
            </summary>
        </member>
        <member name="M:Pub.Class.Singleton`1.Instance(`0)">
            <summary>
            设置实例
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Pub.Class.SingletonAddIn`1">
            <summary>
            SingletonEx 插件泛型单实例类
            
            修改纪录
                2008.06.12 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            SingletonEx&lt;ICompress>.Instance("Pub.Class.SharpZip.dll", "Pub.Class.SharpZip.Compress").File("~/web.config".GetMapPath(), "~/web.config.zip".GetMapPath());
            </code>
            </example>
            </summary>
            <typeparam name="T">插件接口</typeparam>
        </member>
        <member name="M:Pub.Class.SingletonAddIn`1.Instance(System.String,System.String)">
            <summary>
            获取实例
            </summary>
            <example>
            <code>
            SingletonAddIn&lt;ICompress>.Instance("Pub.Class.SharpZip.dll", "Pub.Class.SharpZip.Compress")
                .File("~/web.config".GetMapPath(), "~/web.config.zip".GetMapPath());
            </code>
            </example>
            <param name="dllFileName">dll文件名</param>
            <param name="className">类名</param>
        </member>
        <member name="M:Pub.Class.SingletonAddIn`1.InstanceDynamic(System.String,System.String)">
            <summary>
            获取实例
            </summary>
            <example>
            <code>
            SingletonAddIn&lt;ICompress>.InstanceDynamic("Pub.Class.SharpZip.dll", "Pub.Class.SharpZip.Compress")
                .File("~/web.config".GetMapPath(), "~/web.config.zip".GetMapPath());
            </code>
            </example>
            <param name="dllFileName">dll文件名</param>
            <param name="className">类名</param>
        </member>
        <member name="M:Pub.Class.SingletonAddIn`1.Instance(System.String)">
            <summary>
            获取实例 性能比较好
            </summary>
            <example>
            <code>
            SingletonAddIn&lt;ICompress>.Instance("Pub.Class.SharpZip.Compress,Pub.Class.SharpZip")
                .File("~/web.config".GetMapPath(), "~/web.config.zip".GetMapPath());
            </code>
            </example>
            <param name="classNameAndAssembly">命名空间.类名,程序集名称</param>
        </member>
        <member name="T:Pub.Class.Session2">
            <summary>
            Session操作类
            
            修改纪录
                2006.05.11 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.Session2.Set(System.String,System.String)">
            <summary>
            设置Session值
            </summary>
            <param name="key">Session名称</param>
            <param name="value">Session名称对应的值</param>
        </member>
        <member name="M:Pub.Class.Session2.Get(System.String)">
            <summary>
            取Session值
            </summary>
            <param name="key">Session名称</param>
            <returns>Session名称对应的值</returns>
        </member>
        <member name="T:Pub.Class.IDataReaderEntityBuilder`1">
            <summary>
            IDataReader 转实体IList
            
            修改纪录
                2009.12.11 版本：1.0 livexy 创建此类
            
            </summary>
            <typeparam name="Entity">实体类</typeparam>
        </member>
        <member name="M:Pub.Class.IDataReaderEntityBuilder`1.Build(System.Data.IDataRecord)">
            <summary>
            绑定IDataRecord
            </summary>
            <param name="dataRecord">IDataRecord</param>
            <returns>绑定IDataRecord</returns>
        </member>
        <member name="M:Pub.Class.IDataReaderEntityBuilder`1.CreateBuilder(System.Data.IDataRecord)">
            <summary>
            IDataRecord转实体
            </summary>
            <param name="dataRecord">IDataRecord</param>
            <returns>IDataRecord转实体</returns>
        </member>
        <member name="T:Pub.Class.HttpHelper">
            <summary>
             执行HTTP GET和POST请求操作
             
             修改纪录
                 2009.05.02 版本：1.0 livexy 创建此类
             
            </summary>
        </member>
        <member name="M:Pub.Class.HttpHelper.SendPost(System.String,System.String)">
            <summary>
            POST请求发送到指定的URL
            </summary>
            <example>
            <code>
                string postResponse = HttpHelper.SendPost("http://www.google.com", "t=sample post data");
            </code>
            </example>
            <param name="url">请求的URL</param>
            <param name="postData">要发送的数据</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.SendPost(System.String,System.String,System.String)">
            <summary>
            POST请求发送到指定的URL
            </summary>
            <param name="url">请求的URL</param>
            <param name="postData">要发送的数据</param>
            <param name="contentType">请求的内容类型。默认值是'application/x-www-form-urlencoded'.</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.SendPost(System.String,System.String,System.String,System.Net.ICredentials)">
            <summary>
            POST请求发送到指定的URL
            </summary>
            <param name="url">请求的URL</param>
            <param name="postData">要发送的数据</param>
            <param name="contentType">请求的内容类型。默认值是'application/x-www-form-urlencoded'</param>
            <param name="credentials">使用的凭据</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.SendPost(System.String,System.String,System.String,System.Net.ICredentials,System.Nullable{System.Int32})">
            <summary>
            POST数据
            </summary>
            <param name="url">URL</param>
            <param name="postData">数据</param>
            <param name="contentType">请求的内容类型。默认值是'application/x-www-form-urlencoded'</param>
            <param name="credentials">使用的凭据</param>
            <param name="timeout">超时</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.SendGet(System.String)">
            <summary>
            到指定的URL发送一个GET请求
            </summary>
            <example>
            <code>
                string getResponse = HttpHelper.SendGet("http://www.google.com");
            </code>
            </example>
            <param name="url">请求的URL</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.SendGet(System.String,System.String)">
            <summary>
            到指定的URL发送一个GET请求
            </summary>
            <param name="url">请求的URL</param>
            <param name="contentType">请求的内容类型。默认值是'application/x-www-form-urlencoded'.</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.SendGet(System.String,System.String,System.Net.ICredentials)">
            <summary>
            到指定的URL发送一个GET请求
            </summary>
            <param name="url">请求的URL</param>
            <param name="contentType">请求的内容类型。默认值是'application/x-www-form-urlencoded'.</param>
            <param name="credentials">使用的凭据</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.SendGet(System.String,System.String,System.Net.ICredentials,System.Nullable{System.Int32})">
            <summary>
            GET数据
            </summary>
            <param name="url">请求的URL</param>
            <param name="contentType">请求的内容类型。默认值是'application/x-www-form-urlencoded'</param>
            <param name="credentials">使用的凭据</param>
            <param name="timeout">超时</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.SendRequest(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Net.ICredentials,System.Net.IWebProxy,System.Nullable{System.Int32},System.Text.Encoding)">
            <summary>
            发送到指定的URL的请求
            </summary>
            <param name="url">请求的URL</param>
            <param name="postData">要发送的数据</param>
            <param name="requestType">请求类型 POST GET</param>
            <param name="contentType">请求的内容类型。默认值是'application/x-www-form-urlencoded'.</param>
            <param name="userAgent">请求 UserAgent</param>
            <param name="keepAlive">KeepAlive true/false</param>
            <param name="credentials">使用的凭据</param>
            <param name="proxy">使用代理</param>
            <param name="timeout">超时</param>
            <param name="encoding">设置响应编码</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.SendRequest(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Net.ICredentials,System.Net.IWebProxy,System.Nullable{System.Int32},System.Text.Encoding,System.Text.Encoding)">
            <summary>
            发送到指定的URL的请求
            </summary>
            <param name="url">请求的URL</param>
            <param name="postData">要发送的数据</param>
            <param name="requestType">请求类型 POST GET</param>
            <param name="contentType">请求的内容类型。默认值是'application/x-www-form-urlencoded'.</param>
            <param name="userAgent">请求 UserAgent</param>
            <param name="keepAlive">KeepAlive true/false</param>
            <param name="credentials">使用的凭据</param>
            <param name="proxy">使用代理</param>
            <param name="timeout">超时</param>
            <param name="encoding">设置响应编码</param>
            <param name="postDataEncoding">设置POST数据编码</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.DownloadFile(System.String,System.String)">
            <summary>
            通过HTTP下载文件
            </summary>
            <param name="sourceUrl">源文件所在的URL</param>
            <param name="destinationPath">该文件将被存储的本地目标路径</param>
            <returns>下载成功 true/false</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.GetHtml(System.String,System.String,System.String,System.String,System.String,System.Net.CookieContainer,System.Text.Encoding,System.String@)">
            <summary>
            获取一个网页的内容的GET方法
            </summary>
            <param name="url">请求的URL</param>
            <param name="accept">Accept</param>
            <param name="encoding">设置响应编码</param>
            <param name="referer">Referer</param>
            <param name="language">Language</param>
            <param name="cc">Cookie</param>
            <param name="contentType">contentType</param>
            <param name="returnUrl">跳转URL</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.GetJavaScriptTime">
            <summary>
            取JS时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.GetHtml(System.String,System.String,System.String,System.String,System.String,System.String,System.Text.Encoding,System.String@)">
            <summary>
            获取一个网页的内容的GET方法
            </summary>
            <param name="url">请求的URL</param>
            <param name="encoding">设置响应编码</param>
            <param name="accept">Accept</param>
            <param name="contentType">contentType</param>
            <param name="cookies">cookies</param>
            <param name="language">language</param>
            <param name="referer">referer</param>
            <param name="returnUrl">跳转URL</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.Post(System.String,System.String,System.String,System.String,System.String,System.String,System.Net.CookieContainer,System.Text.Encoding,System.String@)">
            <summary>
            获取一个网页的内容的POST方法
            </summary>
            <param name="url">请求的URL</param>
            <param name="encoding">设置响应编码</param>
            <param name="accept">accept</param>
            <param name="cc">cookies</param>
            <param name="contentType">contentType</param>
            <param name="language">language</param>
            <param name="postContent">POST数据</param>
            <param name="referer">referer</param>
            <param name="returnUrl">跳转URL</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.PostNoAutoRedirect(System.String,System.String,System.String,System.String,System.String,System.String,System.Net.CookieContainer@,System.Text.Encoding,System.String@)">
            <summary>
            获取一个网页的内容的POST方法 不自动跳转
            </summary>
            <param name="url">请求的URL</param>
            <param name="encoding">设置响应编码</param>
            <param name="accept">accept</param>
            <param name="cc">cookies</param>
            <param name="contentType">contentType</param>
            <param name="language">language</param>
            <param name="postContent">POST数据</param>
            <param name="referer">referer</param>
            <param name="returnUrl">跳转URL</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.Post(System.String,System.String,System.String,System.String,System.String,System.String,System.Net.CookieContainer@,System.Text.Encoding,System.String@)">
            <summary>
            POST数据
            </summary>
            <param name="url">请求的URL</param>
            <param name="accept">accept</param>
            <param name="contentType">contentType</param>
            <param name="referer">referer</param>
            <param name="language">language</param>
            <param name="postContent">POST数据</param>
            <param name="cc">cookies</param>
            <param name="encoding">响应编码</param>
            <param name="returnUrl">跳转URL</param>
            <returns>返回请求的数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.GetAllCookiesFromHeader(System.String,System.String)">
            <summary>
            GetAllCookiesFromHeader
            </summary>
            <param name="strHeader"></param>
            <param name="strHost"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.GetQ(System.Uri,System.String)">
            <summary>
            获取QueryString值
            </summary>
            <param name="u">URL</param>
            <param name="key">QueryString key</param>
            <returns>QueryString 值</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.Resove(System.String,System.String,System.String)">
            <summary>
            从HTML代码的前缀和后缀获取中间部分内容 从上向下
            </summary>
            <param name="html">源HTML代码</param>
            <param name="prefix">前缀</param>
            <param name="subfix">后缀</param>
            <returns>中间部分数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.ResoveReverse(System.String,System.String,System.String)">
            <summary>
            从HTML代码的前缀和后缀获取中间部分内容 从下向上
            </summary>
            <param name="html">源HTML代码</param>
            <param name="subfix">前缀</param>
            <param name="prefix">后缀</param>
            <returns>中间部分数据</returns>
        </member>
        <member name="M:Pub.Class.HttpHelper.ResoveList(System.String,System.String,System.String)">
            <summary>
            从HTML代码的前缀和后缀获取中间部分内容列表 遍历
            </summary>
            <param name="html">源HTML代码</param>
            <param name="prefix">前缀</param>
            <param name="subfix">后缀</param>
            <returns>中间部分数据列表</returns>
        </member>
        <member name="P:Pub.Class.HttpHelper.WebHeaderCollection">
            <summary>
            设置在请求中发送的报头值的集合。
            </summary>
        </member>
        <member name="P:Pub.Class.HttpHelper.Encoding">
            <summary>
            设置响应编码。默认是UTF - 8。
            </summary>
        </member>
        <member name="P:Pub.Class.HttpHelper.PostDataEncoding">
            <summary>
            设置POST数据编码。默认是UTF - 8。
            </summary>
        </member>
        <member name="T:Pub.Class.SerializeJson">
            <summary>
            写日志
            
            修改纪录
                2013.02.12 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeJson.#ctor(System.String,System.String)">
            <summary>
            构造器 指定DLL文件和全类名
            </summary>
            <param name="dllFileName">dll文件名</param>
            <param name="className">命名空间.类名</param>
        </member>
        <member name="M:Pub.Class.SerializeJson.#ctor(System.String)">
            <summary>
            构造器 指定classNameDllName(SerializeJsonProviderName) 默认Pub.Class.JavaScriptSerializerString
            </summary>
            <param name="classNameAndAssembly">命名空间.类名,程序集名称</param>
        </member>
        <member name="M:Pub.Class.SerializeJson.#ctor">
            <summary>
            构造器 从Web.config中读SerializeJsonProviderName 默认Pub.Class.SimpleSerializeString,Pub.Class
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeJson.Serialize``1(``0)">
            <summary>
             序列化
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeJson.Deserialize``1(System.String)">
            <summary>
             反序列化
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeJson.SerializeFile``1(``0,System.String)">
            <summary>
             序列化文件
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeJson.DeserializeFile``1(System.String)">
            <summary>
             反序列化文件
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeJson.SerializeEncode``1(``0,System.String)">
            <summary>
             序列化 DES加密
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeJson.DecodeDeserialize``1(System.String,System.String)">
            <summary>
             反序列化 DES解密
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeJson.ToJson``1(``0)">
            <summary>
             序列化
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeJson.FromJson``1(System.String)">
            <summary>
             反序列化
            </summary>
        </member>
        <member name="P:Pub.Class.SerializeJson.ErrorMessage">
            <summary>
            出错消息
            </summary>
        </member>
        <member name="T:Pub.Class.OraclePagerSQL">
            <summary>
            Oracle分页  支持oracle
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            PagerSql pagerSql = new OraclePagerSQL().GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email");
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.OraclePagerSQL.GetSQL(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            分页SQL调用方法
            </summary>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="tableName">表名称</param>
            <param name="pk">主键</param>
            <param name="fieldList">字段列表</param>
            <param name="where">where条件 and or 开始</param>
            <param name="groupBy">分组条件</param>
            <param name="orderBy">排序条件</param>
            <returns>分页SQL</returns>
        </member>
        <member name="T:Pub.Class.PageBase">
            <summary>
            aspx页面继承类
            
            修改纪录
                2006.05.08 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="F:Pub.Class.PageBase.langList">
            <summary>
            语言CACHE
            </summary>
        </member>
        <member name="F:Pub.Class.PageBase.lang">
            <summary>
            语言
            </summary>
        </member>
        <member name="F:Pub.Class.PageBase.skin">
            <summary>
            皮肤
            </summary>
        </member>
        <member name="F:Pub.Class.PageBase.title">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:Pub.Class.PageBase.description">
            <summary>
            描述
            </summary>
        </member>
        <member name="F:Pub.Class.PageBase.keywords">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:Pub.Class.PageBase.index">
            <summary>
            索引值
            </summary>
        </member>
        <member name="F:Pub.Class.PageBase.js">
            <summary>
            引用JS
            </summary>
        </member>
        <member name="F:Pub.Class.PageBase.css">
            <summary>
            引用CSS
            </summary>
        </member>
        <member name="F:Pub.Class.PageBase.RootPath">
            <summary>
            相对根路径 /开头
            </summary>
        </member>
        <member name="M:Pub.Class.PageBase.GetLang">
            <summary>
            取所有语言
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.PageBase.GetLang(System.String)">
            <summary>
            取语言
            </summary>
            <example>
            <code>
                string aa = GetLang("lblCourseName")
            </code>
            </example>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Pub.Class.PageBase.Lang">
            <summary>
            语言
            </summary>
        </member>
        <member name="P:Pub.Class.PageBase.Skin">
            <summary>
            皮肤
            </summary>
        </member>
        <member name="P:Pub.Class.PageBase.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Pub.Class.PageBase.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Pub.Class.PageBase.Keywords">
            <summary>
            关键字
            </summary>
        </member>
        <member name="P:Pub.Class.PageBase.Index">
            <summary>
            索引值
            </summary>
        </member>
        <member name="P:Pub.Class.PageBase.JS">
            <summary>
            引用JS
            </summary>
        </member>
        <member name="P:Pub.Class.PageBase.CSS">
            <summary>
            引用CSS
            </summary>
        </member>
        <member name="T:Pub.Class.WebControlExtensions">
            <summary>
            DataGrid GridView扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.WebControlExtensions.HoverScript(System.Web.UI.WebControls.DataGrid,System.String,System.String)">
            <summary>
            鼠标移上时变颜色
            </summary>
            <param name="dg">DataGrid扩展</param>
            <param name="color">默认颜色</param>
            <param name="hoverColor">hover颜色</param>
        </member>
        <member name="M:Pub.Class.WebControlExtensions.HoverScript(System.Web.UI.WebControls.GridView,System.String,System.String)">
            <summary>
            鼠标移上时变颜色
            </summary>
            <param name="dv">GridView扩展</param>
            <param name="color">默认颜色</param>
            <param name="hoverColor">hover颜色</param>
        </member>
        <member name="M:Pub.Class.WebControlExtensions.Eval``1(System.Web.UI.Page,System.Func{``0,System.String})">
            <summary>
            强类型数据绑定
            </summary>
            <example>
            <code>
            this.Eval&lt;Student>(p => p.Age)
            </code>
            </example>
            <typeparam name="TEntity">类型</typeparam>
            <param name="page">Page扩展</param>
            <param name="func">函数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebControlExtensions.Eval``2(System.Web.UI.Page,System.Func{``0,``1})">
            <summary>
            强类型数据绑定
            </summary>
            <example>
            <code>
            this.Eval&lt;Student, int>(p => p.Age)
            </code>
            </example>
            <typeparam name="TEntity">类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="page">Page扩展</param>
            <param name="func">函数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebControlExtensions.GetControlValue(System.Web.UI.Page,System.String)">
            <summary>
            取控件的值
            </summary>
            <param name="page">Page扩展</param>
            <param name="ctrlID">控件ID</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebControlExtensions.SetControlValue(System.Web.UI.Page,System.String,System.String)">
            <summary>
            设置控件的值
            </summary>
            <param name="page">Page扩展</param>
            <param name="ctrlID">控件ID</param>
            <param name="value">值</param>
        </member>
        <member name="T:Pub.Class.WebConfig">
            <summary>
            Web.Config配置类
            
            修改纪录
                2006.05.15 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="F:Pub.Class.WebConfig.DoMain">
            <summary>
            Web.Config 中配置DoMain区域
            </summary>
        </member>
        <member name="M:Pub.Class.WebConfig.GetApp(System.String)">
            <summary>
            取appSettings结点数据
            </summary>
            <param name="key">key</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Pub.Class.WebConfig.GetApp``1(System.String,``0)">
            <summary>
            取appSettings结点数据
            </summary>
            <param name="key">key</param>
            <param name="value">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Pub.Class.WebConfig.GetApp(System.Int32)">
            <summary>
            取appSettings结点数据
            </summary>
            <param name="i">索引</param>
            <returns>取appSettings结点数据</returns>
        </member>
        <member name="M:Pub.Class.WebConfig.GetApp">
            <summary>
            取appSettings结点数据
            </summary>
            <returns>取appSettings结点数据</returns>
        </member>
        <member name="M:Pub.Class.WebConfig.SetApp(System.String,System.String)">
            <summary>
            修改appSettings结点数据 如果不存在 添加
            </summary>
            <param name="key">key</param>
            <param name="value">取appSettings结点数据</param>
        </member>
        <member name="M:Pub.Class.WebConfig.RemoveApp(System.String)">
            <summary>
            删除一个appSettings节点
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebConfig.GetConn(System.String)">
            <summary>
            取connectionStrings结点数据
            </summary>
            <param name="key">key</param>
            <returns>取connectionStrings结点数据</returns>
        </member>
        <member name="M:Pub.Class.WebConfig.GetConn(System.Int32)">
            <summary>
            取connectionStrings结点数据
            </summary>
            <param name="i">索引</param>
            <returns>取connectionStrings结点数据</returns>
        </member>
        <member name="M:Pub.Class.WebConfig.GetConn">
            <summary>
            取connectionStrings结点数据
            </summary>
            <returns>取connectionStrings结点数据</returns>
        </member>
        <member name="M:Pub.Class.WebConfig.SetConn(System.String,System.String,System.String)">
            <summary>
            设置/重写一个数据库连接串
            </summary>
            <param name="key">键</param>
            <param name="connString">连接字符串</param>
            <param name="providerName">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebConfig.GetSection``1(System.String)">
            <summary>
            GetSection&lt;appSettings>("configuration/appSettings")
            </summary>
            <typeparam name="TReturn">返回类型</typeparam>
            <param name="sectionName">节点</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.DynamicWebService">
            <summary>
            WebService 动态调用
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            Hashtable pas = new Hashtable(); pas["i"] = 100;
            new DynamicWebService().Call("http://www.test.com/default.asmx", "WebService", "test2", pas);
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.DynamicWebService.Call(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            WebService 动态方式调用
            </summary>
            <param name="url">WebService 接口地址</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:Pub.Class.DynamicWebService.Call(System.String,System.String,System.String,System.Collections.Generic.IList{Pub.Class.UrlParameter})">
            <summary>
            WebService 动态方式调用
            </summary>
            <param name="url">WebService 接口地址</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns>返回字符串</returns>
        </member>
        <member name="T:Pub.Class.IEnumerableExtensions">
            <summary>
            IEnumerable 扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.IsNullEmpty(System.Collections.IEnumerable)">
            <summary>
            IsNullEmpty
            </summary>
            <param name="source">IEnumerable扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转DataTable
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="varlist">IEnumerable扩展</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ToDataTable2``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转DataTable
            </summary>
            <typeparam name="T">实体</typeparam>
            <param name="enumerable">IEnumerable扩展</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ToPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页
            </summary>
            <example>
            <code>
            IList&lt;UC_Member> list = LMS_TaskFactory.Instance().SelectTaskUserDetail(taskid).ToPage&lt;UC_Member>(1, 10, out totals);
            </code>
            </example>
            <typeparam name="TSource">实体</typeparam>
            <param name="varlist">IEnumerable扩展</param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">每页多少条记录</param>
            <param name="totalRecords">总记录数</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ToJson``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            ToJson 
            </summary>
            <example>
            <code>
            Msg.Write(LMS_TaskFactory.Instance().SelectTaskUserDetail(taskid).ToJson(p=> new { id = p.MemberID, name = p.RealName, account = p.Account }))
            </code>
            </example>
            <typeparam name="TSource">实体</typeparam>
            <typeparam name="TResult">目标类型</typeparam>
            <param name="varlist">IEnumerable扩展</param>
            <param name="selector">选择器</param>
            <returns>ToJson字符串</returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ConvertTo``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            LIST 类型转换 性能低
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <returns>LIST</returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历LIST
            </summary>
            <example>
            <code>
            list3 = list3.ForEach(p => {
                switch (p.TaskType) {
                    case 1: 
                        var l = cclist.Where(c => c.TaskDetailID == p.TaskDetailID).ToList(); 
                        p.ResourceName = l.Count==0 ? "" : l.FirstOrDefault().ResourceName; break;
                    case 2: 
                        l = ctlist.Where(c => c.TaskDetailID == p.TaskDetailID).ToList(); 
                        p.ResourceName = l.Count==0 ? "" : l.FirstOrDefault().ResourceName; break;
                    case 3: 
                         l = tclist.Where(c => c.TaskDetailID == p.TaskDetailID).ToList(); 
                         p.ResourceName = l.Count==0 ? "" : l.FirstOrDefault().ResourceName; break;
                    case 4: 
                        l = talist.Where(c => c.TaskDetailID == p.TaskDetailID).ToList(); 
                        p.ResourceName = l.Count==0 ? "" : l.FirstOrDefault().ResourceName; break;
                    case 5: p.ResourceName = list5.Where(c => c.TaskDetailID == p.TaskDetailID).ToList().FirstOrDefault().ResourceName; break;
                    case 6: p.ResourceName = list6.Where(c => c.TaskDetailID == p.TaskDetailID).ToList().FirstOrDefault().ResourceName; break;
                    case 7: p.ResourceName = list7.Where(c => c.TaskDetailID == p.TaskDetailID).ToList().FirstOrDefault().ResourceName; break;
                    case 8: p.ResourceName = list8.Where(c => c.TaskDetailID == p.TaskDetailID).ToList().FirstOrDefault().ResourceName; break;
                }
            }).ToList();
            </code>
            </example>
            <typeparam name="T">源类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <param name="action">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            遍历LIST
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <param name="action">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            遍历LIST
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="items">IEnumerable扩展</param>
            <param name="odd">奇数动作</param>
            <param name="even">偶数动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.GroupEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            分组
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="enumeration">IEnumerable扩展</param>
            <param name="count">记录数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            存在
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="enumeration">IEnumerable扩展</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            存在
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="enumeration">IEnumerable扩展</param>
            <param name="value">值</param>
            <param name="comparer">比较</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            存在
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="enumeration">IEnumerable扩展</param>
            <param name="value">值</param>
            <param name="startIndex">开始位置</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            存在
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="enumeration">IEnumerable扩展</param>
            <param name="value">值</param>
            <param name="startIndex">开始位置</param>
            <param name="comparer">比较</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.IndexOfPrevious``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            上一个存在
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="items">IEnumerable扩展</param>
            <param name="value">值</param>
            <param name="fromIndex">位置</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Flatten
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="inputs">IEnumerable扩展</param>
            <param name="enumerate">Func委托函数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Flatten(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            Flatten
            </summary>
            <param name="inputs">IEnumerable扩展</param>
            <param name="enumerate">Func委托函数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历
            </summary>
            <example>
            <code>
            list3.Do&lt;UC_Member>((s)=>{ Msg.Write(s.MemberID); });
            </code>
            </example>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <param name="action">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Do(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            遍历 (s)
            </summary>
            <example>
            <code>
            list3.Do((s)=>{ Msg.Write(s); });
            </code>
            </example>
            <param name="source">IEnumerable扩展</param>
            <param name="action">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            遍历 (s, i)
            </summary>
            <example>
            <code>
            list3.Do&lt;UC_Member>((s, i)=>{ Msg.Write(s.MemberID + "|" + i); });
            </code>
            </example>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <param name="action">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Do(System.Collections.IEnumerable,System.Action{System.Object,System.Int32})">
            <summary>
            遍历 (s,i)
            </summary>
            <param name="source">IEnumerable扩展</param>
            <param name="action">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerator{``0},System.Collections.Generic.IEnumerator{``0})">
            <summary>
            左边两个LIST连接
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="left">IEnumerable扩展</param>
            <param name="right">IEnumerable</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerator{``0},``0)">
            <summary>
            右边连接
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="left">IEnumerable扩展</param>
            <param name="last">IEnumerable</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            分割
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32})">
            <summary>
            分隔 start
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <param name="start">开始位置</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            分隔 start/end
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <param name="start">开始</param>
            <param name="stop">结束</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            分隔 start/end/step
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <param name="start">开始</param>
            <param name="stop">结束</param>
            <param name="step">步长</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.CopyAllToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            复制TOLIST
            </summary>
            <typeparam name="TObject">源类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ConvertFirstSpecification``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Predicate{``0})">
            <summary>
            转换符合条件的第一个元素
            </summary>
            <typeparam name="TObject">源类型</typeparam>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <param name="converter">Func委托函数</param>
            <param name="predicate">字段</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.FindFirstSpecification``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            FindFirstSpecification 返回符合条件的第一个元素
            </summary>
            <typeparam name="TObject">源类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <param name="predicate">字段</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ToReadOnlyCollection``1(System.Collections.IEnumerable)">
            <summary>
            只读ReadOnlyCollection
            </summary>
            <typeparam name="TDestination">源类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.AsReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            只读ReadOnlyCollection
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="this">IEnumerable扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转HashSet
            </summary>
            <typeparam name="TDestination">源类型</typeparam>
            <param name="source">IEnumerable扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            ToStack
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="enumerable">IEnumerable扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            ToQueue
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="enumerable">IEnumerable扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ToCSV``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            转CSV结构
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="collection">IEnumerable扩展</param>
            <param name="delim">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Exist``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            存在
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="coll">IEnumerable扩展</param>
            <param name="predicate">字段</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            转换
            </summary>
            <typeparam name="TInput">源类型</typeparam>
            <typeparam name="TOutput">返回类型</typeparam>
            <param name="coll">IEnumerable扩展</param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            连接成字符串
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="target">IEnumerable扩展</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Join(System.Collections.IEnumerable,System.String)">
            <summary>
            连接成字符串
            </summary>
            <param name="target">IEnumerable扩展</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            去重复
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            去重复
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Distinct``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            去重复 加上Linq to XXX的支持
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Rand``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            随机打乱顺序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.Add``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            添加项
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">IList列表</param>
            <param name="item">值</param>
            <returns>IList列表</returns>
        </member>
        <member name="M:Pub.Class.IEnumerableExtensions.AddUnique``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            添加唯一项
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">IList列表</param>
            <param name="item">值</param>
            <returns>IList列表</returns>
        </member>
        <member name="T:Pub.Class.WriterLockSlimDisposable">
            <summary>
            写锁自动释放
            
            修改纪录
                2012.03.06 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            private static readonly ReaderWriterLockSlim Locker = new ReaderWriterLockSlim();
            using (new WriteLockSlimDisposable(Locker)) { }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.WriterLockSlimDisposable.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            构造器
            </summary>
            <param name="rwLock">ReaderWriterLockSlim 锁</param>
        </member>
        <member name="M:Pub.Class.WriterLockSlimDisposable.System#IDisposable#Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:Pub.Class.ReaderLockSlimDisposable">
            <summary>
            读锁自动释放
            
            修改纪录
                2012.03.06 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            private static readonly ReaderWriterLockSlim Locker = new ReaderWriterLockSlim();
            using (new ReaderLockSlimDisposable(Locker)) { }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.ReaderLockSlimDisposable.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            构造器
            </summary>
            <param name="rwLock">ReaderWriterLockSlim 锁</param>
        </member>
        <member name="M:Pub.Class.ReaderLockSlimDisposable.System#IDisposable#Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:Pub.Class.IPScanner">
            <summary>
            IPScanner QQwryIP操作类
            
            修改纪录
                2007.04.20 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            IPScanner ips = new IPScanner();
            ips.DataPath = "c:\\QQwry.dat"; //QQwryIP数据文件
            ips.IP = Request2.GetIP();
            ips.IPLocation();
            
            ips.IPLocation("c:\\QQwry.dat", Request2.GetIP());
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.IPScanner.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Pub.Class.IPScanner.QQwry">
            <summary>
            搜索匹配数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IPScanner.IPLocation">
            <summary>
            获取IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IPScanner.IPLocation(System.String,System.String)">
            <summary>
            获取IP地址
            </summary>
            <param name="dataPath">QQwry.dat文件路径</param>
            <param name="ip">IP</param>
            <returns></returns>
        </member>
        <member name="P:Pub.Class.IPScanner.DataPath">
            <summary>
            QQwry路经
            </summary>
        </member>
        <member name="P:Pub.Class.IPScanner.IP">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Pub.Class.IPScanner.Country">
            <summary>
            国家
            </summary>
        </member>
        <member name="P:Pub.Class.IPScanner.Local">
            <summary>
            地区
            </summary>
        </member>
        <member name="P:Pub.Class.IPScanner.ErrMsg">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Pub.Class.IPScanner.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="T:Pub.Class.FloatExtensions">
            <summary>
            Float扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.FloatExtensions.PercentageOf(System.Single,System.Int32)">
            <summary>
            百分率 
            </summary>
            <param name="value"></param>
            <param name="percentOf"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.FloatExtensions.PercentageOf(System.Single,System.Single)">
            <summary>
            百分率
            </summary>
            <param name="value"></param>
            <param name="percentOf"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.FloatExtensions.PercentageOf(System.Single,System.Double)">
            <summary>
            百分率
            </summary>
            <param name="value"></param>
            <param name="percentOf"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.FloatExtensions.PercentageOf(System.Single,System.Int64)">
            <summary>
            百分率
            </summary>
            <param name="value"></param>
            <param name="percentOf"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.FloatExtensions.ToCurrency(System.Int32)">
            <summary>
            金额 三位,分割
            </summary>
            <param name="value">值</param>
            <returns>金额 三位,分割</returns>
        </member>
        <member name="M:Pub.Class.FloatExtensions.Round(System.Single,System.Int32)">
            <summary>
            保留decimalPoints位小数
            </summary>
            <param name="val">值</param>
            <param name="decimalPoints">小数位数</param>
            <returns>保留decimalPoints位小数</returns>
        </member>
        <member name="M:Pub.Class.FloatExtensions.Round2(System.Single)">
            <summary>
            保留2位小数
            </summary>
            <param name="val">值</param>
            <returns>保留2位小数</returns>
        </member>
        <member name="T:Pub.Class.IListExtensions">
            <summary>
            IList扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.IListExtensions.IsNullEmpty(System.Collections.IList)">
            <summary>
            是否空
            </summary>
            <param name="self">List扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.IListExtensions.Map``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            遍历
            </summary>
            <typeparam name="T">源类型</typeparam>
            <typeparam name="K">返回值类型</typeparam>
            <param name="list">IList&lt;T>扩展</param>
            <param name="function">Func委托函数</param>
            <returns>IList&lt;K></returns>
        </member>
        <member name="M:Pub.Class.IListExtensions.Split``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            将IList&lt;T>按指定行分组成IList&lt;IList&lt;T>>
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="list">List扩展</param>
            <param name="Count">长度</param>
            <returns>新列表</returns>
        </member>
        <member name="M:Pub.Class.IListExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            x y对调
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="obj">List扩展</param>
            <param name="x">x位置</param>
            <param name="y">y位置</param>
        </member>
        <member name="M:Pub.Class.IListExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Int32@)">
            <summary>
            BinarySearch 从已排序的列表中，采用二分查找找到目标在列表中的位置。
            如果刚好有个元素与目标相等，则返回true，且minIndex会被赋予该元素的位置；否则，返回false，且minIndex会被赋予比目标小且最接近目标的元素的位置
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="sortedList">List扩展</param>
            <param name="target">值</param>
            <param name="minIndex">最小位置</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IListExtensions.GetIntersection``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            GetIntersection 高效地求两个List元素的交集。
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="list1">List扩展</param>
            <param name="list2">list2</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IListExtensions.GetUnion``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            GetUnion 高效地求两个List元素的并集。
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="list1">List扩展</param>
            <param name="list2">list2</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IListExtensions.InParallel(System.Collections.Generic.List{System.Threading.ThreadStart})">
            <summary>
            多个线程并行执行
            </summary>
            <param name="tasks">多任务</param>
        </member>
        <member name="M:Pub.Class.IListExtensions.InParallel(System.Collections.Generic.List{System.Threading.ThreadStart},System.Int32)">
            <summary>
            多个线程并行执行
            </summary>
            <param name="tasks">多任务</param>
            <param name="maxThreads">线程数</param>
        </member>
        <member name="M:Pub.Class.IListExtensions.Rand``1(System.Collections.Generic.IList{``0})">
            <summary>
            随机打乱顺序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IListExtensions.ToUrl(System.Collections.Generic.IList{Pub.Class.UrlParameter})">
            <summary>
            LIST参数转为URL参数
            </summary>
            <param name="param">LIST参数</param>
            <returns>URL参数</returns>
        </member>
        <member name="M:Pub.Class.IListExtensions.ToUrlEncode(System.Collections.Generic.IList{Pub.Class.UrlParameter})">
            <summary>
            LIST参数转为URL参数
            </summary>
            <param name="param">LIST参数</param>
            <returns>URL参数</returns>
        </member>
        <member name="M:Pub.Class.IListExtensions.Add``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            添加项
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">IList列表</param>
            <param name="item">值</param>
            <returns>IList列表</returns>
        </member>
        <member name="M:Pub.Class.IListExtensions.AddUnique``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            添加唯一项
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">IList列表</param>
            <param name="item">值</param>
            <returns>IList列表</returns>
        </member>
        <member name="T:Pub.Class.IntExtensions">
            <summary>
            int扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.IntExtensions.IsMod(System.Int32,System.Int32)">
            <summary>
            整除否
            </summary>
            <param name="iInt">int扩展</param>
            <param name="val">除数</param>
            <returns>整除否</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.IsOdd(System.Int32)">
            <summary>
            奇数的, 单数的
            </summary>
            <param name="value">int扩展</param>
            <returns>奇数的, 单数的</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.IsEven(System.Int32)">
            <summary>
            被2整除否 偶数
            </summary>
            <param name="iInt">int扩展</param>
            <returns>被2整除否 偶数</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.IsPrime``1(System.Int32)">
            <summary>
            素数否
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ToBeChecked">int扩展</param>
            <returns>素数否</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.YearsAgo(System.Int32)">
            <summary>
            多少年前
            </summary>
            <param name="years">int扩展</param>
            <returns>多少年前</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.MonthsAgo(System.Int32)">
            <summary>
            多少月前
            </summary>
            <param name="months">int扩展</param>
            <returns>多少月前</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.DaysAgo(System.Int32)">
            <summary>
            多少天前
            </summary>
            <param name="days">int扩展</param>
            <returns>多少天前</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.HoursAgo(System.Int32)">
            <summary>
            多少小时前
            </summary>
            <param name="hours">int扩展</param>
            <returns>多少小时前</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.MinutesAgo(System.Int32)">
            <summary>
            多少分钟前
            </summary>
            <param name="minutes">int扩展</param>
            <returns>多少分钟前</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.SecondsAgo(System.Int32)">
            <summary>
            多少秒前
            </summary>
            <param name="seconds">int扩展</param>
            <returns>多少秒前</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.ToBool(System.Int32)">
            <summary>
            大于0 TRUE
            </summary>
            <param name="val">int扩展</param>
            <returns>大于0 TRUE</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.True(System.Int32)">
            <summary>
            True
            </summary>
            <param name="iBool">int扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.False(System.Int32)">
            <summary>
            False
            </summary>
            <param name="iBool">int扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.PercentageOf(System.Int32,System.Int32)">
            <summary>
            百分率
            </summary>
            <param name="number">int扩展</param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.PercentOf(System.Int32,System.Int32)">
            <summary>
            百分之
            </summary>
            <param name="position">int扩展</param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.PercentOf(System.Nullable{System.Int32},System.Int32)">
            <summary>
            百分之
            </summary>
            <param name="position">int扩展</param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.PercentageOf(System.Int32,System.Single)">
            <summary>
            百分率
            </summary>
            <param name="number">int扩展</param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.PercentOf(System.Int32,System.Single)">
            <summary>
            百分之
            </summary>
            <param name="position">int扩展</param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.PercentageOf(System.Int32,System.Double)">
            <summary>
            百分率
            </summary>
            <param name="number">int扩展</param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.PercentOf(System.Int32,System.Double)">
            <summary>
            百分之
            </summary>
            <param name="position">int扩展</param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.PercentageOf(System.Int32,System.Decimal)">
            <summary>
            百分率
            </summary>
            <param name="number">int扩展</param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.PercentOf(System.Int32,System.Decimal)">
            <summary>
            百分之
            </summary>
            <param name="position">int扩展</param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.PercentageOf(System.Int32,System.Int64)">
            <summary>
            百分率
            </summary>
            <param name="number">int扩展</param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.PercentOf(System.Int32,System.Int64)">
            <summary>
            百分之
            </summary>
            <param name="position">int扩展</param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.Sleep(System.Int32)">
            <summary>
            延时 1000为一秒
            </summary>
            <param name="ms">int扩展</param>
            <returns>延时 1000为一秒</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.Jammer(System.Int32)">
            <summary>
            生成干扰码
            </summary>
            <param name="len">int扩展</param>
            <returns>生成干扰码</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            IsBetween
            </summary>
            <param name="i">int扩展</param>
            <param name="lowerBound">最小</param>
            <param name="upperBound">最大</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.IsBetween(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            IsBetween
            </summary>
            <param name="i">int扩展</param>
            <param name="lowerBound">最小</param>
            <param name="upperBound">最大</param>
            <param name="includeBounds">是否包含最小最大值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.ToTimeSpan(System.Int32)">
            <summary>
            时间差
            </summary>
            <param name="integer">int扩展</param>
            <returns>时间差</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.FormatKB(System.Int32)">
            <summary>
            文件大小格式化 最小KB
            </summary>
            <param name="bytes">int扩展</param>
            <returns>文件大小格式化 最小KB</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.FormatBytes(System.Int32)">
            <summary>
            文件大小格式化
            </summary>
            <param name="bytes">int扩展</param>
            <returns>文件大小格式化 最小KB</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.Range(System.Int32,System.Int32)">
            <summary>
            生成 start/end数组
            </summary>
            <param name="start">int扩展</param>
            <param name="end">end</param>
            <returns>生成 start/end数组</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.ToOctal(System.Int32)">
            <summary>
            8进制
            </summary>
            <param name="n">int扩展</param>
            <returns>8进制</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.ToOctal(System.Int64)">
            <summary>
            8进制
            </summary>
            <param name="n">int扩展</param>
            <returns>8进制</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.ToTime(System.Int32)">
            <summary>
            转时间
            </summary>
            <param name="seconds">int扩展</param>
            <returns>转时间 1:12:12</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.ToEnum``1(System.Int32)">
            <summary>
            转Enum
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="number">int扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.ToCurrency(System.Int32)">
            <summary>
            金额 三位,分割
            </summary>
            <param name="value">int扩展</param>
            <returns>金额 三位,分割</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.ToRMB(System.Int32)">
            <summary>
            人民币转大写
            </summary>
            <param name="value">int扩展</param>
            <returns>人民币转大写</returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.IfEqual(System.Int32,System.Int32,System.Int32)">
            <summary>
            如果等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.IfNotEqual(System.Int32,System.Int32,System.Int32)">
            <summary>
            如果不等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.IfMoreThan(System.Int32,System.Int32,System.Int32)">
            <summary>
            如果大于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.IfLessThan(System.Int32,System.Int32,System.Int32)">
            <summary>
            如果小于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.IfMoreThanOrEqual(System.Int32,System.Int32,System.Int32)">
            <summary>
            如果大于等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IntExtensions.IfLessThanOrEqual(System.Int32,System.Int32,System.Int32)">
            <summary>
            如果小于等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.ClassExtensions">
            <summary>
            类方法扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.ClassExtensions.ToJson``2(``0,System.Func{``0,``1})">
            <summary>
            实体类 ToJson 筛选部分字段
            </summary>
            <example>
            <code>
            Msg.WriteEnd(LMS_TaskDetailFactory.Instance().SelectByID(id).ToJson(p => new { p.TaskID, p.TaskName }));
            </code>
            </example>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="entity">源</param>
            <param name="selector">选择器</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.SelectEntity``2(``0,System.Func{``0,``1})">
            <summary>
            实体类 筛选部分字段
            </summary>
            <example>
            <code>
            var t = LMS_TaskDetailFactory.Instance().SelectByID(id).Select(p => new { p.TaskID, p.TaskName }));
            </code>
            </example>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="entity">源</param>
            <param name="selector">选择器</param>
            <returns>实体类</returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.In``1(``0,``0[])">
            <summary>
            T 是否在 数组中 "333".EqualsAny("111", "222", "333")
            </summary>
            <example>
            <code>
            "333".EqualsAny("111", "222", "333")
            </code>
            </example>
            <typeparam name="T">参数类型</typeparam>
            <param name="obj">参数值</param>
            <param name="values">params 数组</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.IsBetween``1(``0,``0,``0)">
            <summary>
            T 是否 在minValue/maxValue 之间包含minValue/maxValue "222".IsBetween("111", "333")
            </summary>
            <example>
            <code>
            "222".IsBetween("111", "333")
            </code>
            </example>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">参数值</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.IsBetween``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            T 是否 在minValue/maxValue 之间包含minValue/maxValue 
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="value">参数值</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="comparer"></param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.Clone``1(``0)">
            <summary>
            对像克隆
            </summary>
            <example>
            <code>
            "test".Clone&lt;string>();
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="o">值</param>
            <returns>新对像</returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.ToBinaryDeflateCompress``1(``0)">
            <summary>
            对像序列化后压缩
            </summary>
            <typeparam name="T">对像/类型</typeparam>
            <param name="o">字节</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.Pipe``2(``0,System.Func{``0,``1})">
            <summary>
            管道 T传入函数执行返回R "1".Pipe&lt;string, int>((s) => { return s.ToInt() + 1; })
            </summary>
            <example>
            <code>
            "1".Pipe&lt;string, int>((s) => { return s.ToInt() + 1; })
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <typeparam name="R">返回值类型</typeparam>
            <param name="o">入口参数值</param>
            <param name="action">函数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.Pipe``1(``0,System.Action{``0})">
            <summary>
            管道 T传入动作执行 "1".Pipe&lt;string>((s) => { s= s + 1; }) 结果是T
            </summary>
            <example>
            <code>
            "1".Pipe&lt;string>((s) => { s= s + 1; })
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="o">入口参数值</param>
            <param name="action">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.IsDefault``1(``0)">
            <summary>
            默认值
            </summary>
            <example>
            <code>
            0.IsDefault&lt;int>();
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="value">类型值</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.If``1(``0,System.Predicate{``0},``0)">
            <summary>
            如果操作 1.If(i => i &lt; 0, 0)
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">值</param>
            <param name="predicate">条件</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.NotIf``1(``0,System.Predicate{``0},``0)">
            <summary>
            非如果操作 1.NotIf(i => i &lt; 0, 0)
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">值</param>
            <param name="predicate">条件</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.If``1(``0,System.Predicate{``0},System.Action{``0})">
            <summary>
            如果操作 If 1.If(i => i &lt; 0, i => { })
            </summary>
            <example>
            <code>
            If 1.If(i => i &lt; 0, i => { })
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="t">值</param>
            <param name="predicate">条件</param>
            <param name="action">动作</param>
        </member>
        <member name="M:Pub.Class.ClassExtensions.If``1(``0,System.Predicate{``0},System.Func{``0,``0})">
            <summary>
            如果操作 If int val = 1.If(i => i &lt; 0, i => 0)
            </summary>
            <example>
            <code>
            If int val = 1.If(i => i &lt; 0, i => 0)
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="t">值</param>
            <param name="predicate">条件</param>
            <param name="func">函数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.If``1(``0,System.Predicate{``0},System.Action{``0},System.Action{``0})">
            <summary>
            如果操作  1.If(i => i &lt; 0, i => { }, i => { })
            </summary>
            <example>
            <code>
            1.If(i => i &lt; 0, i => { }, i => { })
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="t">值</param>
            <param name="predicate">条件</param>
            <param name="action1">动作1</param>
            <param name="action2">动作2</param>
        </member>
        <member name="M:Pub.Class.ClassExtensions.If``1(``0,System.Predicate{``0},System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
            如果操作 int val = 1.If(i => i &lt; 0, i => 0, i => i)
            </summary>
            <example>
            <code>
            int val = 1.If(i => i &lt; 0, i => 0, i => i)
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="t">值</param>
            <param name="predicate">条件</param>
            <param name="func1">函数1</param>
            <param name="func2">函数2</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.While``1(``0,System.Predicate{``0},System.Action{``0})">
            <summary>
            While循环操作 1.While(i => i &lt; 0, i => { Msg.WriteEnd(i); })
            </summary>
            <example>
            <code>
            1.While(i => i &lt; 0, i => { Msg.WriteEnd(i); })
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="t">值</param>
            <param name="predicate">条件</param>
            <param name="action">动作</param>
        </member>
        <member name="M:Pub.Class.ClassExtensions.ToXDocument``1(``0)">
            <summary>
            T 序列化成 XDocument
            </summary>
            <example>
            <code>
            "test".ToXDocument&lt;string>();
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="obj">值</param>
            <returns>XDocument</returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.ToHex(System.Drawing.Color)">
            <summary>
            Color 转16进制字符串
            </summary>
            <param name="c">Color</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.GetDescendants``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Predicate{``0})">
            <summary>
            树查询  不包含女性及其子孙：var p1 = people.GetDescendants(p => p.IsMale ? p.Children : Enumerable.Empty&lt;People>(), p =>p.IsMale);
            </summary>
            <example>
            <code>
            public abstract class People{
                public bool IsMale { get; private set; }
                public abstract IEnumerable&lt;People> Children { get; }
            }
            不包含女性及其子孙：var p1 = people.GetDescendants(p => p.IsMale ? p.Children : Enumerable.Empty&lt;People>(), p =>p.IsMale);
            不包含女性及其子孙：var p1 = people.GetDescendants(p => p.IsMale ? p.Children : Enumerable.Empty&lt;People>(), p =>p.IsMale);
            包含女性但不包含其子孙: var p2 = people.GetDescendants(p => p.IsMale ? p.Children : Enumerable.Empty&lt;People>(), null);
            获取所有子孙: var descendants = people.GetDescendants(p => p.Children, null);
            获取所有男性子孙： var males = people.GetDescendants(p => p.Children, p => p.IsMale);
            </code>
            </example>
            <typeparam name="T">类型</typeparam>
            <param name="root">值</param>
            <param name="childSelector">函数</param>
            <param name="filter">条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.GetDescendants``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``1}},System.Predicate{``1})">
            <summary>
            树查询 
            </summary>
            <example>
            <code>
            获取TreeView中所有以“酒”结尾的树结点: var treeViewNode = treeView1.GetDescendants(treeView => treeView.Nodes.Cast&lt;TreeNode>(),treeNode => treeNode.Nodes.Cast&lt;TreeNode>(),treeNode => treeNode.Text.EndsWith("酒"));
            </code>
            </example>
            <typeparam name="TRoot">根类型</typeparam>
            <typeparam name="T">类型</typeparam>
            <param name="root">根值</param>
            <param name="rootChildSelector">函数</param>
            <param name="childSelector">子选择</param>
            <param name="filter">条件</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            存在
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="c">IEnumerable</param>
            <param name="t">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.Concat``1(``0,System.Collections.Generic.IEnumerator{``0})">
            <summary>
            左边连接
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="first">值</param>
            <param name="right">IEnumerator</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.IfNull``1(``0,System.Func{``0})">
            <summary>
            如果对象为null则调用函数委托并返回函数委托的返回值。否则返回对象本身
            </summary>
            <param name="obj">对象</param>
            <param name="func">对象为null时用于调用的函数委托</param>
            <returns>如果对象不为null则返回对象本身，否则返回<paramref name="func"/>函数委托的返回值</returns>
            <example>
            <code>
            string v = null;
            string d = v.IfNull&lt;string&gt;(()=>"v is null");  //d = "v is null";
            string t = d.IfNull(() => "d is null");              //t = "v is null";
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.ClassExtensions.IfNull(System.Object,System.Object)">
            <summary>
            如果空
            </summary>
            <param name="obj">对像</param>
            <param name="defaultValue">默认值</param>
            <returns>object</returns>
        </member>
        <member name="M:Pub.Class.ClassExtensions.IfNull``1(``0,``0)">
            <summary>
            如果空
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">对像</param>
            <param name="defaultValue">默认值</param>
            <returns>T</returns>
        </member>
        <member name="T:Pub.Class.TimerFormat">
            <summary>
            时间单位
            </summary>
        </member>
        <member name="F:Pub.Class.TimerFormat.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:Pub.Class.TimerFormat.Day">
            <summary>
            天
            </summary>
        </member>
        <member name="F:Pub.Class.TimerFormat.Week">
            <summary>
            周
            </summary>
        </member>
        <member name="F:Pub.Class.TimerFormat.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Pub.Class.TimerFormat.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="T:Pub.Class.TaskInfo">
            <summary>
            定时执行任务实体类
            
            修改纪录
                2012.02.17 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.TaskInfo.#ctor">
            <summary>
            构造器 初始化数据
            </summary>
        </member>
        <member name="P:Pub.Class.TaskInfo.Interval">
            <summary>
            指定每多少秒执行
            </summary>
        </member>
        <member name="P:Pub.Class.TaskInfo.HHmm">
            <summary>
            指定具体的时间执行
            </summary>
        </member>
        <member name="P:Pub.Class.TaskInfo.Class">
            <summary>
            动态调用的类名 如:Pub.Class.SharpZip.Compress
            </summary>
        </member>
        <member name="P:Pub.Class.TaskInfo.Assembly">
            <summary>
            动态调用的DLL或程序集 如：Pub.Class.SharpZip或plugin/Pub.Class.SharpZip.dll
            </summary>
        </member>
        <member name="P:Pub.Class.TaskInfo.Parameter">
            <summary>
            动态调用的时候传参数
            </summary>
        </member>
        <member name="P:Pub.Class.TaskInfo.Degree">
            <summary>
            执行次数 0为无限次
            </summary>
        </member>
        <member name="P:Pub.Class.TaskInfo.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Pub.Class.TasksTimer">
            <summary>
            批量定时执行任务
            
            修改纪录
                2012.02.17 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            TasksTimer.AddTask(new TaskInfo() { Assembly = "Pub.Class.JobTest", Class = "Pub.Class.JobTest.Job1", Interval = 2 });
            TasksTimer.AddTask(new TaskInfo() { Assembly = "Pub.Class.JobTest", Class = "Pub.Class.JobTest.Job2", Interval = 4 });
            TasksTimer.AddTask(new TaskInfo() { Assembly = "Pub.Class.JobTest", Class = "Pub.Class.JobTest.Job3", Interval = 1, Degree = 5 });
            TasksTimer.AddTask(new TaskInfo() { Assembly = "Pub.Class.JobTest", Class = "Pub.Class.JobTest.Job4", HHmm = "14:05", Parameter = "job4" });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.TasksTimer.AddTasks(System.Collections.Generic.IList{Pub.Class.TaskInfo})">
            <summary>
            批量添加任务
            </summary>
            <param name="taskInfoList">任务列表</param>
        </member>
        <member name="M:Pub.Class.TasksTimer.AddTask(Pub.Class.TaskInfo)">
            <summary>
            添加任务
            </summary>
            <param name="task">任务</param>
        </member>
        <member name="M:Pub.Class.TasksTimer.RemoveTask(System.String)">
            <summary>
            删除一个任务
            </summary>
            <param name="className">类名</param>
        </member>
        <member name="M:Pub.Class.TasksTimer.RemoveAll">
            <summary>
            删除所有任务
            </summary>
        </member>
        <member name="T:Pub.Class.TaskTimer">
            <summary>
            定时执行线程安全
            
            修改纪录
                2011.07.08 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            TaskTimer.Instance().Start(()=>{},1);
            TaskTimer.Instance().Start(()=>{},"01:00");
            TaskTimer.Instance().Stop();
            </code>
            </example>
            </summary>
        </member>
        <member name="F:Pub.Class.TaskTimer.task">
            <summary>
            TaskTimer 实例
            </summary>
        </member>
        <member name="M:Pub.Class.TaskTimer.Instance(System.Boolean)">
            <summary>
            单实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.TaskTimer.Instance">
            <summary>
            单实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.Timer">
            <summary>
            定时执行
            
            修改纪录
                2012.02.17 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            Timer timer = new Timer();
            timer.Start(()=>{},"01:00");
            timer.Stop();
            
            Timer timer = new Timer();
            timer.Action = ()=>{};
            timer.HHmm = "01:00"; 或 timer.Interval = 1;
            timer.Start();
            timer.Stop();
            </code>
            </example>
            </summary>
        </member>
        <member name="F:Pub.Class.Timer.exec">
            <summary>
            执行动作
            </summary>
        </member>
        <member name="M:Pub.Class.Timer.#ctor(System.Boolean)">
            <summary>
            构造器
            </summary>
            <param name="useThread">是否使线程</param>
        </member>
        <member name="M:Pub.Class.Timer.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Pub.Class.Timer.Start(System.Action,System.Int32,System.Int32)">
            <summary>
            每interval秒执行
            </summary>
            <param name="action">动作</param>
            <param name="interval">秒</param>
            <param name="degree">次数</param>
        </member>
        <member name="M:Pub.Class.Timer.Start(System.Action,System.String,System.Int32,Pub.Class.TimerFormat)">
            <summary>
            具体什么时间执行
            </summary>
            <param name="action">动作</param>
            <param name="HHmm">时分</param>
            <param name="degree">次数</param>
            <param name="format">时间单位</param>
        </member>
        <member name="M:Pub.Class.Timer.Start(System.Action,System.Int32)">
            <summary>
            每1秒执行
            </summary>
            <param name="action">动作</param>
            <param name="degree">次数</param>
        </member>
        <member name="M:Pub.Class.Timer.Start(System.Int32)">
            <summary>
            开始执行
            </summary>
        </member>
        <member name="M:Pub.Class.Timer.timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            每interval秒执行
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Pub.Class.Timer.timer2_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            具体什么时间执行 HH:mm
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Pub.Class.Timer.Stop">
            <summary>
            停止执行
            </summary>
        </member>
        <member name="P:Pub.Class.Timer.Action">
            <summary>
            执行代码
            </summary>
        </member>
        <member name="P:Pub.Class.Timer.Interval">
            <summary>
            每多少秒执行
            </summary>
        </member>
        <member name="P:Pub.Class.Timer.HHmm">
            <summary>
            指定时间执行
            </summary>
        </member>
        <member name="P:Pub.Class.Timer.End">
            <summary>
            执行结束
            </summary>
        </member>
        <member name="T:Pub.Class.BinaryFormatterBytes">
            <summary>
            binary序列化和反序列化
            
            修改纪录
                2011.07.11 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            User u1 = new User() { UserID = 1000, Name = "熊华春" };
            var serialize = new BinarySerializeString();
            string s = serialize.Serialize(u1);
            serialize.Deserialize&lt;User>(s);
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.BinaryFormatterBytes.Serialize``1(``0)">
            <summary>
            序列成16进制字符串
            </summary>
            <param name="o">对像</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:Pub.Class.BinaryFormatterBytes.Deserialize``1(System.Byte[])">
            <summary>
            16进制字符串反序列化成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="data">16进制字符串</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.BinaryFormatterBytes.SerializeFile``1(``0,System.String)">
            <summary>
            序列成16进制字符串文件
            </summary>
            <param name="o">对像</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Pub.Class.BinaryFormatterBytes.DeserializeFile``1(System.String)">
            <summary>
            16进制字符串文件反序列化成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="fileName">文件名</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.BinaryFormatterBytes.SerializeEncode``1(``0,System.String)">
            <summary>
            序列成16进制字符串后DES加密
            </summary>
            <param name="o">对像</param>
            <param name="key">加密KEY</param>
            <returns>16进制字符串密文</returns>
        </member>
        <member name="M:Pub.Class.BinaryFormatterBytes.DecodeDeserialize``1(System.Byte[],System.String)">
            <summary>
            DES解密后反序列成对像
            </summary>
            <typeparam name="T">对像类型</typeparam>
            <param name="data">16进制字符串密文</param>
            <param name="key">解密KEY</param>
            <returns>对像</returns>
        </member>
        <member name="T:Pub.Class.PinYin">
            <summary>
            汉字转拼音
            
            修改纪录
                2008.01.21 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="F:Pub.Class.PinYin.uniPinYin">
            <summary>
            PinYin
            </summary>
        </member>
        <member name="M:Pub.Class.PinYin.Instance">
            <summary>
            唯一实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.PinYin.Search(System.String)">
            <summary>
            取拼音
            </summary>
            <param name="strVal">汉字</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.PinYin.SearchCap(System.String)">
            <summary>
            取拼音每个字的首字母
            </summary>
            <param name="strVal">汉字</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.PinYin.SearchCap(System.String,System.Int32)">
            <summary>
            取拼音每个字的首字母
            </summary>
            <param name="strVal">汉字</param>
            <param name="length">拼音字每长度</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.PinYin.GetExpressChar(System.String)">
            <summary>
            只取拼音首字母
            </summary>
            <param name="strVal">汉字</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.PinYin.Get16Encode(System.String)">
            <summary>
            获取单个字符对应16进制格式
            </summary>
            <param name="strEncode">单个字符</param>
            <returns>16进制</returns>
        </member>
        <member name="M:Pub.Class.PinYin.GetPYChar(System.String)">
            <summary>
            取单个字符的拼音
            </summary>
            <param name="c">要转换的单个汉字</param>
            <returns>拼音</returns>
        </member>
        <member name="T:Pub.Class.ArrayExtensions">
            <summary>
            数组扩展
            
            修改纪录
                2009.06.27 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.IsNullEmpty(System.Array)">
            <summary>
            Array数组是空 null or length=0
            </summary>
            <param name="array">Array数组</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.IsNullEmpty(System.Collections.ArrayList)">
            <summary>
            ArrayList数组是空 null or length=0
            </summary>
            <param name="list">ArrayList数组</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.GetInArrayID(System.String[],System.String,System.Boolean)">
            <summary>
            取字符串在数组中的位置
            </summary>
            <example>区分大小写：
            <code>
            Msg.WriteEnd("1,2,T,4".Split(',').GetInArrayID("T", false));
            </code>
            </example>
            <param name="stringArray">数组</param>
            <param name="strSearch">字符串</param>
            <param name="caseInsensetive">是否注意大小写</param>
            <returns>位置</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.GetInArrayID(System.String[],System.String)">
            <summary>
            取字符串在数组中的位置 不在乎大小写
            </summary>
            <example>
            <code>
            Msg.WriteEnd("1,2,3,4".Split(',').GetInArrayID("2"));
            </code>
            </example>
            <param name="stringArray">数组</param>
            <param name="strSearch">字符串</param>
            <returns>位置</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.RemoveDuplicates``1(``0[])">
            <summary>
            数组去除重复
            </summary>
            <example>
            <code>
            Msg.WriteEnd("1,2,T,2".Split(',').RemoveDuplicates&lt;string>().Length);
            </code>
            </example>
            <typeparam name="T">参数类型</typeparam>
            <param name="array">数组</param>
            <returns>去除重复的数组</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
            只取部分数据
            </summary>
            <example>
            <code>
            Msg.WriteEnd("1,2,T,2".Split(',').Slice&lt;string>(2,3).Length);
            </code>
            </example>
            <typeparam name="T">参数类型</typeparam>
            <param name="array">数组</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns>数组</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.Join``1(``0[],System.String)">
            <summary>
            数组合并成字符串
            </summary>
            <example>
            <code>
            string str = "1,2,3,4".Split(',').Join&lt;string>("|");
            </code>
            </example>
            <typeparam name="T">参数类型</typeparam>
            <param name="array">数组</param>
            <param name="splitStr">分隔符</param>
            <returns>合并后字符串</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.GetHtmlEncoding(System.Byte[],System.Text.Encoding)">
            <summary>
            取HTML内容编码 正则 utf8 gb_2312 utf_8 zh_cn 和前三位字节码
            </summary>
            <param name="bytes">字节流</param>
            <param name="defaultEncoding">默认编码</param>
            <returns>字节流使用的编码</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.ToImage(System.Byte[])">
            <summary>
            字节转图片
            </summary>
            <param name="bytes">图片字节</param>
            <returns>Image</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.ToFile(System.Byte[],System.String,System.IO.FileMode)">
            <summary>
            字节写到文件
            </summary>
            <param name="bytes">字节</param>
            <param name="fileName">方件名</param>
            <param name="fileMode">FileMode</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.FromBytes``1(System.Byte[],System.Boolean)">
            <summary>
            字节反序列化成对像
            </summary>
            <typeparam name="T">对像/类型</typeparam>
            <param name="data">字节</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.IsInArray(System.String[],System.String,System.Boolean)">
            <summary>
            字符串存在数组
            </summary>
            <example>
            <code>
            Msg.WriteEnd("1,2,T,4".Split(',').IsInArray("T", false));
            </code>
            </example>
            <param name="stringArray">字符串数组</param>
            <param name="strSearch">字符串</param>
            <param name="caseInsensetive">区分大小写</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.IsInArray(System.String[],System.String)">
            <summary>
            字符串存在数组 不区分大小写
            </summary>
            <example>
            <code>
            Msg.WriteEnd("1,2,T,4".Split(',').IsInArray("t"));
            </code>
            </example>
            <param name="stringarray">字符串数组</param>
            <param name="str">字符串</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.MD5(System.Byte[])">
            <summary>
            字节MD5
            </summary>
            <param name="bts">字节</param>
            <returns>MD5字符串</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.ToUTF8(System.Byte[])">
            <summary>
            UTF8字节转字符串
            </summary>
            <param name="characters">字节</param>
            <returns>字符串</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.FindMimeFromData(System.IntPtr,System.String,System.Byte[],System.Int32,System.String,System.Int32,System.IntPtr@,System.Int32)">
            <summary>
            FindMimeFromData urlmon.dll API
            </summary>
            <param name="pBC"></param>
            <param name="pwzUrl"></param>
            <param name="pBuffer"></param>
            <param name="cbSize"></param>
            <param name="pwzMimeProposed"></param>
            <param name="dwMimeFlags"></param>
            <param name="ppwzMimeOut"></param>
            <param name="dwReserved"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.GetMimeType(System.Byte[])">
            <summary>
            取数据文件的MIME
            </summary>
            <param name="data">字节</param>
            <returns>MIME如application/unknown</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.GZipCompress(System.Byte[])">
            <summary>
            GZip压缩
            </summary>
            <param name="Bytes">字节</param>
            <returns>字节</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.GZipDecompress(System.Byte[])">
            <summary>
            GZip解压
            </summary>
            <param name="Bytes">字节</param>
            <returns>字节</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.DeflateCompress(System.Byte[])">
            <summary>
            Deflate压缩字节
            </summary>
            <param name="Bytes">字节</param>
            <returns>字节</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.DeflateDecompress(System.Byte[])">
            <summary>
            Deflate解压字节
            </summary>
            <param name="Bytes">字节</param>
            <returns>字节</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.FromDeflateDecompressBinary``1(System.Byte[])">
            <summary>
            压缩并反序列化成对像
            </summary>
            <typeparam name="T">对像/类型</typeparam>
            <param name="compressedData">字节</param>
            <returns>对像</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.IsUnicode(System.Byte[])">
            <summary>
            Unicode编码否
            </summary>
            <param name="Input">字节</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.GetImageExtension(System.Byte[])">
            <summary>
            获取文件的真实后缀名。目前只支持JPG, GIF, PNG, BMP四种图片文件。
            </summary>
            <param name="fileData">文件字节流</param>
            <returns>JPG, GIF, PNG or null</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.IsImage(System.Byte[])">
            <summary>
            是否图片文件
            </summary>
            <param name="fileData">图片字节</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.ToHexString(System.Byte[])">
            <summary>
            转16进制字符串
            </summary>
            <param name="data">字节</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.ToBase64(System.Byte[])">
            <summary>
            base 64 string
            </summary>
            <param name="data">字节流</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ArrayExtensions.GetEncoding(System.Byte[])">
            <summary>
            返回Encoding
            </summary>
            <param name="data">字节流</param>
            <returns>Encoding</returns>
        </member>
        <member name="T:Pub.Class.Upload">
            <summary>
            上传文件类
            
            修改纪录
                2006.05.13 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.Upload.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Pub.Class.Upload.DoUpLoad(System.Web.UI.WebControls.FileUpload)">
            <summary>
            上传文件
            </summary>
            <param name="fileUpload">fileUpload组件</param>
        </member>
        <member name="P:Pub.Class.Upload.AllowedExtensions">
            <summary>
            允许上传的扩展名
            </summary>
        </member>
        <member name="P:Pub.Class.Upload.FilePath">
            <summary>
            文件保存到哪
            </summary>
        </member>
        <member name="P:Pub.Class.Upload.MaxFileSize">
            <summary>
            最大可上传文件大小
            </summary>
        </member>
        <member name="P:Pub.Class.Upload.RandNumbers">
            <summary>
            随机数
            </summary>
        </member>
        <member name="P:Pub.Class.Upload.isCreateFolderForNotExits">
            <summary>
            是否自动新建不存在的文件目录
            </summary>
        </member>
        <member name="P:Pub.Class.Upload.RndFileType">
            <summary>
            文件随机类型
            </summary>
        </member>
        <member name="P:Pub.Class.Upload.FileSize">
            <summary>
            返回文件大小
            </summary>
        </member>
        <member name="P:Pub.Class.Upload.FileName">
            <summary>
            返回文件名
            </summary>
        </member>
        <member name="P:Pub.Class.Upload.State">
            <summary>
            返回操作状态
            </summary>
        </member>
        <member name="T:Pub.Class.Upload.RandFileType">
            <summary>
            随机类型
            </summary>
        </member>
        <member name="F:Pub.Class.Upload.RandFileType.None">
            <summary>
            不随机
            </summary>
        </member>
        <member name="F:Pub.Class.Upload.RandFileType.FileName_DateTime">
            <summary>
            按日期随机
            </summary>
        </member>
        <member name="F:Pub.Class.Upload.RandFileType.FileName_RandNumber">
            <summary>
            按数字随机
            </summary>
        </member>
        <member name="F:Pub.Class.Upload.RandFileType.DateTime">
            <summary>
            日期随机
            </summary>
        </member>
        <member name="T:Pub.Class.Identify">
            <summary>
            验证码
            
            修改纪录
                2007.02.04 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.Identify.DrawIdentifyCode(System.String,System.Int32,System.Int32)">
            <summary>
            验证码绘图
            <example>
            <code>
                string strIdentifyCode = Pub.Class.Identify.IdentifyCode(4);
                Pub.Class.Identify.DrawIdentifyCode(strIdentifyCode, 50, 100);
                Response.End();
                在登录页面引用此文件:&lt;img src="Identify.aspx" border="0" style="cursor: pointer;cursor:hand;" onclick="javascript:this.src='Identify.aspx?iTime=' + Math.random();" title="单击可更换新的验证码" />
                Session["IdentifyCode"]
            </code>
            </example>
            </summary>
            <param name="strIdentifyCode">验证码</param>
            <param name="intFgNoise">文字噪音程度</param>
            <param name="intBgNoise">背景噪音程度</param>
        </member>
        <member name="M:Pub.Class.Identify.DrawIdentifyCode2(System.String)">
            <summary>
            运算验证码绘图
            </summary>
            <param name="checkCode">验证码</param>
        </member>
        <member name="M:Pub.Class.Identify.IdentifyCode(System.Int32)">
            <summary>
            取得随机字符串，并设置Session值
            </summary>
            <example>
            <code>
                string strIdentifyCode = Pub.Class.Identify.IdentifyCode(4);
                Pub.Class.Identify.DrawIdentifyCode(strIdentifyCode, 50, 100);
                Response.End();
                在登录页面引用此文件:&lt;img src="Valid.aspx"  border="0" />
                Session["IdentifyCode"]
            </code>
            </example>
            <param name="intLength">长</param>
            <returns>取得随机字符串</returns>
        </member>
        <member name="M:Pub.Class.Identify.IdentifyCode2">
            <summary>
            取得运算随机字符串，并设置Session值
            </summary>
        </member>
        <member name="T:Pub.Class.SerializeXml">
            <summary>
            写日志
            
            修改纪录
                2013.02.12 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeXml.#ctor(System.String,System.String)">
            <summary>
            构造器 指定DLL文件和全类名
            </summary>
            <param name="dllFileName">dll文件名</param>
            <param name="className">命名空间.类名</param>
        </member>
        <member name="M:Pub.Class.SerializeXml.#ctor(System.String)">
            <summary>
            构造器 指定classNameDllName(SerializeXmlProviderName) 默认Pub.Class.JavaScriptSerializerString
            </summary>
            <param name="classNameAndAssembly">命名空间.类名,程序集名称</param>
        </member>
        <member name="M:Pub.Class.SerializeXml.#ctor">
            <summary>
            构造器 从Web.config中读SerializeXmlProviderName 默认Pub.Class.SimpleSerializeString,Pub.Class
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeXml.Serialize``1(``0)">
            <summary>
             序列化
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeXml.Deserialize``1(System.String)">
            <summary>
             反序列化
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeXml.SerializeFile``1(``0,System.String)">
            <summary>
             序列化文件
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeXml.DeserializeFile``1(System.String)">
            <summary>
             反序列化文件
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeXml.SerializeEncode``1(``0,System.String)">
            <summary>
             序列化 DES加密
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeXml.DecodeDeserialize``1(System.String,System.String)">
            <summary>
             反序列化 DES解密
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeXml.ToXml``1(``0)">
            <summary>
             序列化
            </summary>
        </member>
        <member name="M:Pub.Class.SerializeXml.FromXml``1(System.String)">
            <summary>
             反序列化
            </summary>
        </member>
        <member name="P:Pub.Class.SerializeXml.ErrorMessage">
            <summary>
            出错消息
            </summary>
        </member>
        <member name="T:Pub.Class.IEmail">
            <summary>
            发送EMAIL接口
            
            修改纪录
                2012.02.20 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.IEmail.Send(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient)">
            <summary>
            发送EMAIL
            </summary>
            <param name="message">MailMessage</param>
            <param name="smtp">SmtpClient</param>
            <returns>true/false</returns>
        </member>
        <member name="P:Pub.Class.IEmail.ErrorMessage">
            <summary>
            出错消息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.PostQueueInfo">
            <summary>
            不能重复操作实体
            
            修改纪录
                2008.01.23 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="P:Pub.Class.PostQueueInfo.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Pub.Class.PostQueueInfo.IP">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Pub.Class.PostQueueInfo.Op">
            <summary>
            操作
            </summary>
        </member>
        <member name="P:Pub.Class.PostQueueInfo.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="T:Pub.Class.PostQueue">
            <summary>
            不能重复操作队列
            
            修改纪录
                2008.01.23 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            PostQueue.Length = 50; //队列最大长度
            PostQueue.MaxSecond = 5; //限制多少秒内不能相同操作
            PostQueue.MaxPosts = 0; //限制相同操作次数 默认0 0表示不限制
            PostQueue.Clear(); //清空队列
            PostQueue.RunContent("test"); //同一个IP不能提交相同的内容
            PostQueue.RunContent("insert course reply","test"); //课程评论时同一个IP不能提交相同的内容
            PostQueue.Run(); //同一个IP在5秒内不能提交相同的重复操作
            PostQueue.Run("insert course reply"); //同一个IP在5秒内不能回复课程重复操作
            </code>
            </example>
            </summary>
        </member>
        <member name="F:Pub.Class.PostQueue.Length">
            <summary>
            队列最大长度 默认50
            </summary>
        </member>
        <member name="F:Pub.Class.PostQueue.MaxSecond">
            <summary>
            限制多少秒内不能相同操作 默认5
            </summary>
        </member>
        <member name="F:Pub.Class.PostQueue.MaxPosts">
            <summary>
            限制相同操作次数 MaxSecond秒内最多允许提交MaxPosts次 默认0 0表示不限制
            </summary>
        </member>
        <member name="F:Pub.Class.PostQueue.list">
            <summary>
            队列数据
            </summary>
        </member>
        <member name="M:Pub.Class.PostQueue.Run(System.String)">
            <summary>
            限制用户操作 限制多少秒内不能相同操作
            </summary>
            <param name="op">操作 不能为空</param>
        </member>
        <member name="M:Pub.Class.PostQueue.Run">
            <summary>
            限制用户操作 限制多少秒内不能相同操作
            </summary>
        </member>
        <member name="M:Pub.Class.PostQueue.RunContent(System.String,System.String)">
            <summary>
            限制用户操作 不能提交相同的内容
            </summary>
            <param name="op">操作 不能为空</param>
            <param name="content">内容</param>
        </member>
        <member name="M:Pub.Class.PostQueue.RunContent(System.String)">
            <summary>
            限制用户操作 不能提交相同的内容
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Pub.Class.PostQueue.Clear">
            <summary>
            清空队列
            </summary>
        </member>
        <member name="T:Pub.Class.Net2">
            <summary>
            网络操作类
            
            修改纪录
                2006.05.08 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.Net2.ResponseFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="fileFile">文件路径（绝对路径）</param>
            <param name="newFileName">新文件名.扩展名（无路径）</param>
            <returns >返回文件是否存在，存在下载成功</returns>
        </member>
        <member name="M:Pub.Class.Net2.DownFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="url">url</param>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Net2.ResponseFile(System.String,System.String,System.String)">
            <summary>
            以指定的ContentType输出指定文件文件
            </summary>
            <param name="filepath">文件路径</param>
            <param name="filename">输出的文件名</param>
            <param name="filetype">将文件输出时设置的ContentType</param>
        </member>
        <member name="M:Pub.Class.Net2.GetHttpFile(System.String,System.String)">
            <summary>
            下载远程的文件
            </summary>
            <param name="sUrl">URL</param>
            <param name="sSavePath">保存到</param>
            <returns>成功否</returns>
            <example>
            <code>
            TimeSpan oStartTime=DateTime.Now.TimeOfDay;
            Response.Write(GetHttpFile("http://www.spbdev.com/download/DotNetInfo1.0.rar",Request.MapPath("RecievedFile.rar")));
            Response.Write("&lt;br>&lt;br>\r\n执行时间：" + DateTime.Now.TimeOfDay.Subtract(oStartTime).TotalMilliseconds.ToString() + " 毫秒");
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.Net2.GetRemoteHtmlCode2(System.String)">
            <summary>
            获取远程文件源代码 GetRemoteHtmlCode("http://www.baidu.com");
            </summary>
            <param name="Url">远程url</param>
            <returns>获取远程文件源代码</returns>
        </member>
        <member name="M:Pub.Class.Net2.GetRemoteHtmlCode2(System.String,System.Text.Encoding)">
            <summary>
            获取远程文件源代码 线程安全
            </summary>
            <param name="Url">url</param>
            <param name="encoding">编码</param>
            <returns>获取远程文件源代码 线程安全</returns>
        </member>
        <member name="M:Pub.Class.Net2.GetRemoteHtmlCode3(System.String)">
            <summary>
            获取远程文件源代码 GetRemoteHtmlCode("http://www.baidu.com");  线程安全
            </summary>
            <param name="strUrl">远程url</param>
            <returns>获取远程文件源代码</returns>
        </member>
        <member name="M:Pub.Class.Net2.GetRemoteHtmlCode3(System.String,System.Text.Encoding)">
            <summary>
            获取远程文件源代码  线程安全
            </summary>
            <param name="strUrl">url</param>
            <param name="encoding">编码</param>
            <returns>获取远程文件源代码</returns>
        </member>
        <member name="M:Pub.Class.Net2.GetRemoteHtmlCode4(System.String)">
            <summary>
            获取远程文件源代码 GetRemoteHtmlCode("http://www.baidu.com"); 线程安全
            </summary>
            <param name="strUrl">远程url</param>
            <returns>获取远程文件源代码</returns>
        </member>
        <member name="M:Pub.Class.Net2.GetRemoteHtmlCode4(System.String,System.Text.Encoding)">
            <summary>
            获取远程文件源代码 线程安全
            </summary>
            <param name="Url">url</param>
            <param name="encoding">编码</param>
            <returns>获取远程文件源代码</returns>
        </member>
        <member name="M:Pub.Class.Net2.GetRemoteHtmlCode5(System.String)">
            <summary>
            获取远程文件源代码 GetRemoteHtmlCode("http://www.baidu.com"); 线程安全
            </summary>
            <param name="strUrl">远程url</param>
            <returns>获取远程文件源代码</returns>
        </member>
        <member name="M:Pub.Class.Net2.GetRemoteHtmlCode5(System.String,System.Text.Encoding)">
            <summary>
            获取远程文件源代码 线程安全
            </summary>
            <param name="Url">远程url</param>
            <param name="encoding">编码</param>
            <returns>获取远程文件源代码</returns>
        </member>
        <member name="M:Pub.Class.Net2.GetRemoteHtmlCode(System.String)">
            <summary>
            获取远程文件源代码 线程安全 自动取编码
            </summary>
            <param name="Url">url</param>
            <returns>获取远程文件源代码</returns>
        </member>
        <member name="M:Pub.Class.Net2.TransHtml(System.String,System.String,System.Text.Encoding)">
            <summary>
            转换为静态html
            </summary>
            <param name="path">网址</param>
            <param name="outpath">输出路径</param>
            <param name="encoding">编码</param>
        </member>
        <member name="T:Pub.Class.SoapWebService">
            <summary>
            WebService Soap方式调用
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            Hashtable pas = new Hashtable(); pas["i"] = 100;
            new SoapWebService().Call("http://www.test.com/default.asmx", "WebService", "test2", pas);
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.SoapWebService.Call(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            WebService Soap方式调用
            </summary>
            <param name="url">WebService 接口地址</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:Pub.Class.SoapWebService.Call(System.String,System.String,System.String,System.Collections.Generic.IList{Pub.Class.UrlParameter})">
            <summary>
            WebService Soap方式调用
            </summary>
            <param name="url">WebService 接口地址</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns>返回字符串</returns>
        </member>
        <member name="T:Pub.Class.PostWebService">
            <summary>
            WebService Post方式调用
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            Hashtable pas = new Hashtable(); pas["i"] = 100;
            new PostWebService().Call("http://www.test.com/default.asmx", "WebService", "test2", pas);
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.PostWebService.Call(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            WebService Post方式调用
            </summary>
            <param name="url">WebService 接口地址</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:Pub.Class.PostWebService.Call(System.String,System.String,System.String,System.Collections.Generic.IList{Pub.Class.UrlParameter})">
            <summary>
            WebService Post方式调用
            </summary>
            <param name="url">WebService 接口地址</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns>返回字符串</returns>
        </member>
        <member name="T:Pub.Class.WebService">
            <summary>
            WebService 调用
            
            修改纪录
                2008.07.01 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.WebService.InvokeWebService(System.String,System.String,System.Object[])">
            <summary>
            InvokeWebService 动态调用web服务
            </summary>
            <param name="wsUrl">WebService 地址</param>
            <param name="methodname">方法名</param>
            <param name="args">参数，仅仅支持简单类型</param>	
            <returns>接口</returns>
        </member>
        <member name="M:Pub.Class.WebService.InvokeWebService(System.String,System.String,System.String,System.Object[])">
            <summary>
            InvokeWebService 动态调用web服务
            </summary>
            <param name="wsUrl">WebService 地址</param>
            <param name="classname">类名</param>
            <param name="methodname">方法名</param>
            <param name="args">参数，仅仅支持简单类型</param>
            <returns>接口</returns>
        </member>
        <member name="M:Pub.Class.WebService.GetWsProxyType(System.String,System.String)">
            <summary>
            GetWsProxyType 获取目标Web服务对应的代理类型 CACHE
            </summary>
            <param name="wsUrl">目标Web服务的url</param>
            <param name="classname">Web服务的class名称，如果不需要指定，则传入null</param>  
            <returns>Type</returns>
        </member>
        <member name="M:Pub.Class.WebService.GetWebService(System.String,System.String,System.String)">
            <summary>
            GET方式调用WebService
            </summary>
            <param name="url">server接口</param>
            <param name="methodName">方法名</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebService.GetWebService(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            GET方式调用WebService
            </summary>
            <param name="url">server接口</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebService.GetWebService(System.String,System.String,System.Collections.Generic.IList{Pub.Class.UrlParameter})">
            <summary>
            GET方式调用WebService
            </summary>
            <param name="url">server接口</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebService.PostWebService(System.String,System.String,System.String)">
            <summary>
            Post方式调用WebService
            </summary>
            <param name="url">server接口</param>
            <param name="methodName">方法名</param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebService.PostWebService(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            Post方式调用WebService
            </summary>
            <param name="url">server接口</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebService.PostWebService(System.String,System.String,System.Collections.Generic.IList{Pub.Class.UrlParameter})">
            <summary>
            Post方式调用WebService
            </summary>
            <param name="url">server接口</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebService.SoapWebService(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            Soap方式调用WebService
            </summary>
            <param name="url">server接口</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebService.SoapWebService(System.String,System.String,System.Collections.Generic.IList{Pub.Class.UrlParameter})">
            <summary>
            Soap方式调用WebService
            </summary>
            <param name="url">server接口</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebService.DynamicWebService(System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            动态调用WebService
            </summary>
            <param name="url">server接口</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.WebService.DynamicWebService(System.String,System.String,System.String,System.Collections.Generic.IList{Pub.Class.UrlParameter})">
            <summary>
            动态调用WebService
            </summary>
            <param name="url">server接口</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.NullLog">
            <summary>
            日志管理类
            
            修改纪录
                2006.05.03 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.NullLog.Write(System.String,System.Text.Encoding)">
            <summary>
            写日志
            </summary>
            <param name="msg">消息</param>
            <param name="encoding">编码</param>
            <returns>true/false</returns>
        </member>
        <member name="T:Pub.Class.EntityInfo">
            <summary>
            实体类描述
            
            修改纪录
                2011.05.01 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.EntityInfo.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="M:Pub.Class.EntityInfo.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
            <param name="desc">详细描述</param>
        </member>
        <member name="M:Pub.Class.EntityInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="id">ID</param>
            <param name="name">名称</param>
            <param name="desc">详细描述</param>
        </member>
        <member name="P:Pub.Class.EntityInfo.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Pub.Class.EntityInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Pub.Class.EntityInfo.Description">
            <summary>
            详细描述
            </summary>
        </member>
        <member name="T:Pub.Class.SystemInfo">
            <summary>
            系统信息类
            
            修改纪录
                2012.05.31 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.SystemInfo.ToExtend">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SystemInfo.FromExtend(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SystemInfo.ToXml">
            <summary>
            导出XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SystemInfo.FromXml(System.String)">
            <summary>
            导入
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="P:Pub.Class.SystemInfo.IsWindows7OrHigher">
            <summary>
            win7以上版本
            </summary>
            <returns></returns>
        </member>
        <member name="P:Pub.Class.SystemInfo.IsWindowsVista">
            <summary>
            Vista版本
            </summary>
            <returns></returns>
        </member>
        <member name="P:Pub.Class.SystemInfo.IsWindowsVistaOrHigher">
            <summary>
            Vista以上版本
            </summary>
            <returns></returns>
        </member>
        <member name="P:Pub.Class.SystemInfo.MachineName">
            <summary>机器名</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.BaseBoard">
            <summary>主板</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.Processors">
            <summary>处理器</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.Disk">
            <summary>磁盘</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.DiskSerial">
            <summary>磁盘序列号</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.Volume">
            <summary>驱动器序列号</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.Macs">
            <summary>网卡</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.IPs">
            <summary>IP地址</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.OSVersion">
            <summary>系统版本</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.Memory">
            <summary>内存</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.ScreenWidth">
            <summary>屏幕宽</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.ScreenHeight">
            <summary>屏幕高</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.DiskSize">
            <summary>磁盘大小</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo.Current">
            <summary>当前机器硬件信息</summary>
        </member>
        <member name="P:Pub.Class.SystemInfo._.MachineName">
            <summary>
            机器名
            </summary>
        </member>
        <member name="P:Pub.Class.SystemInfo._.BaseBoard">
            <summary>
            主板序列号
            </summary>
        </member>
        <member name="P:Pub.Class.SystemInfo._.Processors">
            <summary>
            处理器序列号
            </summary>
        </member>
        <member name="P:Pub.Class.SystemInfo._.Memory">
            <summary>
            内存总量
            </summary>
        </member>
        <member name="P:Pub.Class.SystemInfo._.Disk">
            <summary>
            磁盘名称
            </summary>
        </member>
        <member name="P:Pub.Class.SystemInfo._.DiskSerial">
            <summary>
            磁盘序列号
            </summary>
        </member>
        <member name="P:Pub.Class.SystemInfo._.Volume">
            <summary>
            驱动器序列号
            </summary>
        </member>
        <member name="P:Pub.Class.SystemInfo._.Macs">
            <summary>
            网卡地址序列号
            </summary>
        </member>
        <member name="P:Pub.Class.SystemInfo._.IPs">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="T:Pub.Class.DownFileInfo">
            <summary>
            下载文件的实体类
            
            修改纪录
                2012.03.01 版本：1.0 livexy 创建此类
                
            </summary>
        </member>
        <member name="P:Pub.Class.DownFileInfo.FileSize">
            <summary>
            文件大小 
            </summary>
        </member>
        <member name="P:Pub.Class.DownFileInfo.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Pub.Class.DownFileInfo.DownloadSize">
            <summary>
            当前下载大小(实时的) 
            </summary>
        </member>
        <member name="P:Pub.Class.DownFileInfo.IsComplete">
            <summary>
            是否完成 
            </summary>
        </member>
        <member name="P:Pub.Class.DownFileInfo.SavePath">
            <summary>
            保存路径
            </summary>
        </member>
        <member name="P:Pub.Class.DownFileInfo.FileUrl">
            <summary>
            网络文件地址
            </summary>
        </member>
        <member name="P:Pub.Class.DownFileInfo.ExtName">
            <summary>
            保存路径
            </summary>
        </member>
        <member name="P:Pub.Class.DownFileInfo.ThreadNum">
            <summary>
            线程数量
            </summary>
        </member>
        <member name="T:Pub.Class.DownFile">
            <summary>
            下载网络文件 hcxiong
            
            修改纪录
                2012.03.01 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            new DownFile("http://fetion.chinacache.net/alading/Fetion2011December.exe", Application.StartupPath)
                .FileName("test.exe")
                .Action(p => {
                    textBox1.Text = "文件大小：{0}/{1}".FormatWith(p.DownloadSize.FormatBytes(), p.FileSize.FormatBytes());
                })
                .Done(p => {
                    textBox1.AppendText("下载完成:" + p.FileName);
                })
                .Error(ex => {
                    textBox1.Text = "下载失败:" + ex.ToExceptionDetail();
                })
                .Start();
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.DownFile.#ctor(System.String,System.String,System.Int32)">
            <summary> 
            构造函数 
            </summary> 
            <param name="threahNum">线程数量</param> 
            <param name="fileUrl">文件Url路径</param> 
            <param name="savePath">本地保存路径</param> 
        </member>
        <member name="M:Pub.Class.DownFile.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fileUrl">文件Url路径</param>
            <param name="savePath">本地保存路径</param>
        </member>
        <member name="M:Pub.Class.DownFile.Action(System.Action{Pub.Class.DownFileInfo})">
            <summary>
            下载过程中执行
            </summary>
            <param name="action">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DownFile.Done(System.Action{Pub.Class.DownFileInfo})">
            <summary>
            下载完成后执行
            </summary>
            <param name="done">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DownFile.Error(System.Action{System.Exception})">
            <summary>
            下载出错后执行
            </summary>
            <param name="error">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DownFile.FileName(System.String)">
            <summary>
            修改文件名
            </summary>
            <param name="fileName">新文件名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.DownFile.Start">
            <summary>
            下载
            </summary>
        </member>
        <member name="M:Pub.Class.DownFile.Download">
            <summary>
            线程下载
            </summary>
        </member>
        <member name="M:Pub.Class.DownFile.Complete">
            <summary> 
            下载完成后合并文件块 
            </summary> 
        </member>
        <member name="M:Pub.Class.DownFile.Stop">
            <summary>
            终止执行
            </summary>
        </member>
        <member name="M:Pub.Class.DownFile.Pause">
            <summary>
            暂停执行
            </summary>
        </member>
        <member name="T:Pub.Class.PagerSQLHelper">
            <summary>
            分页SQL操作类
            
            修改纪录
                2011.11.09 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            using (PagerSQLHelper s = new PagerSQLHelper(PagerSQLEnum.top_top)) {
                PagerSql sql = s.GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email", "", "", "");
                Msg.Write(sql.CountSql + "&lt;br />" + sql.DataSql);
            }
            using (PagerSQLHelper s = new PagerSQLHelper(PagerSQLEnum.not_in)) {
                PagerSql sql = s.GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email", "", "", "");
                Msg.Write(sql.CountSql + "&lt;br />" + sql.DataSql);
            }
            using (PagerSQLHelper s = new PagerSQLHelper(PagerSQLEnum.max_top)) {
                PagerSql sql = s.GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email", "", "", "");
                Msg.Write(sql.CountSql + "&lt;br />" + sql.DataSql);
            }
            using (PagerSQLHelper s = new PagerSQLHelper(PagerSQLEnum.row_number)) {
                PagerSql sql = s.GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email", "", "", "");
                Msg.Write(sql.CountSql + "&lt;br />" + sql.DataSql);
            }
            using (PagerSQLHelper s = new PagerSQLHelper(PagerSQLEnum.mysql)) {
                PagerSql sql = s.GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email", "", "", "");
                Msg.Write(sql.CountSql + "&lt;br />" + sql.DataSql);
            }
            using (PagerSQLHelper s = new PagerSQLHelper(PagerSQLEnum.oracle)) {
                PagerSql sql = s.GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email", "", "", "");
                Msg.Write(sql.CountSql + "&lt;br />" + sql.DataSql);
            }
            using (PagerSQLHelper s = new PagerSQLHelper(PagerSQLEnum.sqlite)) {
                PagerSql sql = s.GetSQL(2, 10, "UC_Member", "MemberID", "MemberID,RealName,Email", "", "", "");
                Msg.Write(sql.CountSql + "&lt;br />" + sql.DataSql);
            }
            </example>
            </code>
            </summary>
        </member>
        <member name="M:Pub.Class.PagerSQLHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="PagerSQLEnum">PagerSQL 调用类型 Enum string</param>
        </member>
        <member name="M:Pub.Class.PagerSQLHelper.#ctor(Pub.Class.PagerSQLEnum)">
            <summary>
            构造函数
            </summary>
            <param name="PagerSQLEnum">PagerSQL 调用类型 Enum</param>
        </member>
        <member name="M:Pub.Class.PagerSQLHelper.init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Pub.Class.PagerSQLHelper.InternalDispose">
            <summary>
            用using 自动释放
            </summary>
        </member>
        <member name="M:Pub.Class.PagerSQLHelper.GetSQL(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            分页SQL调用方法
            </summary>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="tableName">表名称</param>
            <param name="pk">主键</param>
            <param name="fieldList">字段列表</param>
            <param name="where">where条件 and or 开始</param>
            <param name="groupBy">分组条件</param>
            <param name="orderBy">排序条件</param>
            <returns>分页SQL</returns>
        </member>
        <member name="M:Pub.Class.PagerSQLHelper.GetSQL(System.Int32,System.Int32,System.String,System.String,System.String,Pub.Class.Where,System.String,System.String)">
            <summary>
            分页SQL调用方法
            </summary>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示数量</param>
            <param name="tableName">表名称</param>
            <param name="pk">主键</param>
            <param name="fieldList">字段列表</param>
            <param name="where">where条件 and or 开始</param>
            <param name="groupBy">分组条件</param>
            <param name="orderBy">排序条件</param>
            <returns>分页SQL</returns>
        </member>
        <member name="T:Pub.Class.IDictionaryExtensions">
            <summary>
            IDictionary 扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.IDictionaryExtensions.IsNullEmpty(System.Collections.IDictionary)">
            <summary>
            IsNullEmpty
            </summary>
            <param name="self">Dictionary扩展</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.IDictionaryExtensions.GetValueOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            取值，不存在时添加
            </summary>
            <example>
            <code>
            Dictionary&lt;int, int> dict = new Dictionary&lt;int, int>(); 
            int value1 = dict.GetValueOrAdd&lt;int, int>(10, 5);
            </code>
            </example>
            <typeparam name="TKey">key类型</typeparam>
            <typeparam name="TValue">value类型</typeparam>
            <param name="dictionary">Dictionary扩展</param>
            <param name="key">key</param>
            <param name="defValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:Pub.Class.IDictionaryExtensions.GetValueOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            取值，不存在时添加
            </summary>
            <example>
            <code>
            Dictionary&lt;int, int> dict = new Dictionary&lt;int, int>(); 
            int value = dict.GetValueOrAdd&lt;int, int>(10); 
            </code>
            </example>
            <typeparam name="TKey">key类型</typeparam>
            <typeparam name="TValue">value类型</typeparam>
            <param name="dictionary">Dictionary扩展</param>
            <param name="key">key</param>
            <returns>值</returns>
        </member>
        <member name="M:Pub.Class.IDictionaryExtensions.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            取值
            </summary>
            <example>
            <code>
            Dictionary&lt;int, int> dict = new Dictionary&lt;int, int>(); 
            int value3 = dict.GetValue&lt;int, int>(10, 1);
            </code>
            </example>
            <typeparam name="TKey">key类型</typeparam>
            <typeparam name="TValue">value类型</typeparam>
            <param name="dictionary">Dictionary扩展</param>
            <param name="key">key</param>
            <param name="defValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:Pub.Class.IDictionaryExtensions.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            取值
            </summary>
            <example>
            <code>
            Dictionary&lt;int, int> dict = new Dictionary&lt;int, int>(); 
            int value2 = dict.GetValue&lt;int, int>(10);
            </code>
            </example>
            <typeparam name="TKey">key类型</typeparam>
            <typeparam name="TValue">value类型</typeparam>
            <param name="dictionary">Dictionary扩展</param>
            <param name="key">key</param>
            <returns>值</returns>
        </member>
        <member name="M:Pub.Class.IDictionaryExtensions.ToUrlEncode(System.Collections.IDictionary)">
            <summary>
            IDictionary数据转URL字符串
            </summary>
            <param name="parameters">IDictionary</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDictionaryExtensions.Join(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            IDictionary数据转URL字符串 Join("=","&amp;")
            </summary>
            <param name="parameters">IDictionary</param>
            <param name="split1">分隔符1</param>
            <param name="split2">分隔符2</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDictionaryExtensions.Add``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            添加唯一项
            </summary>
            <typeparam name="K">key类型</typeparam>
            <typeparam name="V">value类型</typeparam>
            <param name="list">IDictionary列表</param>
            <param name="key">key</param>
            <param name="value">值</param>
            <returns>IDictionary列表</returns>
        </member>
        <member name="M:Pub.Class.IDictionaryExtensions.Do``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            遍历
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <typeparam name="K">key类型</typeparam>
            <typeparam name="V">value类型</typeparam>
            <param name="source">IDictionary扩展</param>
            <param name="action">动作</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.IDictionaryExtensions.Do``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1,System.Int32})">
            <summary>
            遍历
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <typeparam name="K">key类型</typeparam>
            <typeparam name="V">value类型</typeparam>
            <param name="source">IDictionary扩展</param>
            <param name="action">动作</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.LongExtensions">
            <summary>
            long扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.LongExtensions.PercentageOf(System.Int64,System.Int32)">
            <summary>
            百分率
            </summary>
            <param name="number">long扩展</param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.PercentageOf(System.Int64,System.Single)">
            <summary>
            百分率
            </summary>
            <param name="number">long扩展</param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.PercentageOf(System.Int64,System.Double)">
            <summary>
            百分率
            </summary>
            <param name="number">long扩展</param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.PercentageOf(System.Int64,System.Decimal)">
            <summary>
            百分率
            </summary>
            <param name="number">long扩展</param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.PercentageOf(System.Int64,System.Int64)">
            <summary>
            百分率
            </summary>
            <param name="number">long扩展</param>
            <param name="percent"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.PercentOf(System.Int64,System.Int32)">
            <summary>
            百分之
            </summary>
            <param name="position">long扩展</param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.PercentOf(System.Int64,System.Single)">
            <summary>
            百分之
            </summary>
            <param name="position">long扩展</param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.PercentOf(System.Int64,System.Double)">
            <summary>
            百分之
            </summary>
            <param name="position">long扩展</param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.PercentOf(System.Int64,System.Decimal)">
            <summary>
            百分之
            </summary>
            <param name="position">long扩展</param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.PercentOf(System.Int64,System.Int64)">
            <summary>
            百分之
            </summary>
            <param name="position">long扩展</param>
            <param name="total"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.FormatKB(System.Int64)">
            <summary>
            文件大小格式化 最小KB
            </summary>
            <param name="bytes">long扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.FormatBytes(System.Int64)">
            <summary>
            文件大小格式化 最小字节
            </summary>
            <param name="bytes">long扩展</param>
            <returns>文件大小格式化 最小字节 </returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.ThreeNonZeroDigits(System.Double)">
            <summary>
            保留2位小数
            </summary>
            <param name="value">long扩展</param>
            <returns>保留2位小数</returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.ToCurrency(System.Int64)">
            <summary>
            金额 三位,分割
            </summary>
            <param name="value">long扩展</param>
            <returns>金额 三位,分割</returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.ToRMB(System.Int64)">
            <summary>
            人民币转大写
            </summary>
            <param name="value">long扩展</param>
            <returns>人民币转大写</returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.IfEqual(System.Int64,System.Int64,System.Int64)">
            <summary>
            如果等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.IfNotEqual(System.Int64,System.Int64,System.Int64)">
            <summary>
            如果不等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.IfMoreThan(System.Int64,System.Int64,System.Int64)">
            <summary>
            如果大于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.IfLessThan(System.Int64,System.Int64,System.Int64)">
            <summary>
            如果小于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.IfMoreThanOrEqual(System.Int64,System.Int64,System.Int64)">
            <summary>
            如果大于等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.IfLessThanOrEqual(System.Int64,System.Int64,System.Int64)">
            <summary>
            如果小于等于
            </summary>
            <param name="obj">源数据</param>
            <param name="value">目标数据</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.LongExtensions.ToTime(System.Int64)">
            <summary>
            转时间
            </summary>
            <param name="seconds">int扩展</param>
            <returns>转时间 1:12:12</returns>
        </member>
        <member name="T:Pub.Class.HashtableExtensions">
            <summary>
            Hashtable 扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.HashtableExtensions.ToUrl(System.Collections.Hashtable)">
            <summary>
            Hashtable数据转URL字符串
            </summary>
            <param name="parameters">Hashtable</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.HashtableExtensions.ToUrlEncode(System.Collections.Hashtable)">
            <summary>
            Hashtable数据转URL字符串
            </summary>
            <param name="parameters">Hashtable</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.Data">
            <summary>
            数据库访问助手类
            
            修改纪录
                2010.08.01 版本：1.1 livexy 添加数据库连接池的管理
                2006.05.04 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            事务操作：
            SqlConnection conn = new SqlConnection(Data.ConnString);
            conn.Open();
            using (SqlTransaction trans = conn.BeginTransaction()) {
                try {
                    Data.ExecuteNonQuery(trans,);
                    Data.ExecuteNonQuery(trans,);
                    trans.Commit();
                } catch (Exception ex) {
                    trans.Rollback();
                    throw ex;
                }
            }
            conn.Close();
            
            Msg.WriteEnd(ActionExtensions.Time(() => { 
                //默认ConnString连接
                Msg.Write(Data.GetScalar("select AdminID from SYS_Admin"));
                Msg.Write("&lt;br />");
                //取ConnString1连接
                Msg.Write(Data.Pool("ConnString1").GetScalar("select AdminID from SYS_Admin"));
                Msg.Write("&lt;br />");
                //取ConnString2连接
                Msg.Write(Data.Pool("ConnString2").GetScalar("select AdminID from SYS_Admin"));
                Msg.Write("&lt;br />");
                
                Database db = new Database("ConnString3");
                db.DBType = "SqlServer";
                db.ConnString = "server=192.168.1.100;uid=sa;pwd=huijing$%^789;database=HJ_Elibiz_Home;";
                Data.AddPool("ConnString3", db);
                
                Data.Pool("ConnString4").DBType = "OleDb";
                Data.Pool("ConnString4").ConnString = "provider=Microsoft.Jet.OLEDB.4.0;data source={0};".FormatWith("~/app_data/XHC.Product.mdb".GetMapPath());
                Msg.Write(Data.Pool("ConnString4").GetScalar("select AdminID from SYS_Admin"));
                            
                //随机取ConnString/ConnString1/ConnString2连接
                Msg.Write(Data.Pool().GetScalar("select AdminID from SYS_Admin"));
            }, "数据库连接", 10));
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.Data.Pool(System.String)">
            <summary>
            取指定的数据库连接池
            </summary>
            <param name="key">key</param>
            <returns></returns>
            <example>
            <code>
                Data.Pool("ConnString") //取指定的
                Data.Pool("db1;db2;db3") //随机取指定的
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.Data.Pool(System.String[])">
            <summary>
            取指定的数据库连接池
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Data.Pool">
            <summary>
            随机取数据库连接池
            </summary>
            <returns></returns>
            <example>
            <code>
                Data.Pool() //随机
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.Data.UsePool(System.String[])">
            <summary>
            使用固定的连接池
            </summary>
            <returns></returns>
            <example>
            <code>
                Data.UsePool("ConnString") //只使用ConnString数据库连接
            </code>
            </example>
            <param name="keys">连接字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Data.ClosePool(System.String)">
            <summary>
            关闭一个连接 key=null时关闭所有连接
            </summary>
            <param name="key">key</param>
            <example>
            <code>
                Data.ClosePool("ConnString"); //关闭指定的
                Data.ClosePool(); //关闭所有
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.Data.AddPool(System.String,Pub.Class.Database)">
            <summary>
            添加一个连接 db=null时 从web.config中读取连接配置
            </summary>
            <param name="key">key</param>
            <param name="db">db</param>
            <example>
            <code>
                Data.AddPool("ConnString2"); //从web.config中读取连接配置
                
                Database db = new Database("ConnString3"); //手动配置
                db.DBType = "SqlServer";
                db.ConnString = "server=.;uid=sa;pwd=huijing$%^789;database=XHC.Product;";
                Data.AddPool("ConnString3", db);
            </code>
            </example>
        </member>
        <member name="M:Pub.Class.Data.AddPool(Pub.Class.Database)">
            <summary>
            添加一个连接 db=null时 从web.config中读取连接配置
            </summary>
            <param name="db">db</param>
        </member>
        <member name="F:Pub.Class.Data.connString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="F:Pub.Class.Data.dbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:Pub.Class.Data.key">
            <summary>
            主连接字符串
            </summary>
        </member>
        <member name="F:Pub.Class.Data.factory">
            <summary>
            DbProviderFactory实例
            </summary>
        </member>
        <member name="F:Pub.Class.Data.provider">
            <summary>
            数据接口
            </summary>
        </member>
        <member name="F:Pub.Class.Data.queryCount">
            <summary>
            查询次数统计
            </summary>
        </member>
        <member name="F:Pub.Class.Data.paramCache">
            <summary>
            Parameters缓存哈希表
            </summary>
        </member>
        <member name="M:Pub.Class.Data.ResetDbProvider">
            <summary>
            刷新数据库提供者
            </summary>
        </member>
        <member name="M:Pub.Class.Data.AttachParameters(System.Data.Common.DbCommand,System.Data.Common.DbParameter[])">
            <summary>
            将DbParameter参数数组(参数值)分配给DbCommand命令.
            这个方法将给任何一个参数分配DBNull.Value;
            该操作将阻止默认值的使用.
            </summary>
            <param name="command">命令名</param>
            <param name="commandParameters">DbParameters数组</param>
        </member>
        <member name="M:Pub.Class.Data.AssignParameterValues(System.Data.Common.DbParameter[],System.Data.DataRow)">
            <summary>
            将DataRow类型的列值分配到DbParameter参数数组.
            </summary>
            <param name="commandParameters">要分配值的DbParameter参数数组</param>
            <param name="dataRow">将要分配给存储过程参数的DataRow</param>
        </member>
        <member name="M:Pub.Class.Data.AssignParameterValues(System.Data.Common.DbParameter[],System.Object[])">
            <summary>
            将一个对象数组分配给DbParameter参数数组.
            </summary>
            <param name="commandParameters">要分配值的DbParameter参数数组</param>
            <param name="parameterValues">将要分配给存储过程参数的对象数组</param>
        </member>
        <member name="M:Pub.Class.Data.PrepareCommand(System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[],System.Boolean@)">
            <summary>
            预处理用户提供的命令,数据库连接/事务/命令类型/参数
            </summary>
            <param name="command">要处理的DbCommand</param>
            <param name="connection">数据库连接</param>
            <param name="transaction">一个有效的事务或者是null值</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名或都SQL命令文本</param>
            <param name="commandParameters">和命令相关联的DbParameter参数数组,如果没有参数为'null'</param>
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param>
        </member>
        <member name="M:Pub.Class.Data.DiscoverSpParameterSet(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            探索运行时的存储过程,返回DbParameter参数数组.
            初始化参数值为 DBNull.Value.
            </summary>
            <param name="connection">一个有效的数据库连接</param>
            <param name="spName">存储过程名称</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回DbParameter参数数组</returns>
        </member>
        <member name="M:Pub.Class.Data.CloneParameters(System.Data.Common.DbParameter[])">
            <summary>
            DbParameter参数数组的深层拷贝.
            </summary>
            <param name="originalParameters">原始参数数组</param>
            <returns>返回一个同样的参数数组</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.String)">
            <summary>
            执行指定连接字符串,类型的DbCommand.
            </summary>
            <remarks>
            示例:  
             int result = ExecSql("SELECT * FROM [tableName]");
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定连接字符串,类型的DbCommand.
            </summary>
            <remarks>
            示例:  
             int result = ExecSql("PublishOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Int32@,System.String)">
            <summary>
            执行指定连接字符串,类型的DbCommand.
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(out id,"SELECT * FROM [tableName]");
            </remarks>
            <param name="id">返回自增ID</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Data.CommandType,System.String)">
            <summary>
            执行指定连接字符串,类型的DbCommand.
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定连接字符串,类型的DbCommand.
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(CommandType.StoredProcedure, "PublishOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Int32@,System.Data.CommandType,System.String)">
            <summary>
            执行指定连接字符串,并返回刚插入的自增ID
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(out id, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="id">返回自增ID</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Int32@,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定连接字符串并返回刚插入的自增ID,类型的DbCommand.
            </summary>
            <param name="id">返回自增ID</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令 
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接对象的命令
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(conn, CommandType.StoredProcedure, "PublishOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">T存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Int32@,System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令并返回自增ID 
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="id">id</param>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Int32@,System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接对象的命令
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(conn, CommandType.StoredProcedure, "PublishOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="id">id</param>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">T存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:  
             int result = ExecSql(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:  
             int result = ExecSql("PublishOrders", 24, 36);
            </remarks>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行带事务的DbCommand.
            </summary>
            <remarks>
            示例.:  
             int result = ExecSql(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行带事务的DbCommand(指定参数).
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(trans, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Int32@,System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行带事务的DbCommand.
            </summary>
            <remarks>
            示例.:  
             int result = ExecSql(out id,trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="id">返回自增ID</param>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Int32@,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行带事务的DbCommand(指定参数).
            </summary>
            <remarks>
            示例:  
             int result = ExecSql(out id,trans, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="id">返回自增ID</param>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSql(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            执行带事务的DbCommand(指定参数值).
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:  
             int result = ExecSql(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.Connection``1(System.Func{System.Data.Common.DbConnection,``0},System.Action{System.Exception})">
            <summary>
            使用一个数据库链接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exec"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Data.ExecTran``1(System.Func{System.Data.Common.DbTransaction,``0},System.Action{System.Exception})">
            <summary>
            执行事务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exec"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Data.ExecTran``1(System.Func{System.Data.Common.DbConnection,System.Data.Common.DbTransaction,``0},System.Action{System.Exception})">
            <summary>
            执行事务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exec"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Data.ExecuteCommandWithSplitter(System.String,System.String,System.Boolean)">
            <summary>
            运行含有GO命令的多条SQL命令
            </summary>
            <param name="commandText">SQL命令字符串</param>
            <param name="splitter">分割字符串</param>
            <param name="errorExit">出错是否退出</param>
        </member>
        <member name="M:Pub.Class.Data.ExecuteCommandWithSplitter(System.String)">
            <summary>
            运行含有GO命令的多条SQL命令
            </summary>
            <param name="commandText">SQL命令字符串</param>
        </member>
        <member name="M:Pub.Class.Data.GetDataSet(System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet("SELECT * FROM [table1]");
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSet(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet("SELECT * FROM [table1]", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSet(System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet(CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例: 
             DataSet ds = GetDataSet(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSet(System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值.
            示例: 
             DataSet ds = GetDataSet("GetOrders", 24, 36);
            </remarks>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet(conn, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSet(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.:  
             DataSet ds = GetDataSet(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定事务的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定事务的命令,指定参数,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataSet ds = GetDataSet(trans, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSet(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            执行指定事务的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.:  
             DataSet ds = GetDataSet(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">事务</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTable(System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataTable("SELECT * FROM [table1]");
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataTable("SELECT * FROM [table1]", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTable(System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataTable(CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTable(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例: 
             DataTable dt = GetDataTable(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTable(System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值.
            示例: 
             DataTable dt = GetDataSet("GetOrders", 24, 36);
            </remarks>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTable(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataSet(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTable(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataSet(conn, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTable(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.:  
             DataTable dt = GetDataTable(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTable(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定事务的命令,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataSet(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTable(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定事务的命令,指定参数,返回DataSet.
            </summary>
            <remarks>
            示例:  
             DataTable dt = GetDataSet(trans, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTable(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            执行指定事务的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.:  
             DataTable dt = GetDataTable(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">事务</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataTable</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReader(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[],Pub.Class.Data.DbConnectionOwnership)">
            <summary>
            执行指定数据库连接对象的数据阅读器.
            </summary>
            <remarks>
            如果是BaseDbHelper打开连接,当连接关闭DataReader也将关闭.
            如果是调用都打开连接,DataReader由调用都管理.
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="transaction">一个有效的事务,或者为 'null'</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameters参数数组,如果没有参数则为'null'</param>
            <param name="connectionOwnership">标识数据库连接对象是由调用者提供还是由BaseDbHelper提供</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReader(System.String)">
            <summary>
            执行指定数据库连接字符串的数据阅读器.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader("GetOrders");
            </remarks>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReader(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader("GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组(new DbParameter("@prodid", 24))</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReader(System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的数据阅读器.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader(CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">DbParameter参数数组(new DbParameter("@prodid", 24))</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReader(System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例:  
             DbDataReader dr = GetDbDataReader("GetOrders", 24, 36);
            </remarks>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReader(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的数据阅读器.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReader(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader(conn, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandParameters">DbParameter参数数组</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReader(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例:  
             DbDataReader dr = GetDbDataReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">T存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值.
            </summary>
            <remarks>
            示例:  
             DbDataReader dr = GetDbDataReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:  
              DbDataReader dr = GetDbDataReader(trans, CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReader(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             DbDataReader dr = GetDbDataReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalar(System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar("GetOrderCount");
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalar(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(CommandType.StoredProcedure, "GetOrderCount", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalar(System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(CommandType.StoredProcedure, "GetOrderCount", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalar(System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数值,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             int orderCount = (int)GetScalar("GetOrderCount", 24, 36);
            </remarks>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalar(System.Data.Common.DbConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalar(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalar(System.Data.Common.DbConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数值,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             int orderCount = (int)GetScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库事务的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库事务的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:  
             int orderCount = (int)GetScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new DbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalar(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            执行指定数据库事务的命令,指定参数值,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             int orderCount = (int)GetScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.FillDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例:  
             FillDataSet(CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)</param>
        </member>
        <member name="M:Pub.Class.Data.FillDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.指定命令参数.
            </summary>
            <remarks>
            示例:  
             FillDataSet(CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:Pub.Class.Data.FillDataSet(System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             FillDataSet(CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>    
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:Pub.Class.Data.FillDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例:  
             FillDataSet(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>    
        </member>
        <member name="M:Pub.Class.Data.FillDataSet(System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定参数.
            </summary>
            <remarks>
            示例:  
             FillDataSet(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
        </member>
        <member name="M:Pub.Class.Data.FillDataSet(System.Data.Common.DbConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             FillDataSet(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:Pub.Class.Data.FillDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例:  
             FillDataSet(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:Pub.Class.Data.FillDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集,指定参数.
            </summary>
            <remarks>
            示例:  
             FillDataSet(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new DbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
        </member>
        <member name="M:Pub.Class.Data.FillDataSet(System.Data.Common.DbTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集,指定存储过程参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            
            示例:  
             FillDataSet(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="spName">存储过程名称</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:Pub.Class.Data.FillDataSet(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            [私有方法][内部调用]执行指定数据库连接对象/事务的命令,映射数据表并填充数据集,DataSet/TableNames/DbParameters.
            </summary>
            <remarks>
            示例:  
             FillDataSet(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new DbParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的DbParameter参数数组</param>
        </member>
        <member name="M:Pub.Class.Data.UpdateDataSet(System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.DataSet,System.String)">
            <summary>
            执行数据集更新到数据库,指定inserted, updated, or deleted命令.
            </summary>
            <remarks>
            示例:  
             UpdateDataSet(insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">[追加记录]一个有效的SQL语句或存储过程</param>
            <param name="deleteCommand">[删除记录]一个有效的SQL语句或存储过程</param>
            <param name="updateCommand">[更新记录]一个有效的SQL语句或存储过程</param>
            <param name="dataSet">要更新到数据库的DataSet</param>
            <param name="tableName">要更新到数据库的DataTable</param>
        </member>
        <member name="M:Pub.Class.Data.CreateCommand(System.Data.Common.DbConnection,System.String,System.String[])">
            <summary>
            创建DbCommand命令,指定数据库连接对象,存储过程名和参数.
            </summary>
            <remarks>
            示例:  
             DbCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="sourceColumns">源表的列名称数组</param>
            <returns>返回DbCommand命令</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSqlTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSqlTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.ExecSqlTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSetTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSetTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataSetTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTableTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataTable.</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTableTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataTable.</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDataTableTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataTable.</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReaderTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReaderTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetDbDataReaderTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的DbDataReader</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalarTypedParams(System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalarTypedParams(System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalarTypedParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:Pub.Class.Data.CacheParameterSet(System.String,System.Data.Common.DbParameter[])">
            <summary>
            追加参数数组到缓存.
            </summary>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">要缓存的参数数组</param>
        </member>
        <member name="M:Pub.Class.Data.GetCachedParameterSet(System.String)">
            <summary>
            从缓存中获取参数数组.
            </summary>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>参数数组</returns>
        </member>
        <member name="M:Pub.Class.Data.GetSpParameterSet(System.String)">
            <summary>
            返回指定的存储过程的参数集
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="spName">存储过程名</param>
            <returns>返回DbParameter参数数组</returns>
        </member>
        <member name="M:Pub.Class.Data.GetSpParameterSet(System.String,System.Boolean)">
            <summary>
            返回指定的存储过程的参数集
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回DbParameter参数数组</returns>
        </member>
        <member name="M:Pub.Class.Data.GetSpParameterSet(System.Data.Common.DbConnection,System.String)">
            <summary>
            [内部]返回指定的存储过程的参数集(使用连接对象).
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="connection">一个有效的数据库连接字符</param>
            <param name="spName">存储过程名</param>
            <returns>返回DbParameter参数数组</returns>
        </member>
        <member name="M:Pub.Class.Data.GetSpParameterSet(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            [内部]返回指定的存储过程的参数集(使用连接对象)
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">
            是否包含返回值参数
            </param>
            <returns>返回DbParameter参数数组</returns>
        </member>
        <member name="M:Pub.Class.Data.GetSpParameterSetInternal(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            [私有]返回指定的存储过程的参数集(使用连接对象)
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回DbParameter参数数组</returns>
        </member>
        <member name="M:Pub.Class.Data.MakeInParam(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            输入参数
            </summary>
            <param name="ParamName">参数名</param>
            <param name="DbType">参数类型</param>
            <param name="Size">参数大小</param>
            <param name="Value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Data.MakeOutParam(System.String,System.Data.DbType,System.Int32)">
            <summary>
            输出参数
            </summary>
            <param name="ParamName">参数名</param>
            <param name="DbType">参数类型</param>
            <param name="Size">参数大小</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Data.MakeParam(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            参数
            </summary>
            <param name="ParamName">参数名</param>
            <param name="DbType">参数类型</param>
            <param name="Size">参数大小</param>
            <param name="Direction">输入/输出</param>
            <param name="Value">值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalarToStr(System.Data.CommandType,System.String)">
            <summary>
            取第一行第一列数据
            </summary>
            <param name="commandType">CommandType</param>
            <param name="commandText">SQL</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Data.GetScalarToStr(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            取第一行第一列数据
            </summary>
            <param name="commandType">CommandType</param>
            <param name="commandText">SQL</param>
            <param name="commandParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Data.GetIdentifierStart">
            <summary>
            起始字符
            </summary>
        </member>
        <member name="M:Pub.Class.Data.GetIdentifierEnd">
            <summary>
            结束字符
            </summary>
        </member>
        <member name="M:Pub.Class.Data.GetParamIdentifier">
            <summary>
            参数前导符号
            </summary>
        </member>
        <member name="M:Pub.Class.Data.DataBulkCopy(System.Data.DataTable,System.String,Pub.Class.BulkCopyOptions,System.Boolean,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            SqlServer大数据复制
            </summary>
            <param name="dt">数据源 dt.TableName一定要和数据库表名对应</param>
            <param name="dbkey">数据库</param>
            <param name="sqlOptions">选项 默认Default</param>
            <param name="isTran">是否使用事务 默认false</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Data.DataBulkCopy(System.Data.DataTable,System.Action{System.Exception},System.String,Pub.Class.BulkCopyOptions,System.Boolean,System.Int32,System.Int32)">
            <summary>
            SqlServer大数据复制
            </summary>
            <param name="dt">数据源 dt.TableName一定要和数据库表名对应</param>
            <param name="dbkey">数据库</param>
            <param name="options">选项 默认Default</param>
            <param name="isTran">是否使用事务 默认false</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Data.DataBulkCopy(System.Data.DataTable,System.Boolean,System.String,Pub.Class.BulkCopyOptions,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            SqlServer大数据复制
            </summary>
            <param name="dt">数据源 dt.TableName一定要和数据库表名对应</param>
            <param name="dbkey">数据库</param>
            <param name="options">选项 默认Default</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <param name="isTran">使用事务</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Data.DataBulkCopy(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.DataTable,Pub.Class.BulkCopyOptions,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            大数据复制
            </summary>
            <param name="conn">连接源</param>
            <param name="tran">事务</param>
            <param name="dt">数据源 dt.TableName一定要和数据库表名对应</param>
            <param name="options">选项 默认Default</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Data.DataBulkCopy(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.DataTable,System.Action{System.Exception},Pub.Class.BulkCopyOptions,System.Int32,System.Int32)">
            <summary>
            大数据复制
            </summary>
            <param name="conn">连接源</param>
            <param name="tran">事务</param>
            <param name="dt">数据源 dt.TableName一定要和数据库表名对应</param>
            <param name="options">选项 默认Default</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Data.DataBulkCopy(System.Data.IDataReader,System.String,System.String,Pub.Class.BulkCopyOptions,System.Boolean,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            SqlServer大数据复制
            </summary>
            <param name="dr">数据源</param>
            <param name="tableName">对应的表名</param>
            <param name="dbkey">数据库</param>
            <param name="options">选项 默认Default</param>
            <param name="isTran">是否使用事务 默认false</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Data.DataBulkCopy(System.Data.IDataReader,System.String,System.Action{System.Exception},System.String,Pub.Class.BulkCopyOptions,System.Boolean,System.Int32,System.Int32)">
            <summary>
            SqlServer大数据复制
            </summary>
            <param name="dr">数据源</param>
            <param name="tableName">对应的表名</param>
            <param name="dbkey">数据库</param>
            <param name="options">选项 默认Default</param>
            <param name="isTran">是否使用事务 默认false</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Data.DataBulkCopy(System.Data.IDataReader,System.String,System.Boolean,System.String,Pub.Class.BulkCopyOptions,System.Int32,System.Int32,System.Action{System.Exception})">
            <summary>
            SqlServer大数据复制
            </summary>
            <param name="dr">数据源</param>
            <param name="tableName">对应的表名</param>
            <param name="dbkey">数据库</param>
            <param name="options">选项 默认Default</param>
            <param name="isTran">是否使用事务 默认false</param>
            <param name="timeout">超时时间7200 2小时</param>
            <param name="batchSize">每一批次中的行数</param>
            <param name="error">错误处理</param>
            <returns>true/false</returns>
        </member>
        <member name="P:Pub.Class.Data.QueryCount">
            <summary>
            查询次数统计
            </summary>
        </member>
        <member name="P:Pub.Class.Data.ConnString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Pub.Class.Data.Key">
            <summary>
            重置主操作数据库
            </summary>
        </member>
        <member name="P:Pub.Class.Data.DBType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Pub.Class.Data.Provider">
            <summary>
            IDbProvider接口
            </summary>
        </member>
        <member name="P:Pub.Class.Data.Factory">
            <summary>
            DbFactory实例
            </summary>
        </member>
        <member name="T:Pub.Class.Data.DbConnectionOwnership">
            <summary>
            枚举,标识数据库连接是由BaseDbHelper提供还是由调用者提供
            </summary>
        </member>
        <member name="F:Pub.Class.Data.DbConnectionOwnership.Internal">
            <summary>由BaseDbHelper提供连接</summary>
        </member>
        <member name="F:Pub.Class.Data.DbConnectionOwnership.External">
            <summary>由调用者提供连接</summary>
        </member>
        <member name="T:Pub.Class.BulkCopyOptions">
            <summary>
            大数据复制选项
            </summary>
        </member>
        <member name="F:Pub.Class.BulkCopyOptions.Default">
            <summary>
            对所有选项使用默认值
            </summary>
        </member>
        <member name="F:Pub.Class.BulkCopyOptions.KeepIdentity">
            <summary>
            保留源标识值。如果未指定，则由目标分配标识值
            </summary>
        </member>
        <member name="F:Pub.Class.BulkCopyOptions.CheckConstraints">
            <summary>
            请在插入数据的同时检查约束。默认情况下，不检查约束
            </summary>
        </member>
        <member name="F:Pub.Class.BulkCopyOptions.TableLock">
            <summary>
            在批量复制操作期间获取批量更新锁。如果未指定，则使用行锁
            </summary>
        </member>
        <member name="F:Pub.Class.BulkCopyOptions.KeepNulls">
            <summary>
            保留目标表中的空值，而不管默认值的设置如何。如果未指定，则空值将由默认值替换（如果适用）。
            </summary>
        </member>
        <member name="F:Pub.Class.BulkCopyOptions.FireTriggers">
            <summary>
            指定后，会导致服务器为插入到数据库中的行激发插入触发器。
            </summary>
        </member>
        <member name="F:Pub.Class.BulkCopyOptions.UseInternalTransaction">
            <summary>
            如果已指定，则每一批批量复制操作将在事务中发生。如果指示了此选项，并且为构造函数提供了 System.Data.SqlClient.SqlTransaction
            对象，则发生 System.ArgumentException。
            </summary>
        </member>
        <member name="T:Pub.Class.Rand">
            <summary>
            生成随机数类
            
            修改纪录
                2006.05.09 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.Rand.RndInt(System.Int32,System.Int32)">
            <summary>
            数字随机数
            </summary>
            <param name="num1">开始</param>
            <param name="num2">结束</param>
            <returns>从多少到多少之间的数据 包括开始不包括结束</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndInt(System.Int32,System.Int32,System.Int32)">
            <summary>
            数字随机数 列表
            </summary>
            <param name="num1">开始</param>
            <param name="num2">结束</param>
            <param name="len">长</param>
            <returns>数字随机数 列表</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndInt(System.Int32)">
            <summary>
            数字随机数 列表
            </summary>
            <param name="len">长</param>
            <returns>数字随机数 列表</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndNum(System.Int32)">
            <summary>
            数字随机数
            </summary>
            <param name="len">生成长度</param>
            <returns>返回指定长度的数字随机串</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndNum(System.Int32,System.Int32)">
            <summary>
            数字随机数列表
            </summary>
            <param name="len">长</param>
            <param name="count">行</param>
            <returns>数字随机数列表</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndDateStr">
            <summary>
            日期随机函数
            </summary>
            <returns>返回日期随机串</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndDateStr(System.Int32)">
            <summary>
            日期随机函数列表
            </summary>
            <param name="len">长</param>
            <returns>日期随机函数列表</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndCode(System.Int32)">
            <summary>
            数字和字母随机数
            </summary>
            <param name="len">生成长度</param>
            <returns>返回指定长度的数字和字母的随机串</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndCodeList(System.Int32,System.Int32)">
            <summary>
            数字和字母随机数表列
            </summary>
            <param name="len">长</param>
            <param name="count">行</param>
            <returns>数字和字母随机数表列</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndLetter(System.Int32)">
            <summary>
            字母随机数
            </summary>
            <param name="len">生成长度</param>
            <returns>返回指定长度的字母随机数</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndLetterList(System.Int32,System.Int32)">
            <summary>
            字母随机数列表
            </summary>
            <param name="len">生成长度</param>
            <param name="count">行</param>
            <returns>字母随机数列表</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndGuid">
            <summary>
            生成GUID
            </summary>
            <returns>生成GUID</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndGuid(System.Int32)">
            <summary>
            生成GUID 列表
            </summary>
            <param name="len">长</param>
            <returns>生成GUID 列表</returns>
        </member>
        <member name="M:Pub.Class.Rand.RndColor(System.Boolean)">
            <summary>
            随机颜色
            </summary>
            <param name="iUseAlpha">使用透明</param>
            <returns>随机颜色</returns>
        </member>
        <member name="M:Pub.Class.Rand.RandColor">
            <summary>
            随机颜色字符串
            </summary>
            <returns>随机颜色字符串</returns>
        </member>
        <member name="M:Pub.Class.Rand.RandColor(System.Int32)">
            <summary>
            随机颜色字符串列表
            </summary>
            <param name="len">长</param>
            <returns>随机颜色字符串列表</returns>
        </member>
        <member name="T:Pub.Class.DataTableEntityBuilder`1">
            <summary>
            DataTable转实体IList
            
            修改纪录
                2009.12.10 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            DataTableEntityBuilder&lt;TResult> eblist = DataTableEntityBuilder&lt;TResult>.CreateBuilder(dt.Rows[0]);
            foreach (DataRow info in dt.Rows) list.Add(eblist.Build(info));
            </example>
            </code>
            </summary>
            <typeparam name="Entity">实体类</typeparam>
        </member>
        <member name="M:Pub.Class.DataTableEntityBuilder`1.Build(System.Data.DataRow)">
            <summary>
            绑定DataRow
            </summary>
            <param name="dataRecord">DataRow</param>
            <returns>绑定DataRow</returns>
        </member>
        <member name="M:Pub.Class.DataTableEntityBuilder`1.CreateBuilder(System.Data.DataRow)">
            <summary>
            DataRow转实体
            </summary>
            <param name="dataRecord">DataRow</param>
            <returns>DataRow转实体</returns>
        </member>
        <member name="T:Pub.Class.UrlParameter">
            <summary>
            参数
            
            修改纪录
                2011.12.01 版本：1.0 livexy 创建此类
            
            <code>
            <example>
            List&lt;UrlParameter> param = new List&lt;UrlParameter>();
            param.Add(new UrlParameter("oauth_callback", config.RedirectUrl.UrlEncode2()));
            param.Add(new UrlParameter("oauth_consumer_key", config.AppKey));
            param.Add(new UrlParameter("oauth_nonce", OAuthCommon.GetGUID32()));
            param.Add(new UrlParameter("oauth_signature_method", "HMAC-SHA1"));
            param.Add(new UrlParameter("oauth_timestamp", OAuthCommon.GetTimestamp()));
            param.Add(new UrlParameter("oauth_version", "1.0"));
            param.Add(new UrlParameter("scope", "create_records"));
            param.Sort(new UrlParameterCompre());
            </example>
            </code>
            </summary>
        </member>
        <member name="F:Pub.Class.UrlParameter.ParameterName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="F:Pub.Class.UrlParameter.ParameterValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="M:Pub.Class.UrlParameter.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="Name">参数名称</param>
            <param name="Value">参数值</param>
        </member>
        <member name="M:Pub.Class.UrlParameter.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="Name">参数名称</param>
            <param name="Value">参数值</param>
        </member>
        <member name="M:Pub.Class.UrlParameter.ToString">
            <summary>
            返回字符串
            </summary>
            <returns>返回字符串</returns>
        </member>
        <member name="M:Pub.Class.UrlParameter.ToEncodeString">
            <summary>
            返回Url Encode字符串
            </summary>
            <returns>返回字符串</returns>
        </member>
        <member name="T:Pub.Class.UrlParameterCompre">
            <summary>
            参数排序
            
            修改纪录
                2011.12.01 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.UrlParameterCompre.Compare(Pub.Class.UrlParameter,Pub.Class.UrlParameter)">
            <summary>
            参数排序
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.PagerSql">
            <summary>
            分页SQL实体类
            </summary>
        </member>
        <member name="P:Pub.Class.PagerSql.CountSql">
            <summary>
            统计记录数SQL
            </summary>
        </member>
        <member name="P:Pub.Class.PagerSql.DataSql">
            <summary>
            取数据SQL
            </summary>
        </member>
        <member name="T:Pub.Class.ISymmetryCryptor">
            <summary>
            对称加密接口
            
            修改纪录
                2010.01.12 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.ISymmetryCryptor.Initialize(System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            初始化
            </summary>
            <param name="mode">CipherMode</param>
            <param name="padding">PaddingMode</param>
        </member>
        <member name="M:Pub.Class.ISymmetryCryptor.EncryptStream(System.Byte[],System.String)">
            <summary>
            加密流
            </summary>
            <param name="source"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ISymmetryCryptor.EncryptStream(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            加密流
            </summary>
            <param name="source"></param>
            <param name="offset"></param>
            <param name="toEncrpyLen"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ISymmetryCryptor.DecryptStream(System.Byte[],System.String)">
            <summary>
            解密流
            </summary>
            <param name="bytesEncoded"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ISymmetryCryptor.DecryptStream(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            解密流
            </summary>
            <param name="bytesEncoded"></param>
            <param name="offset"></param>
            <param name="toDecrpyLen"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ISymmetryCryptor.EncryptString(System.String,System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="source"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ISymmetryCryptor.DecryptString(System.String,System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="strEncoded"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Pub.Class.ISymmetryCryptor.Encoding">
            <summary>
            对称加密编码
            </summary>
        </member>
        <member name="P:Pub.Class.ISymmetryCryptor.SymmetricAlgorithmType">
            <summary>
            SymmetricAlgorithmType 采用的加密算法类型。
            如果是DES加密，则要求64位密匙。
            如果是Rijndael加密，则支持 128、192 或 256 位的密钥长度。
            如果是RC2加密，则支持的密钥长度为从 40 位到 128 位，以 8 位递增。
            如果是TripleDES加密，则支持从 128 位到 192 位（以 64 位递增）的密钥长度。
            </summary>
        </member>
        <member name="T:Pub.Class.SymmetricAlgorithmType">
            <summary>
            支持DES, RC2, Rijndael, TripleDES
            </summary>
        </member>
        <member name="F:Pub.Class.SymmetricAlgorithmType.DES">
            <summary>
            DES
            </summary>
        </member>
        <member name="F:Pub.Class.SymmetricAlgorithmType.RC2">
            <summary>
            RC2
            </summary>
        </member>
        <member name="F:Pub.Class.SymmetricAlgorithmType.Rijndael">
            <summary>
            Rijndael
            </summary>
        </member>
        <member name="F:Pub.Class.SymmetricAlgorithmType.TripleDES">
            <summary>
            TripleDES
            </summary>
        </member>
        <member name="T:Pub.Class.SymmetryCryptor">
            <summary>
            对称加密算法
            </summary>
        </member>
        <member name="M:Pub.Class.SymmetryCryptor.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Pub.Class.SymmetryCryptor.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="iv">iv</param>
        </member>
        <member name="M:Pub.Class.SymmetryCryptor.Initialize(System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            初始化
            </summary>
            <param name="mode">CipherMode</param>
            <param name="padding">PaddingMode</param>
        </member>
        <member name="M:Pub.Class.SymmetryCryptor.EncryptStream(System.Byte[],System.String)">
            <summary>
            加密流
            </summary>
            <param name="source"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SymmetryCryptor.EncryptStream(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            加密流
            </summary>
            <param name="source"></param>
            <param name="offset"></param>
            <param name="toEncrpyLen"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SymmetryCryptor.DecryptStream(System.Byte[],System.String)">
            <summary>
            解密流
            </summary>
            <param name="bytesEncoded"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SymmetryCryptor.DecryptStream(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            解密流
            </summary>
            <param name="bytesEncoded"></param>
            <param name="offset"></param>
            <param name="toDecrpyLen"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SymmetryCryptor.EncryptString(System.String,System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="source"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.SymmetryCryptor.DecryptString(System.String,System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="strEncoded"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Pub.Class.SymmetryCryptor.Encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:Pub.Class.SymmetryCryptor.SymmetricAlgorithmType">
            <summary>
            SymmetricAlgorithmType
            </summary>
        </member>
        <member name="T:Pub.Class.ICache2">
            <summary>
            缓存接口
            
            修改纪录
                2006.05.01 版本：1.0 livexy 创建此接口
            
            </summary>
        </member>
        <member name="M:Pub.Class.ICache2.GetList">
            <summary>
            返回缓存对像列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.ICache2.Clear">
            <summary>
            清空所有缓存项目
            </summary>
        </member>
        <member name="M:Pub.Class.ICache2.RemoveByPattern(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="pattern">缓存键正则匹配模式</param>
        </member>
        <member name="M:Pub.Class.ICache2.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存键名</param>
        </member>
        <member name="M:Pub.Class.ICache2.Insert(System.String,System.Object)">
            <summary>
            增加缓存项目 
            </summary>
            <param name="key">缓存键名</param>
            <param name="obj">缓存对象</param>
        </member>
        <member name="M:Pub.Class.ICache2.Insert(System.String,System.Object,System.Int32)">
            <summary>
            增加缓存项目
            </summary>
            <param name="key">缓存键名</param>
            <param name="obj">缓存对象</param>
            <param name="seconds">缓存秒数</param>
        </member>
        <member name="M:Pub.Class.ICache2.Get(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="key">缓存键名</param>
            <returns>返回缓存对象</returns>
        </member>
        <member name="M:Pub.Class.ICache2.Get``1(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="key">缓存键名</param>
            <returns>返回缓存对象</returns>
        </member>
        <member name="M:Pub.Class.ICache2.ContainsKey(System.String)">
            <summary>
            键是否存在
            </summary>
            <param name="key">键</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.ICache2.Compress``1(System.String,``0)">
            <summary>
            缓存压缩
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <param name="obj">值</param>
        </member>
        <member name="M:Pub.Class.ICache2.Compress``1(System.String,``0,System.Int32)">
            <summary>
            缓存压缩
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <param name="obj">值</param>
            <param name="seconds">缓存秒数</param>
        </member>
        <member name="M:Pub.Class.ICache2.Decompress``1(System.String)">
            <summary>
            缓存解压
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="T:Pub.Class.ThreadEx">
            <summary>
            线程扩展
            </summary>
        </member>
        <member name="M:Pub.Class.ThreadEx.QueueWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            队列
            </summary>
            <param name="callBack"></param>
            <param name="userstate"></param>
        </member>
        <member name="M:Pub.Class.ThreadEx.WaitAllComplete">
            <summary>
            等待线程执行完成
            </summary>
            <example>
                <code>
                    ThreadEx tpe = new ThreadEx();
                    for (int i = 100; i > 0; i--) {
                        tpe.QueueWorkItem((state) => {
                            Console.WriteLine(state);
                        },i);
                    }
                    tpe.WaitAllComplete();
                    Console.WriteLine('执行完成！');
                </code>
            </example>
        </member>
        <member name="M:Pub.Class.ThreadEx.InParallel(System.Threading.ThreadStart[])">
            <summary>
            多个线程并行执行
            </summary>
            <param name="tasks">多任务</param>
        </member>
        <member name="M:Pub.Class.ThreadEx.InParallel(System.Int32,System.Threading.ThreadStart[])">
            <summary>
            多个线程并行执行
            </summary>
            <param name="maxThreads">最大线程数</param>
            <param name="tasks">多任务</param>
        </member>
        <member name="T:Pub.Class.ThreadPoolEx">
            <summary>
            线程池
            </summary>
        </member>
        <member name="M:Pub.Class.ThreadPoolEx.Execute(System.Int32,System.Collections.Generic.List{System.Threading.ThreadStart})">
            <summary>
            多线程调用 new ThreadPool().Execute(maxThreads, tasks);
            </summary>
            <param name="maxThreads"></param>
            <param name="tasks"></param>
        </member>
        <member name="T:Pub.Class.Request2">
            <summary>
            Requests操作类
            
            修改纪录
                2006.05.09 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.Request2.Get(System.String)">
            <summary>
            接收传值 包括POST/GET数据
            </summary>
            <param name="VarName">参数名称</param>
            <returns>参数对应的值</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetInt(System.String,System.Int32)">
            <summary>
            接收传值 包括POST/GET数据 返回int类型
            </summary>
            <param name="varName">参数名称</param>
            <param name="defValue">默认值</param>
            <returns>参数对应的值int类型</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetFloat(System.String,System.Int32)">
            <summary>
            接收传值 包括POST/GET数据 返回float类型
            </summary>
            <param name="varName">参数名称</param>
            <param name="defValue">默认值</param>
            <returns>参数对应的值float类型</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetQ(System.String)">
            <summary>
            取URL上的参数
            </summary>
            <param name="VarName">参数名</param>
            <returns>返回参数</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetQInt(System.String,System.Int32)">
            <summary>
            取URL上的参数 返回int类型
            </summary>
            <param name="varName">参数名</param>
            <param name="defValue">默认值</param>
            <returns>返回参数int类型</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetQLong(System.String,System.Int64)">
            <summary>
            取URL上的参数 返回long类型
            </summary>
            <param name="varName">参数名</param>
            <param name="defValue">默认值</param>
            <returns>返回参数long类型</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetQFloat(System.String,System.Int32)">
            <summary>
            取URL上的参数 返回float类型
            </summary>
            <param name="varName">参数名</param>
            <param name="defValue">默认值</param>
            <returns>返回参数float类型</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetF(System.String)">
            <summary>
            取POST提交的数据 
            </summary>
            <param name="VarName">名称</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetFInt(System.String,System.Int32)">
            <summary>
            取POST提交的数据 int类型
            </summary>
            <param name="varName">参数名</param>
            <param name="defValue">默认值</param>
            <returns>返回参数int类型</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetFLong(System.String,System.Int64)">
            <summary>
            取POST提交的数据 long类型
            </summary>
            <param name="varName">参数名</param>
            <param name="defValue">默认值</param>
            <returns>返回参数long类型</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetFFloat(System.String,System.Int32)">
            <summary>
            取POST提交的数据 float类型
            </summary>
            <param name="varName">参数名</param>
            <param name="defValue">默认值</param>
            <returns>返回参数long类型</returns>
        </member>
        <member name="M:Pub.Class.Request2.IsPost">
            <summary>
            判断当前页面是否接收到了Post请求
            </summary>
            <returns>是否接收到了Post请求</returns>
        </member>
        <member name="M:Pub.Class.Request2.IsGet">
            <summary>
            判断当前页面是否接收到了Get请求
            </summary>
            <returns>是否接收到了Get请求</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetServerString(System.String)">
            <summary>
            返回指定的服务器变量信息
            </summary>
            <param name="strName">服务器变量名</param>
            <returns>服务器变量信息</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetRawUrl">
            <summary>
            获取当前请求的原始 URL(URL 中域信息之后的部分,包括查询字符串(如果存在))
            </summary>
            <returns>原始 URL</returns>
        </member>
        <member name="M:Pub.Class.Request2.IsBrowserGet">
            <summary>
            判断当前访问是否来自浏览器软件
            </summary>
            <returns>当前访问是否来自浏览器软件</returns>
        </member>
        <member name="M:Pub.Class.Request2.IsSearchEnginesGet">
            <summary>
            判断是否来自搜索引擎链接
            </summary>
            <returns>是否来自搜索引擎链接</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetPageName">
            <summary>
            获得当前页面的名称
            </summary>
            <returns>当前页面的名称</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetParamCount">
            <summary>
            返回表单或Url参数的总个数
            </summary>
            <returns>返回表单或Url参数的总个数</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetQParamCount">
            <summary>
            URL参数个数
            </summary>
            <returns>URL参数个数</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetFParamCount">
            <summary>
            表单数据个数
            </summary>
            <returns>表单数据个数</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetCurrentFullHost">
            <summary>
            取全IP包括端口
            </summary>
            <returns>IP和端口</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetHost">
            <summary>
            取主机名
            </summary>
            <returns>取主机名</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetUrl">
            <summary>
            前台URL
            </summary>
            <returns>前台URL</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetRelativeRoot">
            <summary>
            返回相对根路径 /开头
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Request2.GetRootUrl(System.String)">
            <summary>
            获取站点根目录URL {0}://{1}{2}{3}
            </summary>
            <param name="forumPath">站点目录对应URL</param>
            <returns>获取站点根目录URL</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetReferrer">
            <summary>
            来源URL
            </summary>
            <returns>来源URL</returns>
        </member>
        <member name="M:Pub.Class.Request2.SaveRequestFile(System.String)">
            <summary>
            保存Request文件
            </summary>
            <param name="path">保存到文件名</param>
        </member>
        <member name="M:Pub.Class.Request2.GetIP">
            <summary>
            取IP
            </summary>
            <returns>返回IP</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetOS">
            <summary>
            取操作系统
            </summary>
            <returns>返回操作系统</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetClientOS">
            <summary>
            获得操作系统信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Request2.GetBrowser">
            <summary>
            取游览器
            </summary>
            <returns>返回游览器</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetClientBrower">
            <summary>
            获得浏览器信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Request2.GetRequest">
            <summary>
            遍历 get/post 数据
            </summary>
            <returns>遍历 get/post 数据</returns>
        </member>
        <member name="M:Pub.Class.Request2.GetRequestInputStream">
            <summary>
            GetRequestInputStream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Request2.GetRequestInputStream(System.Text.Encoding)">
            <summary>
            GetRequestInputStream
            </summary>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Request2.GetRequestUTF8">
            <summary>
            GetRequest
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Request2.GetRequest(System.Text.Encoding)">
            <summary>
            GetRequest
            </summary>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Request2.IsPostFile">
            <summary>
            判断是否有上传的文件
            </summary>
            <returns>是否有上传的文件</returns>
        </member>
        <member name="M:Pub.Class.Request2.IsMobile">
            <summary>
            手机否
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Request2.IsMobile2">
            <summary>
            手机否
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Request2.IsMono">
            <summary>
            IsMono
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:Pub.Class.Request2.IsLinux">
            <summary>
            IsLinux
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="T:Pub.Class.XmlNodeExtensions">
            <summary>
            XDocument XmlNode
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.XmlNodeExtensions.FromXDoc``1(System.Xml.Linq.XDocument)">
            <summary>
            XDocument 转对像
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="xdoc">XDocument扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.XmlNodeExtensions.CreateChildNode(System.Xml.XmlNode,System.String)">
            <summary>
            添加子节点
            </summary>
            <param name="parentNode">XmlNode扩展</param>
            <param name="name">节点名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.XmlNodeExtensions.CreateChildNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            添加子节点
            </summary>
            <param name="parentNode">XmlNode扩展</param>
            <param name="name">节点名</param>
            <param name="namespaceUri"></param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.XmlNodeExtensions.CreateCDataSection(System.Xml.XmlNode)">
            <summary>
            添加CData节点
            </summary>
            <param name="parentNode">XmlNode扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.XmlNodeExtensions.CreateCDataSection(System.Xml.XmlNode,System.String)">
            <summary>
            添加CData节点
            </summary>
            <param name="parentNode">XmlNode扩展</param>
            <param name="data">DATA</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.XmlNodeExtensions.GetCDataSection(System.Xml.XmlNode)">
            <summary>
            取CData节点
            </summary>
            <param name="parentNode">XmlNode扩展</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            取节点属性
            </summary>
            <param name="node">XmlNode扩展</param>
            <param name="attributeName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            取节点属性
            </summary>
            <param name="node">XmlNode扩展</param>
            <param name="attributeName">属性名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.XmlNodeExtensions.GetAttribute``1(System.Xml.XmlNode,System.String)">
            <summary>
            取节点属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">XmlNode扩展</param>
            <param name="attributeName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.XmlNodeExtensions.GetAttribute``1(System.Xml.XmlNode,System.String,``0)">
            <summary>
            取节点属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">XmlNode扩展</param>
            <param name="attributeName">属性名</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            设置节点属性值
            </summary>
            <param name="node">XmlNode扩展</param>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:Pub.Class.XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            设置节点属性值
            </summary>
            <param name="node">XmlNode扩展</param>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="T:Pub.Class.ImagesHandler">
            <summary>
            图片防止盗链
            
            修改纪录
                2011.07.10 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.ImagesHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            ProcessRequest
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Pub.Class.ImagesHandler.IsReusable">
            <summary>
            IsReusable
            </summary>
        </member>
        <member name="T:Pub.Class.HttpResponseExtensions">
            <summary>
            HttpResponse扩展
            
            修改纪录
                2009.06.25 版本：1.0 livexy 创建此类
            
            </summary>
        </member>
        <member name="M:Pub.Class.HttpResponseExtensions.Reload(System.Web.HttpResponse)">
            <summary>
            刷新
            </summary>
            <param name="response">HttpResponse扩展</param>
        </member>
        <member name="M:Pub.Class.HttpResponseExtensions.Redirect(System.Web.HttpResponse,System.String,System.Object[])">
            <summary>
            跳转
            </summary>
            <param name="response">HttpResponse扩展</param>
            <param name="urlFormat">url format</param>
            <param name="values">值</param>
        </member>
        <member name="M:Pub.Class.HttpResponseExtensions.Redirect(System.Web.HttpResponse,System.String,System.Boolean,System.Object[])">
            <summary>
            跳转
            </summary>
            <param name="response">HttpResponse扩展</param>
            <param name="urlFormat">url format</param>
            <param name="endResponse">是否终止</param>
            <param name="values">值</param>
        </member>
        <member name="M:Pub.Class.HttpResponseExtensions.SetFileNotFound(System.Web.HttpResponse)">
            <summary>
            FileNotFound 错误提示
            </summary>
            <param name="response">HttpResponse扩展</param>
        </member>
        <member name="M:Pub.Class.HttpResponseExtensions.SetFileNotFound(System.Web.HttpResponse,System.Boolean)">
            <summary>
            404 错误提示
            </summary>
            <param name="response">HttpResponse扩展</param>
            <param name="endResponse">是否终止</param>
        </member>
        <member name="M:Pub.Class.HttpResponseExtensions.SetInternalServerError(System.Web.HttpResponse)">
            <summary>
            InternalServer 错误提示
            </summary>
            <param name="response">HttpResponse扩展</param>
        </member>
        <member name="M:Pub.Class.HttpResponseExtensions.SetInternalServerError(System.Web.HttpResponse,System.Boolean)">
            <summary>
            500 错误提示
            </summary>
            <param name="response">HttpResponse扩展</param>
            <param name="endResponse">是否终止</param>
        </member>
        <member name="M:Pub.Class.HttpResponseExtensions.SetStatus(System.Web.HttpResponse,System.Int32,System.String,System.Boolean)">
            <summary>
            出错
            </summary>
            <param name="response">HttpResponse扩展</param>
            <param name="code">HTML 状态代码</param>
            <param name="description">HTML 状态字符串</param>
            <param name="endResponse">是否终止</param>
        </member>
        <member name="T:Pub.Class.Email">
            <summary>
            发送EMAIL
            
            修改纪录
                2012.02.20 版本：1.0 livexy 创建此类
            
            <example>
            <code>
            var email = new Email("Pub.Class.SmtpClient.SendEmail,Pub.Class.SmtpClient")
                .Host("smtp.163.com").Port(25)
                .From("熊华春", "cexo255@163.com")
                .Body("测试数据")
                .Subject("测试")
                .IsBodyHtml(true)
                .Credentials("cexo255@163.com", "cexo851029")
                .To(to => to.Add("hcxiong@elibiz.com"))
                .Cc(cc => cc.Add("cexo255@163.com"))
                .Send();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Pub.Class.Email.#ctor(System.String,System.String)">
            <summary>
            构造器 指定DLL文件和全类名
            </summary>
            <param name="dllFileName">dll文件名</param>
            <param name="className">命名空间.类名</param>
        </member>
        <member name="M:Pub.Class.Email.#ctor(System.String)">
            <summary>
            构造器 指定classNameDllName(EmailProviderName) 默认Pub.Class.SmtpClient.SendEmail,Pub.Class.SmtpClient
            </summary>
            <param name="classNameAndAssembly">命名空间.类名,程序集名称</param>
        </member>
        <member name="M:Pub.Class.Email.#ctor">
            <summary>
            构造器 从Web.config中读EmailProviderName 默认Pub.Class.SmtpClient.SendEmail,Pub.Class.SmtpClient
            </summary>
        </member>
        <member name="M:Pub.Class.Email.#ctor(System.String,System.Int32)">
            <summary>
            构造器 直接发送 不需要指定EmailProviderName或classNameDllName
            </summary>
            <param name="host">SMTP 事务的主机的名称或 IP 地址</param>
            <param name="port">host 上使用的端口</param>
        </member>
        <member name="M:Pub.Class.Email.InternalDispose">
            <summary>
            用using 自动释放
            </summary>
        </member>
        <member name="M:Pub.Class.Email.From(System.String)">
            <summary>
             From显示名称和地址
            </summary>
            <param name="fromMail">From显示地址</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.From(System.String,System.String)">
            <summary>
             From显示名称和地址
            </summary>
            <param name="fromDisplayName">From显示名称</param>
            <param name="fromMail">From显示地址</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.To(System.Func{Pub.Class.Email.MailAddresses,Pub.Class.Email.MailAddresses})">
            <summary>
             添加发送邮件地址
            </summary>
            <param name="mailAddresses">邮件地址</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.ClearTo">
            <summary>
            移除所有发送的EMAIL地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Email.AddAttachment(System.String)">
            <summary>
            添加附件
            </summary>
            <param name="filePath">附件路径</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.Cc(System.Func{Pub.Class.Email.MailAddresses,Pub.Class.Email.MailAddresses})">
            <summary>
             添加发送邮件地址
            </summary>
            <param name="mailAddresses">邮件地址</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.ClearCc">
            <summary>
            移除所有抄送的EMAIL地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Email.Bcc(System.Func{Pub.Class.Email.MailAddresses,Pub.Class.Email.MailAddresses})">
            <summary>
             添加发送邮件地址
            </summary>
            <param name="mailAddresses">邮件地址</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.ClearBcc">
            <summary>
            移除所有密件抄送的EMAIL地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Email.Clear">
            <summary>
            移除所有To/Cc/Bcc的EMAIL地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pub.Class.Email.Subject(System.String)">
            <summary>
             发送标题
            </summary>
            <param name="subject">标题</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.Body(System.String)">
            <summary>
             发送内容
            </summary>
            <param name="body">内容</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.SubjectEncoding(System.Text.Encoding)">
            <summary>
             发送标题编码
            </summary>
            <param name="subjectEncoding">标题编码</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.BodyEncoding(System.Text.Encoding)">
            <summary>
             发送内容编码
            </summary>
            <param name="bodyEncoding">内容编码</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.IsBodyHtml(System.Boolean)">
            <summary>
             内容是否以HTML形式发送
            </summary>
            <param name="isBodyHtml">是否以HTML形式发送 true/false</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.UseDefaultCredentials(System.Boolean)">
            <summary>
             如果使用默认凭据，则为 true；否则为 false。默认值为 false。
            </summary>
            <param name="useDefaultCredentials">如果使用默认凭据，则为 true；否则为 false。默认值为 true。</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.Host(System.String)">
            <summary>
             邮件服务器主机
            </summary>
            <param name="host">邮件服务器主机</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.Server(System.String,System.Int32)">
            <summary>
             邮件服务器
            </summary>
            <param name="host">邮件服务器主机</param>
            <param name="port">指定的端口</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.Port(System.Int32)">
            <summary>
             指定的端口
            </summary>
            <param name="port">指定的端口</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.Ssl(System.Boolean)">
            <summary>
             是否启用SSL
            </summary>
            <param name="enableSsl">是否启用SSL</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.Credentials(System.String,System.String)">
            <summary>
             定义要使用的凭据发送邮件（NetworkCredentials）
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.Credentials(System.String,System.String,System.String)">
            <summary>
             定义要使用的凭据发送邮件（NetworkCredentials）
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="domain">域</param>
            <returns>Email(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.Send">
            <summary>
             发送
            </summary>
            <example>
             <code>
                 var Email = new Email("smtp.gmail.com", 587);
                 Email
                     .From("Andre Carrilho", "me@mymail.com")
                     .To(to => to.Add("Andre Carrilho", "anotherme@mymail.com"))
                     .Bcc(bcc => bcc.Add(mailsWithDisplayNames))
                     .Cc(cc => cc.Add(justMails))
                     .Body("Trying out the Email class with some Html: &lt;p style='font-weight:bold;color:blue;font-size:32px;'>html&lt;/p>")
                     .Subject("Testing Fluent Email")
                     .IsBodyHtml(true)
                     .Credentials("someUser", "somePass")
                     .Port(1234)
                     .Ssl(true)
                     .Send();
             </code>
            </example>
            <returns>true/false</returns>
        </member>
        <member name="P:Pub.Class.Email.Message">
            <summary>
             实例化MailMessage
            </summary>
        </member>
        <member name="P:Pub.Class.Email.ErrorMessage">
            <summary>
            出错消息
            </summary>
        </member>
        <member name="T:Pub.Class.Email.MailAddresses">
            <summary>
             MailAddresses类
            </summary>
        </member>
        <member name="M:Pub.Class.Email.MailAddresses.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Pub.Class.Email.MailAddresses.Add(System.String)">
            <summary>
             添加一个新的邮件地址
            </summary>
            <param name="mail">邮件地址</param>
            <returns>MailAddresses(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.MailAddresses.Add(System.String,System.String)">
            <summary>
             添加一个新的邮件地址
            </summary>
            <param name="displayName">显示名称</param>
            <param name="mail">邮件地址</param>
            <returns>MailAddresses(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.MailAddresses.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             添加一个新的邮件地址
            </summary>
            <param name="mails">邮件列表</param>
            <returns>MailAddresses(this)</returns>
        </member>
        <member name="M:Pub.Class.Email.MailAddresses.Add(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             添加一个新的邮件地址
            </summary>
            <param name="contacts">邮件列表</param>
            <returns>MailAddresses(this)</returns>
        </member>
    </members>
</doc>
