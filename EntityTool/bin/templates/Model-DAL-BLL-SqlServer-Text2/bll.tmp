//------------------------------------------------------------
// $CopyRight
//------------------------------------------------------------

using System;
using System.Data.Common;
using System.Data;
using System.Data.OleDb;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using ${Project}.Model;
using ${Project}.IDAL;
using Pub.Class;

namespace ${Project}.BLL {
    /// <summary>
    /// ${TableNameCN}操作类
    /// 
    /// 修改纪录
    ///     ${Now} 版本：1.0 系统自动创建此类
    /// 
    /// </summary>
    public partial class ${TableName}BLL {
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}缓存多少秒 x 5
        /// </summary>
        public static int cacheSeconds = $CacheTime;
        private static readonly I${TableName}DAL dal = (I${TableName}DAL)"${Project}.{0}DAL.dll".FormatWith(Data.DBType).LoadClass("${Project}.{0}DAL.${TableName}DAL".FormatWith(Data.DBType));
#end

#if($currTableOP.Insert)
        /// <summary>
        /// ${TableNameCN}添加记录
        /// </summary>
#if($CacheTime>0)
        public static #if($helper.IsNull($PKInfo.ColumnName))bool#else${PKInfo.ColumnType}#end Insert(${TableName} $helper.LowerFirstChar2(${TableName}), string[] delCache = null, string dbkey = "") {
            dal.SetCacheTime(cacheSeconds);
            return dal.Insert($helper.LowerFirstChar2(${TableName}), delCache, dbkey);
        }
#else
        public static #if($helper.IsNull($PKInfo.ColumnName))bool#else${PKInfo.ColumnType}#end Insert(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "") {
            dal.SetCacheTime(cacheSeconds);
            return dal.Insert($helper.LowerFirstChar2(${TableName}), dbkey);
        }
#end
#end
#if($currTableOP.Update && $NoPKFields.Count>0 && $PKFields.Count>0)
        /// <summary>
        /// ${TableNameCN}修改记录
        /// </summary>
#if($CacheTime>0)
        public static bool Update(${TableName} $helper.LowerFirstChar2(${TableName}), string where = "", string[] delCache = null, string dbkey = "") {
            dal.SetCacheTime(cacheSeconds);
            return dal.Update($helper.LowerFirstChar2(${TableName}), where, delCache, dbkey);
        }
#else
        public static bool Update(${TableName} $helper.LowerFirstChar2(${TableName}), string where = "", string dbkey = "") {
            dal.SetCacheTime(cacheSeconds);
            return dal.Update($helper.LowerFirstChar2(${TableName}), where, dbkey);
        }
#end
#end
#if($currTableOP.DeleteByID && $PKFields.Count>0)
        /// <summary>
        /// ${TableNameCN}删除记录
        /// </summary>
#if($CacheTime>0)
        public static bool DeleteByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end string where = "", string[] delCache = null, string dbkey = "") {
            dal.SetCacheTime(cacheSeconds);
            return dal.DeleteByID(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end where, delCache, dbkey);
        }
#else
        public static bool DeleteByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end string where = "", string dbkey = "") {
            dal.SetCacheTime(cacheSeconds);
            return dal.DeleteByID(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end where, dbkey);
        }
#end
#end
#if($currTableOP.IsExistByID && $PKFields.Count>0)
        /// <summary>
        /// ${TableNameCN}删除记录
        /// </summary>
        public static bool IsExistByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end string where = "", string dbkey = "") {
            return dal.IsExistByID(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end where, dbkey);
        }
#end
#if($currTableOP.SelectByID && $PKFields.Count>0)
        /// <summary>
        /// ${TableNameCN}查询指定记录
        /// </summary>
#if($CacheTime>0)
        public static ${TableName} SelectByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end string where = "", string dbkey = "") {
            dal.SetCacheTime(cacheSeconds);
            return dal.SelectByID(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end where, Base.UseCache, dbkey);
        }
#else
        public static ${TableName} SelectByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end string where = "", string dbkey = "") {
            dal.SetCacheTime(cacheSeconds);
            return dal.SelectByID(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end where, dbkey);
        }
#end
#if($CacheTime>0)
        /// <summary>
        /// 清除${TableNameCN}查询指定记录的缓存
        /// </summary>
        public static void ClearCacheSelectByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end string where = "") {
            string cacheName = "${TableName}Cache_SelectByID_{0}";
            string cacheNameKey = string.Format(cacheName, #foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName}) + "_" + #end "_" + where);
            Cache2.Remove(cacheNameKey);
        }
#end
#end
#if($currTableOP.SelectPageList)
        /// <summary>
        /// ${TableNameCN}查询指定条件记录分页 IL
        /// </summary>
#if($CacheTime>0)
        public static IList<${TableName}> SelectPageList(int pageIndex, int pageSize, out int totalRecords, string where = "", string order = "", string fieldList = "", string dbkey = "", PagerSQLEnum pageEnum = PagerSQLEnum.row_number) {
            dal.SetCacheTime(cacheSeconds);
            return dal.SelectPageList(pageIndex, pageSize, out totalRecords, where, order, fieldList, Base.UseCache, dbkey, pageEnum);
        }
#else
        public static IList<${TableName}> SelectPageList(int pageIndex, int pageSize, out int totalRecords, string where = "", string order = "", string fieldList = "", string dbkey = "", PagerSQLEnum pageEnum = PagerSQLEnum.row_number) {
            dal.SetCacheTime(cacheSeconds);
            return dal.SelectPageList(pageIndex, pageSize, out totalRecords, where, order, fieldList, dbkey, pageEnum);
        }
#end
#if($CacheTime>0)
        /// <summary>
        /// 清除${TableNameCN}查询指定条件记录分页缓存
        /// </summary>
        public static void ClearCacheSelectPageList() {
            string cacheNameKey = "${TableName}Cache_SelectPageList_(.+?)";
            string cacheRecordsKey = "${TableName}Cache_RecordsSelectPageList_(.+?)";
            Cache2.RemoveByPattern(cacheNameKey);
            Cache2.RemoveByPattern(cacheRecordsKey);
        }
#end
#end
#if($currTableOP.SelectListByFK && $FKFields.Count>0)
#if($CacheTime>0)
#foreach ($FieldInfo in $FKFields)
        /// <summary>
        /// ${TableNameCN}查询指定外键记录
        /// </summary>
        public static IList<${TableName}> SelectListBy${FieldInfo.ColumnName}(${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), string where = "", string order = "", string fieldList = "", string dbkey = "") {
            dal.SetCacheTime(cacheSeconds);
            return dal.SelectListBy${FieldInfo.ColumnName}($helper.LowerFirstChar2(${FieldInfo.ColumnName}), where, order, fieldList, Base.UseCache, dbkey);
        }
        /// <summary>
        /// 清除${TableNameCN}查询指定外键记录缓存
        /// </summary>
        public static void ClearCacheSelectListBy${FieldInfo.ColumnName}(${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), string where = "", string order = "", string fieldList = "") {
            string cacheName = "${TableName}Cache_SelectListBy${FieldInfo.ColumnName}_{0}_{1}_{2}_{3}";
            string cacheNameKey = string.Format(cacheName, $helper.LowerFirstChar2(${FieldInfo.ColumnName}), order, fieldList, where);
            Cache2.Remove(cacheNameKey);
        }
#end
#else
#foreach ($FieldInfo in $FKFields)
        public static IList<${TableName}> SelectListBy${FieldInfo.ColumnName}(${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), string where = "", string order = "", string fieldList = "", string dbkey = "") {
            dal.SetCacheTime(cacheSeconds);
            return dal.SelectListBy${FieldInfo.ColumnName}($helper.LowerFirstChar2(${FieldInfo.ColumnName}), where, order, fieldList, dbkey);
        }
#end
#end
#end
#if($currTableOP.SelectListByAll)
        /// <summary>
        /// ${TableNameCN}查询所有记录 IL
        /// </summary>
#if($CacheTime>0)
        public static IList<${TableName}> SelectListByAll(string where = "", string order = "", string fieldList = "", string dbkey = "") {
            dal.SetCacheTime(cacheSeconds);
            return dal.SelectListByAll(where, order, fieldList, Base.UseCache, dbkey);
        }
#else
        public static IList<${TableName}> SelectListByAll(string where = "", string order = "", string fieldList = "", string dbkey = "") {
            dal.SetCacheTime(cacheSeconds);
            return dal.SelectListByAll(where, order, fieldList, dbkey);
        }
#end
#if($CacheTime>0)
        /// <summary>
        /// 清除${TableNameCN}查询所有记录缓存
        /// </summary>
        public static void ClearCacheSelectListByAll() {
            Cache2.Remove("${TableName}Cache_SelectListByAll___");
        }
        /// <summary>
        /// 清除${TableNameCN}所有缓存
        /// </summary>
        public static void ClearCacheAll() {
            Cache2.RemoveByPattern("${TableName}Cache_(.+?)");
        }
#end
#end
    }
}
