//-------------------------------------------------------------------------------------------------------------------------------------
// $CopyRight
//-------------------------------------------------------------------------------------------------------------------------------------

using System;
using System.Data.Common;
using System.Data;
using System.Data.OleDb;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using ${Project}.Model;
using Pub.Class;

namespace ${Project}.IDAL {
    /// <summary>
    /// ${TableNameCN}操作接口
    /// 
    /// 修改纪录
    ///     ${Now} 版本：1.0 系统自动创建此接口
    /// 
    /// </summary>
    public partial interface I${TableName}DAL {
#if($currTableOP.Insert)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}添加记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="delCache">添加成功后清理的CACHE key，支持正则</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>#if($helper.IsNull($PKInfo.ColumnName))添加是否成功#else返回添加成功后的ID#end</returns>
        #if($helper.IsNull($PKInfo.ColumnName))bool#else${PKInfo.ColumnType}#end Insert(${TableName} $helper.LowerFirstChar2(${TableName}), string[] delCache = null, string dbkey = "");
#else
        /// <summary>
        /// ${TableNameCN}添加记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>#if($helper.IsNull($PKInfo.ColumnName))添加是否成功#else返回添加成功后的ID#end</returns>
        #if($helper.IsNull($PKInfo.ColumnName))bool#else${PKInfo.ColumnType}#end Insert(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "");
#end
#end
#if($currTableOP.Update && $NoPKFields.Count>0 && $PKFields.Count>0)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}修改记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="where">修改时附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="delCache">修改成功后清理的CACHE key，支持正则</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>修改是否成功</returns>
        bool Update(${TableName} $helper.LowerFirstChar2(${TableName}), Where where = null, string[] delCache = null, string dbkey = "");
#if ($PKFields.Count==1)
        /// <summary>
        /// ${TableNameCN}修改多条记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})List">${FieldInfo.Memo}列表，用“,”号分隔</param>
#end
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="where">修改时附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="delCache">修改成功后清理的CACHE key，支持正则</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>修改是否成功</returns>
        bool UpdateByIDList(#foreach($FieldInfo in $PKFields)IEnumerable<${FieldInfo.ColumnType}> $helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end ${TableName} $helper.LowerFirstChar2(${TableName}), Where where = null, string[] delCache = null, string dbkey = "");
#end
#else
        /// <summary>
        /// ${TableNameCN}修改记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="where">修改时附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>修改是否成功</returns>
        bool Update(${TableName} $helper.LowerFirstChar2(${TableName}), Where where = null, string dbkey = "");
#if ($PKFields.Count==1)
        /// <summary>
        /// ${TableNameCN}修改多条记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})List">${FieldInfo.Memo}列表，用“,”号分隔</param>
#end
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="where">修改时附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="delCache">修改成功后清理的CACHE key，支持正则</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>修改是否成功</returns>
        bool UpdateByIDList(#foreach($FieldInfo in $PKFields)IEnumerable<${FieldInfo.ColumnType}> $helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end ${TableName} $helper.LowerFirstChar2(${TableName}), Where where = null, string[] delCache = null, string dbkey = "");
#end
#end
#end
#if($currTableOP.UpdateAndInsert && $NoPKFields.Count>0 && $PKFields.Count>0)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}存在时修改记录，否则添加记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="where">修改时附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="delCache">修改成功后清理的CACHE key，支持正则</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>修改或添加是否成功</returns>
        #if($helper.IsNull($PKInfo.ColumnName))bool#else${PKInfo.ColumnType}#end UpdateAndInsert(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "", Where where = null, string[] delCache = null);
#else
        /// <summary>
        /// ${TableNameCN}存在时修改记录，否则添加记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="where">修改时附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>修改或添加是否成功</returns>
        bool UpdateAndInsert(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "", Where where = null);
#end
#end
#if($currTableOP.DeleteByID && $PKFields.Count>0)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}删除记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="where">修改时附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="delCache">删除成功后清理的CACHE key，支持正则</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>删除是否成功</returns>
        bool DeleteByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType}#if($FieldInfo.ColumnType != "string")?#end $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end Where where = null, string[] delCache = null, string dbkey = "");
#if ($PKFields.Count==1)
        /// <summary>
        /// ${TableNameCN}删除多条记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})List">${FieldInfo.Memo}列表，用“,”号分隔</param>
#end
        /// <param name="where">删除时附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="delCache">修改成功后清理的CACHE key，支持正则</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>删除是否成功</returns>
        bool DeleteByIDList(#foreach($FieldInfo in $PKFields)IEnumerable<${FieldInfo.ColumnType}> $helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end Where where = null, string[] delCache = null, string dbkey = "");
#end
#else
        /// <summary>
        /// ${TableNameCN}删除记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="where">删除时附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>删除是否成功</returns>
        bool DeleteByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType}#if($FieldInfo.ColumnType != "string")?#end $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end Where where = null, string dbkey = "");
#if ($PKFields.Count==1)
        /// <summary>
        /// ${TableNameCN}删除多条记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})List">${FieldInfo.Memo}列表，用“,”号分隔</param>
#end
        /// <param name="where">删除时附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>删除是否成功</returns>
        bool DeleteByIDList(#foreach($FieldInfo in $PKFields)IEnumerable<${FieldInfo.ColumnType}> $helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end Where where = null, string dbkey = "");
#end
#end
#end
#if($currTableOP.IsExistByID && $PKFields.Count>0)
        /// <summary>
        /// ${TableNameCN}记录是否存在
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="where">附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时使用ConnString连接</param>
        /// <returns>记录是否存在</returns>
        bool IsExistByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end Where where = null, string dbkey = "");
#end
#if($currTableOP.SelectByID && $PKFields.Count>0)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}按主键查询，返回数据的实体类
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="where">附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回单条记录的实体类</returns>
        ${TableName} SelectByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end Where where = null, string dbkey = "");
#else
        /// <summary>
        /// ${TableNameCN}按主键查询，返回数据的实体类
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="where">附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回单条记录的实体类</returns>
        ${TableName} SelectByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end Where where = null, string dbkey = "");
#end
#end
#if($currTableOP.SelectPageList)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}查询数据，带分页
        /// </summary>
        /// <param name="pageIndex">当前第几页，从1开始</param>
        /// <param name="pageSize">每页记录数</param>
        /// <param name="totalRecords">返回总记录数</param>
        /// <param name="where">附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="order">排序字段，不加“order by”</param>
        /// <param name="fieldList">设置需要返回的字段</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="pageEnum">使用哪种分页方式（not_in、max_top、top_top、row_number、mysql、oracle、sqlite）</param>
        /// <returns>返回实体记录集</returns>
        IList<${TableName}> SelectPageList(int pageIndex, int pageSize, out int totalRecords, Where where = null, string order = "", string fieldList = "", string dbkey = "", PagerSQLEnum pageEnum = PagerSQLEnum.row_number);
#else
        /// <summary>
        /// ${TableNameCN}查询记录，带分页
        /// </summary>
        /// <param name="pageIndex">当前第几页，从1开始</param>
        /// <param name="pageSize">每页记录数</param>
        /// <param name="totalRecords">返回总记录数</param>
        /// <param name="where">附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="order">排序字段，不加“order by”</param>
        /// <param name="fieldList">设置需要返回的字段</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="pageEnum">使用哪种分页方式（not_in、max_top、top_top、row_number、mysql、oracle、sqlite）</param>
        /// <returns>返回实体记录集</returns>
        IList<${TableName}> SelectPageList(int pageIndex, int pageSize, out int totalRecords, Where where = null, string order = "", string fieldList = "", string dbkey = "", PagerSQLEnum pageEnum = PagerSQLEnum.row_number);
#end
#end
#if($currTableOP.SelectListByFK && $FKFields.Count>0)
#if($CacheTime>0)
#foreach ($FieldInfo in $FKFields)
        /// <summary>
        /// ${TableNameCN}查询指定外键记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
        /// <param name="where">附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="order">排序字段，不加“order by”</param>
        /// <param name="fieldList">设置需要返回的字段</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回实体记录集</returns>
        IList<${TableName}> SelectListBy${FieldInfo.ColumnName}(${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), Where where = null, string order = "", string fieldList = "", string dbkey = "");
#end
#else
#foreach ($FieldInfo in $FKFields)
        /// <summary>
        /// ${TableNameCN}查询指定外键记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
        /// <param name="where">附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="order">排序字段，不加“order by”</param>
        /// <param name="fieldList">设置需要返回的字段</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回实体记录集</returns>
        IList<${TableName}> SelectListBy${FieldInfo.ColumnName}(${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), Where where = null, string order = "", string fieldList = "", string dbkey = "");
#end
#end
#end
#if($currTableOP.SelectListByAll)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}查询所有记录
        /// </summary>
        /// <param name="where">附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="order">排序字段，不加“order by”</param>
        /// <param name="fieldList">设置需要返回的字段</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回实体记录集</returns>
        IList<${TableName}> SelectListByAll(Where where = null, string order = "", string fieldList = "", string dbkey = "");
#else
        /// <summary>
        /// ${TableNameCN}查询所有记录
        /// </summary>
        /// <param name="where">附加条件，统一的前面要加链接符（and、or等等）</param>
        /// <param name="order">排序字段，不加“order by”</param>
        /// <param name="fieldList">设置需要返回的字段</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回实体记录集</returns>
        IList<${TableName}> SelectListByAll(Where where = null, string order = "", string fieldList = "", string dbkey = "");
#end
#end
    }
}
