//-------------------------------------------------------------------------------------------------------------------------------------
// $CopyRight
//-------------------------------------------------------------------------------------------------------------------------------------

using System;
using System.Data.Common;
using System.Data;
using System.Data.OleDb;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using ${Project}.Entity;
using Pub.Class;
using MongoDB.Driver;
using MongoDB.Bson;
using MongoDB.Driver.Builders;

namespace ${Project}.${DesignPatternExtName} {
    /// <summary>
    /// ${TableNameCN}操作类
    /// 
    /// 修改纪录
    ///     ${ProjectStartDate} 版本：1.0 系统自动创建此类
    /// 
    /// </summary>
    public partial class ${TableName}${DesignPatternExtName} {
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}缓存多少秒 x 5
        /// </summary>
        public static int cacheSeconds = $CacheTime;
#end
#if($currTableOP.Insert)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}添加记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="options">选项</param>
        /// <param name="delCache">添加成功后清理的CACHE key list，支持正则</param>
        /// <returns>添加是否成功</returns>
        public static bool Insert(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "", MongoInsertOptions options = null, string[] delCache = null) {
            var doc = new MongoSQL()
#foreach ($FieldInfo in $Fields)
                .Value(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName})
#end
                .BsonDocument();
            var col = Mongodb.Pool(dbkey).GetCollection("${TableName}");
            var result = options.IsNull() ? col.Insert(doc) : col.Insert(doc, options);
            if (delCache.IsNull()) return true;
            Cache2.Remove("${Project}.${TableName}Cache_", delCache);
            return true;
        }
        /// <summary>
        /// ${TableNameCN}添加记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <returns>添加是否成功</returns>
        public static bool Insert(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "") {
            return Insert($helper.LowerFirstChar2(${TableName}), dbkey, null, null);
        }
#else
        /// <summary>
        /// ${TableNameCN}添加记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="options">选项</param>
        /// <returns>添加是否成功</returns>
        public static bool Insert(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "", MongoInsertOptions options = null) {
            var doc = new MongoSQL()
#foreach ($FieldInfo in $Fields)
                .Value(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName})
#end
                .BsonDocument();
            var col = Mongodb.Pool(dbkey).GetCollection("${TableName}");
            var result = options.IsNull() ? col.Insert(doc) : col.Insert(doc, options);
            return true;
        }
        /// <summary>
        /// ${TableNameCN}添加记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <returns>添加是否成功</returns>
        public static bool Insert(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "") {
            return Insert($helper.LowerFirstChar2(${TableName}), dbkey, null);
        }
#end
#end
#if($currTableOP.Update && $NoPKFields.Count>0 && $PKFields.Count>0)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}修改记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="options">选项</param>
        /// <param name="query">修改时条件</param>
        /// <param name="delCache">修改成功后清理的CACHE key list，支持正则</param>
        /// <returns>修改是否成功</returns>
        public static bool Update(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "", MongoUpdateOptions options = null, IMongoQuery query = null, string[] delCache = null) {
            if (#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName}.#if($FieldInfo.ColumnType != "string")
IsNull#else
IsNullEmpty#end()#between
  && #end) return false;
            var update = new MongoSQL()
#foreach ($FieldInfo in $NoPKFields)
                .Value(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName})
#end
                .UpdateDocument();
            var _query = new MongoSQL()
#foreach ($FieldInfo in $PKFields)
                .Where(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName})
#end
                .QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            var col = Mongodb.Pool(dbkey).GetCollection("${TableName}");
            var result = options.IsNull() ? col.Update(_query, update) : col.Update(_query, update, options);
            if (delCache.IsNull()) return true;
            Cache2.Remove("${Project}.${TableName}Cache_", delCache);
            return true;
        }
        /// <summary>
        /// ${TableNameCN}修改记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <returns>修改是否成功</returns>
        public static bool Update(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "") {
            return Update($helper.LowerFirstChar2(${TableName}), dbkey, null, null, null);
        }
#if ($PKFields.Count==1)
        /// <summary>
        /// ${TableNameCN}修改多条记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})List">${FieldInfo.Memo}列表</param>
#end
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="options">选项</param>
        /// <param name="query">修改时条件</param>
        /// <param name="delCache">修改成功后清理的CACHE key list，支持正则</param>
        /// <returns>修改是否成功</returns>
        public static bool UpdateByIDList(#foreach($FieldInfo in $PKFields)IEnumerable<${FieldInfo.ColumnType}> $helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end ${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "", MongoUpdateOptions options = null, IMongoQuery query = null, string[] delCache = null) {
            var update = new MongoSQL()
#foreach ($FieldInfo in $NoPKFields)
                .Value(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName})
#end
                .UpdateDocument();
            var _query = new MongoSQL().Where(#foreach ($FieldInfo in $PKFields)${TableName}._${FieldInfo.ColumnName}#end, new BsonDocument("$in", new BsonArray(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName})List#end))).QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            var col = Mongodb.Pool(dbkey).GetCollection("${TableName}");
            var result = options.IsNull() ? col.Update(_query, update, UpdateFlags.Multi) : col.Update(_query, update, options);
            if (delCache.IsNull()) return true;
            Cache2.Remove("${Project}.${TableName}Cache_", delCache);
            return true;
        }
        /// <summary>
        /// ${TableNameCN}修改多条记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})List">${FieldInfo.Memo}列表</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <returns>修改是否成功</returns>
        public static bool UpdateByIDList(#foreach($FieldInfo in $PKFields)IEnumerable<${FieldInfo.ColumnType}> $helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end ${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "") {
            return UpdateByIDList(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end $helper.LowerFirstChar2(${TableName}), dbkey, null, null, null);
        }
#end
#else
        /// <summary>
        /// ${TableNameCN}修改记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="options">选项</param>
        /// <param name="query">修改时条件</param>
        /// <returns>修改是否成功</returns>
        public static bool Update(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "", MongoUpdateOptions options = null, IMongoQuery query = null) {
            if (#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName}.#if($FieldInfo.ColumnType != "string")
IsNull#else
IsNullEmpty#end()#between
  && #end) return false;
            var update = new MongoSQL()
#foreach ($FieldInfo in $NoPKFields)
                .Value(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName})
#end
                .UpdateDocument();
            var _query = new MongoSQL()
#foreach ($FieldInfo in $PKFields)
                .Where(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName})
#end
                .QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            var col = Mongodb.Pool(dbkey).GetCollection("${TableName}");
            var result = options.IsNull() ? col.Update(_query, update) : col.Update(_query, update, options);
            return true;
        }
        /// <summary>
        /// ${TableNameCN}修改记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <returns>修改是否成功</returns>
        public static bool Update(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "") {
            return Update($helper.LowerFirstChar2(${TableName}), dbkey, null, null);
        }
#if ($PKFields.Count==1)
        /// <summary>
        /// ${TableNameCN}修改多条记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})List">${FieldInfo.Memo}列表</param>
#end
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="options">选项</param>
        /// <param name="query">修改时条件</param>
        /// <param name="delCache">修改成功后清理的CACHE key list，支持正则</param>
        /// <returns>修改是否成功</returns>
        public static bool UpdateByIDList(#foreach($FieldInfo in $PKFields)IEnumerable<${FieldInfo.ColumnType}> $helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end ${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "", MongoUpdateOptions options = null, IMongoQuery query = null) {
            var update = new MongoSQL()
#foreach ($FieldInfo in $NoPKFields)
                .Value(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName})
#end
                .UpdateDocument();
            var _query = new MongoSQL().Where(#foreach ($FieldInfo in $PKFields)${TableName}._${FieldInfo.ColumnName}#end, new BsonDocument("$in", new BsonArray(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName})List#end))).QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            var col = Mongodb.Pool(dbkey).GetCollection("${TableName}");
            var result = options.IsNull() ? col.Update(_query, update, UpdateFlags.Multi) : col.Update(_query, update, options);
            return true;
        }
        /// <summary>
        /// ${TableNameCN}修改多条记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})List">${FieldInfo.Memo}列表</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <returns>修改是否成功</returns>
        public static bool UpdateByIDList(#foreach($FieldInfo in $PKFields)IEnumerable<${FieldInfo.ColumnType}> $helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end ${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "") {
            return UpdateByIDList(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end $helper.LowerFirstChar2(${TableName}), dbkey, null, null);
        }
#end
#end
#end
#if($currTableOP.UpdateAndInsert && $NoPKFields.Count>0 && $PKFields.Count>0)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}修改并添加
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="options">选项</param>
        /// <param name="query">修改时条件</param>
        /// <param name="delCache">修改成功后清理的CACHE key list，支持正则</param>
        /// <returns>修改或添加是否成功</returns>
        public static bool UpdateAndInsert(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "", MongoUpdateOptions options = null, IMongoQuery query = null, string[] delCache = null) {
            if (#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName}.#if($FieldInfo.ColumnType != "string")
IsNull#else
IsNullEmpty#end()#between
  && #end) return false;
            var update = new MongoSQL()
#foreach ($FieldInfo in $NoPKFields)
                .Value(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName})
#end
                .UpdateDocument();
            var _query = new MongoSQL()
#foreach ($FieldInfo in $PKFields)
                .Where(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName})
#end
                .QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            var col = Mongodb.Pool(dbkey).GetCollection("${TableName}");
            var result = options.IsNull() ? col.Update(_query, update, UpdateFlags.Upsert) : col.Update(_query, update, options);
            if (delCache.IsNull()) return true;
            Cache2.Remove("${Project}.${TableName}Cache_", delCache);
            return true;
        }
        /// <summary>
        /// ${TableNameCN}修改并添加
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <returns>修改或添加是否成功</returns>
        public static bool UpdateAndInsert(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "") {
            return UpdateAndInsert($helper.LowerFirstChar2(${TableName}), dbkey, null, null, null);
        }
#else
        /// <summary>
        /// ${TableNameCN}修改并添加
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="options">选项</param>
        /// <param name="query">修改时条件</param>
        /// <returns>修改或添加是否成功</returns>
        public static bool UpdateAndInsert(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "", MongoUpdateOptions options = null, IMongoQuery query = null) {
            var update = new MongoSQL()
#foreach ($FieldInfo in $NoPKFields)
                .Value(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName})
#end
                .UpdateDocument();
            var _query = new MongoSQL()
#foreach ($FieldInfo in $PKFields)
                .Where(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${TableName}).${FieldInfo.ColumnName})
#end
                .QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            var col = Mongodb.Pool(dbkey).GetCollection("${TableName}");
            var result = options.IsNull() ? col.Update(_query, update, UpdateFlags.Upsert) : col.Update(_query, update, options);
            return true;
        }
        /// <summary>
        /// ${TableNameCN}修改并添加
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${TableName})">${TableNameCN}实体类</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <returns>修改或添加是否成功</returns>
        public static bool UpdateAndInsert(${TableName} $helper.LowerFirstChar2(${TableName}), string dbkey = "") {
            return UpdateAndInsert($helper.LowerFirstChar2(${TableName}), dbkey, null, null);
        }
#end
#end
#if($currTableOP.DeleteByID && $PKFields.Count>0)
#set($i = false)
#foreach($FieldInfo in $PKFields)
#if($FieldInfo.ColumnType != "string") #set($i = true) #end
#end
#if($CacheTime>0)
       /// <summary>
        /// ${TableNameCN}删除记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="query">修改时条件</param>
        /// <param name="delCache">删除成功后清理的CACHE key list，支持正则</param>
        /// <returns>删除是否成功</returns>
        public static bool DeleteByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType}#if($FieldInfo.ColumnType != "string")?#end $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end string dbkey = "", IMongoQuery query = null, string[] delCache = null) {
            if (#foreach($FieldInfo in $PKFields)${helper.LowerFirstChar2(${FieldInfo.ColumnName})}.#if($FieldInfo.ColumnType != "string")
IsNull#else
IsNullEmpty#end()#between
  && #end) return false;
            var _query = new MongoSQL()
#foreach ($FieldInfo in $PKFields)
                .Where(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${FieldInfo.ColumnName}))
#end
                .QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            var result = Mongodb.Pool(dbkey).GetCollection(${TableName}._).Remove(_query);
            if (delCache.IsNull()) return true;
            Cache2.Remove("${Project}.${TableName}Cache_", delCache);
            return true;
        }
        /// <summary>
        /// ${TableNameCN}删除记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <returns>删除是否成功</returns>
        public static bool DeleteByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType}#if($FieldInfo.ColumnType != "string")?#end $helper.LowerFirstChar2(${FieldInfo.ColumnName})#between
, #end, string dbkey = "") {
            return DeleteByID(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end dbkey, null, null);
        }
#if($i)
        /// <summary>
        /// ${TableNameCN}删除记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="query">修改时条件</param>
        /// <param name="delCache">删除成功后清理的CACHE key list，支持正则</param>
        /// <returns>删除是否成功</returns>
        public static bool DeleteByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end string dbkey = "", IMongoQuery query = null, string[] delCache = null) {
            return DeleteByID(#foreach($FieldInfo in $PKFields)(${FieldInfo.ColumnType}#if($FieldInfo.ColumnType != "string")?#end)$helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end dbkey, query, delCache);
        }
        /// <summary>
        /// ${TableNameCN}删除记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <returns>删除是否成功</returns>
        public static bool DeleteByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName})#between
, #end, string dbkey = "") {
            return DeleteByID(#foreach($FieldInfo in $PKFields)(${FieldInfo.ColumnType}#if($FieldInfo.ColumnType != "string")?#end)$helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end dbkey, null, null);
        }
#end
#if ($PKFields.Count==1)
        /// <summary>
        /// ${TableNameCN}删除多条记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})List">${FieldInfo.Memo}列表</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="query">删除时条件</param>
        /// <param name="delCache">修改成功后清理的CACHE key list，支持正则</param>
        /// <returns>删除是否成功</returns>
        public static bool DeleteByIDList(#foreach($FieldInfo in $PKFields)IEnumerable<${FieldInfo.ColumnType}> $helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end string dbkey = "", IMongoQuery query = null, string[] delCache = null) {
            var _query = new MongoSQL().Where(#foreach ($FieldInfo in $PKFields)${TableName}._${FieldInfo.ColumnName}#end, new BsonDocument("$in", new BsonArray(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName})List#end))).QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            var result = Mongodb.Pool(dbkey).GetCollection("${TableName}").Remove(_query);
            if (delCache.IsNull()) return true;
            Cache2.Remove("${Project}.${TableName}Cache_", delCache);
            return true;
        }
        /// <summary>
        /// ${TableNameCN}删除多条记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})List">${FieldInfo.Memo}列表</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <returns>删除是否成功</returns>
        public static bool DeleteByIDList(#foreach($FieldInfo in $PKFields)IEnumerable<${FieldInfo.ColumnType}> $helper.LowerFirstChar2(${FieldInfo.ColumnName})List#between
, #end, string dbkey = "") {
            return DeleteByIDList(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end dbkey, null, null);
        }
#end
#else
       /// <summary>
        /// ${TableNameCN}删除记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="query">删除时条件</param>
        /// <returns>删除是否成功</returns>
        public static bool DeleteByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType}#if($FieldInfo.ColumnType != "string")?#end $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end string dbkey = "", IMongoQuery query = null) {
            if (#foreach($FieldInfo in $PKFields)${helper.LowerFirstChar2(${FieldInfo.ColumnName})}.#if($FieldInfo.ColumnType != "string")
IsNull#else
IsNullEmpty#end()#between
  && #end) return false;
            var _query = new MongoSQL()
#foreach ($FieldInfo in $PKFields)
                .Where(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${FieldInfo.ColumnName}))
#end
                .QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            var result = Mongodb.Pool(dbkey).GetCollection(${TableName}._).Remove(_query);
            return true;
        }
        /// <summary>
        /// ${TableNameCN}删除记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <returns>删除是否成功</returns>
        public static bool DeleteByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName})#between
, #end, string dbkey = "") {
            return DeleteByID(#foreach($FieldInfo in $PKFields)(${FieldInfo.ColumnType}#if($FieldInfo.ColumnType != "string")?#end)$helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end dbkey, null);
        }
#if ($PKFields.Count==1)
        /// <summary>
        /// ${TableNameCN}删除多条记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})List">${FieldInfo.Memo}列表</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="query">删除时条件</param>
        /// <returns>删除是否成功</returns>
        public static bool DeleteByIDList(#foreach($FieldInfo in $PKFields)string $helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end string dbkey = "", IMongoQuery query = null) {
            var _query = new MongoSQL().Where(#foreach ($FieldInfo in $PKFields)${TableName}._${FieldInfo.ColumnName}#end, new BsonDocument("$in", new BsonArray(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName})List#end.Split(',')))).QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            var result = Mongodb.Pool(dbkey).GetCollection("${TableName}").Remove(_query);
            return true;
        }
        /// <summary>
        /// ${TableNameCN}删除多条记录
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})List">${FieldInfo.Memo}列表</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <returns>删除是否成功</returns>
        public static bool DeleteByIDList(#foreach($FieldInfo in $PKFields)string $helper.LowerFirstChar2(${FieldInfo.ColumnName})List#between
, #end, string dbkey = "") {
            return DeleteByIDList(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName})List, #end dbkey, null);
        }
#end
#end
#end
#if($currTableOP.IsExistByID && $PKFields.Count>0)
        /// <summary>
        /// ${TableNameCN}记录是否存在
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机连接</param>
        /// <param name="query">条件</param>
        /// <returns>记录是否存在</returns>
        public static bool IsExistByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end string dbkey = "", IMongoQuery query = null) {
            var _query = new MongoSQL()
#foreach ($FieldInfo in $PKFields)
                .Where(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${FieldInfo.ColumnName}))
#end
                .QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            return !Mongodb.Pool(dbkey).GetCollection("${TableName}").FindOneAs<${TableName}>(_query).IsNull();
        }
        /// <summary>
        /// ${TableNameCN}记录是否存在
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>记录是否存在</returns>
        public static bool IsExistByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName})#between
, #end, string dbkey = "") {
            return IsExistByID(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end dbkey, null);
        }
#end
#if($currTableOP.SelectByID && $PKFields.Count>0)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}按主键查询，返回数据的实体类
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="query">条件</param>
        /// <returns>返回单条记录的实体类</returns>
        public static ${TableName} SelectByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end string dbkey = "", IMongoQuery query = null) {
            string cacheNameKey = "${Project}.${TableName}Cache_SelectByID_{0}".FormatWith(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName}) + "_" + #end "_" + (query.IsNull() ? "" : query.ToJson()));
            return Cache2.Get<${TableName}>(cacheNameKey, cacheSeconds, () => {
                var _query = new MongoSQL()
#foreach ($FieldInfo in $PKFields)
                    .Where(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${FieldInfo.ColumnName}))
#end
                    .QueryDocument();
                if (query.IsNotNull()) _query = Query.And(_query, query);
                return Mongodb.Pool(dbkey).GetCollection("${TableName}").FindOneAs<${TableName}>(_query);
            });
        }
        /// <summary>
        /// ${TableNameCN}按主键查询，返回数据的实体类
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回单条记录的实体类</returns>
        public static ${TableName} SelectByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName})#between
, #end, string dbkey = "") {
            return SelectByID(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end dbkey, null);
        }
#else
        /// <summary>
        /// ${TableNameCN}按主键查询，返回数据的实体类
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="query">条件</param>
        /// <returns>返回单条记录的实体类</returns>
        public static ${TableName} SelectByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end string dbkey = "", IMongoQuery query = null) {
            var _query = new MongoSQL()
#foreach ($FieldInfo in $PKFields)
                .Where(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${FieldInfo.ColumnName}))
#end
                .QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            return Mongodb.Pool(dbkey).GetCollection("${TableName}").FindOneAs<${TableName}>(_query);
        }
        /// <summary>
        /// ${TableNameCN}按主键查询，返回数据的实体类
        /// </summary>
#foreach($FieldInfo in $PKFields)
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
#end
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回单条记录的实体类</returns>
        public static ${TableName} SelectByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName})#between
, #end, string dbkey = "") {
            return SelectByID(#foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end dbkey, null);
        }
#end
#if($CacheTime>0)
        /// <summary>
        /// 清除${TableNameCN}按主键查询的缓存
        /// </summary>
        public static void ClearCacheSelectByID(#foreach($FieldInfo in $PKFields)${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), #end IMongoQuery query = null) {
            string cacheName = "${Project}.${TableName}Cache_SelectByID_{0}";
            string cacheNameKey = string.Format(cacheName, #foreach($FieldInfo in $PKFields)$helper.LowerFirstChar2(${FieldInfo.ColumnName}) + "_" + #end "_" + (query.IsNull() ? "" : query.ToJson()));
            Cache2.Remove(cacheNameKey);
        }
#end
#end
#if($currTableOP.SelectPageList)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}查询数据，带分页
        /// </summary>
        /// <param name="pageIndex">当前第几页，从1开始</param>
        /// <param name="pageSize">每页记录数</param>
        /// <param name="totalRecords">返回总记录数</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="query">条件</param>
        /// <param name="sort">排序</param>
        /// <returns>返回实体记录集</returns>
        public static IList<${TableName}> SelectPageList(int pageIndex, int pageSize, out int totalRecords, string dbkey = "", IMongoQuery query = null, IMongoSortBy sort = null) {
            totalRecords = 0;
            string cacheNameKey = "${Project}.${TableName}Cache_SelectPageList_{0}_{1}_{2}_{3}".FormatWith(pageIndex, pageSize, query.IsNull() ? "" : query.ToJson(), sort.IsNull() ? "" : sort.ToJson());
            string cacheRecordsKey = "${Project}.${TableName}Cache_RecordsSelectPageList_{0}_{1}_{2}_{3}".FormatWith(pageIndex, pageSize, query.IsNull() ? "" : query.ToJson(), sort.IsNull() ? "" : sort.ToJson());
            IList<${TableName}> list = (IList<${TableName}>)Cache2.Get(cacheNameKey);
            if (!list.IsNull()) { totalRecords = (int)Cache2.Get(cacheRecordsKey); return list; }

            sort = sort ?? new SortByDocument();
            var col = Mongodb.Pool(dbkey).GetCollection("${TableName}");
            totalRecords = query.IsNull() ? (int)col.Count() : (int)col.Count(query);
            list = (query.IsNull() ? col.FindAllAs<${TableName}>() : col.FindAs<${TableName}>(query)).SetSortOrder(sort).SetSkip((pageIndex - 1) * pageSize).SetLimit(pageSize).ToList();

            Cache2.Insert(cacheNameKey, list, cacheSeconds);
            Cache2.Insert(cacheRecordsKey, totalRecords, cacheSeconds);
            return list;
        }
        /// <summary>
        /// ${TableNameCN}查询记录，带分页
        /// </summary>
        /// <param name="pageIndex">当前第几页，从1开始</param>
        /// <param name="pageSize">每页记录数</param>
        /// <param name="totalRecords">返回总记录数</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回实体记录集</returns>
        public static IList<${TableName}> SelectPageList(int pageIndex, int pageSize, out int totalRecords, string dbkey = "") {
            return SelectPageList(pageIndex, pageSize, out totalRecords, dbkey, null, null);
        }
#else
        /// <summary>
        /// ${TableNameCN}查询记录，带分页
        /// </summary>
        /// <param name="pageIndex">当前第几页，从1开始</param>
        /// <param name="pageSize">每页记录数</param>
        /// <param name="totalRecords">返回总记录数</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="query">条件</param>
        /// <param name="sort">排序</param>
        /// <returns>返回实体记录集</returns>
        public static IList<${TableName}> SelectPageList(int pageIndex, int pageSize, out int totalRecords, string dbkey = "", IMongoQuery query = null, IMongoSortBy sort = null) {
            totalRecords = 0;
            IList<${TableName}> list = null;
            sort = sort ?? new SortByDocument();
            var col = Mongodb.Pool(dbkey).GetCollection("${TableName}");
            totalRecords = query.IsNull() ? (int)col.Count() : (int)col.Count(query);
            list = (query.IsNull() ? col.FindAllAs<${TableName}>() : col.FindAs<${TableName}>(query)).SetSortOrder(sort).SetSkip((pageIndex - 1) * pageSize).SetLimit(pageSize).ToList();
            return list;
        }
        /// <summary>
        /// ${TableNameCN}查询记录，带分页
        /// </summary>
        /// <param name="pageIndex">当前第几页，从1开始</param>
        /// <param name="pageSize">每页记录数</param>
        /// <param name="totalRecords">返回总记录数</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回实体记录集</returns>
        public static IList<${TableName}> SelectPageList(int pageIndex, int pageSize, out int totalRecords, string dbkey = "") {
            return SelectPageList(pageIndex, pageSize, out totalRecords, dbkey, null, null);
        }
#end
#if($CacheTime>0)
        /// <summary>
        /// 清除${TableNameCN}查询记录，带分页的缓存
        /// </summary>
        public static void ClearCacheSelectPageList() {
            string cacheNameKey = "${Project}.${TableName}Cache_SelectPageList_(.+?)";
            string cacheRecordsKey = "${Project}.${TableName}Cache_RecordsSelectPageList_(.+?)";
            Cache2.RemoveByPattern(cacheNameKey);
            Cache2.RemoveByPattern(cacheRecordsKey);
        }
#end
#end
#if($currTableOP.SelectListByFK && $FKFields.Count>0)
#if($CacheTime>0)
#foreach ($FieldInfo in $FKFields)
        /// <summary>
        /// ${TableNameCN}查询指定外键记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="query">条件</param>
        /// <param name="sort">排序</param>
        /// <returns>返回实体记录集</returns>
        public static IList<${TableName}> SelectListBy${FieldInfo.ColumnName}(${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), string dbkey = "", IMongoQuery query = null, IMongoSortBy sort = null) {
            string cacheNameKey = "${Project}.${TableName}Cache_SelectListBy${FieldInfo.ColumnName}_{0}_{1}_{2}".FormatWith($helper.LowerFirstChar2(${FieldInfo.ColumnName}), query.IsNull() ? "" : query.ToJson(), sort.IsNull() ? "" : sort.ToJson());
            return Cache2.Get<IList<${TableName}>>(cacheNameKey, cacheSeconds, () => {
                var _query = new MongoSQL()
                    .Where(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${FieldInfo.ColumnName}))
                    .QueryDocument();
                if (query.IsNotNull()) _query = Query.And(_query, query);
                return Mongodb.Pool(dbkey).GetCollection("${TableName}").FindAs<${TableName}>(_query).ToList();
            });
        }
        /// <summary>
        /// ${TableNameCN}查询指定外键记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回实体记录集</returns>
        public static IList<${TableName}> SelectListBy${FieldInfo.ColumnName}(${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), string dbkey = "") {
            return SelectListBy${FieldInfo.ColumnName}($helper.LowerFirstChar2(${FieldInfo.ColumnName}), dbkey, null, null);
        }
        /// <summary>
        /// 清除${TableNameCN}查询指定外键记录的缓存
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
        /// <param name="query">条件</param>
        /// <param name="sort">排序</param>
        public static void ClearCacheSelectListBy${FieldInfo.ColumnName}(${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), IMongoQuery query = null, IMongoSortBy sort = null) {
            string cacheName = "${Project}.${TableName}Cache_SelectListBy${FieldInfo.ColumnName}_{0}_{1}_{2}";
            string cacheNameKey = string.Format(cacheName, $helper.LowerFirstChar2(${FieldInfo.ColumnName}), query.IsNull() ? "" : query.ToJson(), sort.IsNull() ? "" : sort.ToJson());
            Cache2.Remove(cacheNameKey);
        }
#end
#else
#foreach ($FieldInfo in $FKFields)
        /// <summary>
        /// ${TableNameCN}查询指定外键记录
        /// </summary>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
        /// <param name="query">条件</param>
        /// <param name="sort">排序</param>
        /// <returns>返回实体记录集</returns>
        public static IList<${TableName}> SelectListBy${FieldInfo.ColumnName}(${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), string dbkey = "", IMongoQuery query = null, IMongoSortBy sort = null) {
            var _query = new MongoSQL()
                .Where(${TableName}._${FieldInfo.ColumnName}, $helper.LowerFirstChar2(${FieldInfo.ColumnName}))
                .QueryDocument();
            if (query.IsNotNull()) _query = Query.And(_query, query);
            return Mongodb.Pool(dbkey).GetCollection("${TableName}").FindAs<${TableName}>(_query).ToList();
        }
        /// <summary>
        /// ${TableNameCN}查询指定外键记录
        /// </summary>
        /// <param name="$helper.LowerFirstChar2(${FieldInfo.ColumnName})">${FieldInfo.Memo}</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回实体记录集</returns>
        public static IList<${TableName}> SelectListBy${FieldInfo.ColumnName}(${FieldInfo.ColumnType} $helper.LowerFirstChar2(${FieldInfo.ColumnName}), string dbkey = "") {
            return SelectListBy${FieldInfo.ColumnName}($helper.LowerFirstChar2(${FieldInfo.ColumnName}), dbkey, null, null);
        }
#end
#end
#end
#if($currTableOP.SelectListByAll)
#if($CacheTime>0)
        /// <summary>
        /// ${TableNameCN}查询所有记录
        /// </summary>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="query">条件</param>
        /// <param name="sort">排序</param>
        /// <returns>返回实体记录集</returns>
        public static IList<${TableName}> SelectListByAll(string dbkey = "", IMongoQuery query = null, IMongoSortBy sort = null) {
            string cacheNameKey = "${Project}.${TableName}Cache_SelectListByAll_{0}_{1}".FormatWith(query.IsNull() ? "" : query.ToJson(), sort.IsNull() ? "" : sort.ToJson());
            return Cache2.Get<IList<${TableName}>>(cacheNameKey, cacheSeconds, () => {
                if (query.IsNull()) return Mongodb.Pool(dbkey).GetCollection("${TableName}").FindAllAs<${TableName}>().ToList();
                return Mongodb.Pool(dbkey).GetCollection("${TableName}").FindAs<${TableName}>(query).ToList();
            });
        }
        /// <summary>
        /// ${TableNameCN}查询所有记录
        /// </summary>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回实体记录集</returns>
        public static IList<${TableName}> SelectListByAll(string dbkey = "") {
            return SelectListByAll(dbkey, null, null);
        }
        /// <summary>
        /// ${TableNameCN}记录数
        /// </summary>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="query">条件</param>
        /// <returns>返回记录数</returns>
        public static long Count(string dbkey = "", IMongoQuery query = null) {
            string cacheNameKey = "${Project}.${TableName}Cache_Count_{0}".FormatWith(query.IsNull() ? "" : query.ToJson());
            return Cache2.Get<long>(cacheNameKey, cacheSeconds, () => {
                var col = Mongodb.Pool(dbkey).GetCollection("${TableName}");
                return query.IsNull() ? col.Count() : col.Count(query);
            });
        }
        /// <summary>
        /// ${TableNameCN}记录数
        /// </summary>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回记录数</returns>
        public static long Count(string dbkey = "") {
            return Count(dbkey, null);
        }
        /// <summary>
        /// ${TableNameCN}删除全部记录
        /// </summary>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        public static bool RemoveAll(string dbkey = "") {
            Mongodb.Pool(dbkey).GetCollection("${TableName}").RemoveAll();
            ClearCacheAll();
            return true;
        }
        /// <summary>
        /// ${TableNameCN}删除记录
        /// </summary>
        /// <param name="query">条件</param>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        public static bool Remove(IMongoQuery query, string dbkey = "") {
            Mongodb.Pool(dbkey).GetCollection("${TableName}").Remove(query);
            ClearCacheAll();
            return true;
        }
#else
        /// <summary>
        /// ${TableNameCN}查询所有记录
        /// </summary>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="query">条件</param>
        /// <param name="sort">排序</param>
        /// <returns>返回实体记录集</returns>
        public static IList<${TableName}> SelectListByAll(string dbkey = "", IMongoQuery query = null, IMongoSortBy sort = null) {
            if (query.IsNull()) return Mongodb.Pool(dbkey).GetCollection("${TableName}").FindAllAs<${TableName}>().ToList();
            return Mongodb.Pool(dbkey).GetCollection("${TableName}").FindAs<${TableName}>(query).ToList();
        }
        /// <summary>
        /// ${TableNameCN}查询所有记录
        /// </summary>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <returns>返回实体记录集</returns>
        public static IList<${TableName}> SelectListByAll(string dbkey = "") {
            return SelectListByAll(dbkey, null, null);
        }
        /// <summary>
        /// ${TableNameCN}记录数
        /// </summary>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="query">条件</param>
        /// <returns>返回记录数</returns>
        public static long Count(string dbkey = "", IMongoQuery query = null) {
            var col = Mongodb.Pool(dbkey).GetCollection("${TableName}");
            return query.IsNull() ? col.Count() : col.Count(query);
        }
        /// <summary>
        /// ${TableNameCN}记录数
        /// </summary>
        /// <returns>返回记录数</returns>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        public static long Count(string dbkey = "") {
            return Count(dbkey, null);
        }
        /// <summary>
        /// ${TableNameCN}删除全部记录
        /// </summary>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        public static bool RemoveAll(string dbkey = "") {
            Mongodb.Pool(dbkey).GetCollection("${TableName}").RemoveAll();
            return true;
        }
        /// <summary>
        /// ${TableNameCN}删除记录
        /// </summary>
        /// <param name="dbkey">存在数据库连接池中的连接key，为空时随机取连接key</param>
        /// <param name="query">条件</param>
        public static bool Remove(IMongoQuery query, string dbkey = "") {
            Mongodb.Pool(dbkey).GetCollection("${TableName}").Remove(query);
            return true;
        }
#end
#if($CacheTime>0)
        /// <summary>
        /// 清除${TableNameCN}查询所有记录的缓存
        /// </summary>
        public static void ClearCacheSelectListByAll() {
            //Cache2.Remove("${Project}.${TableName}Cache_SelectListByAll___");
            Cache2.RemoveByPattern("${Project}.${TableName}Cache_SelectListByAll_(.+?)");
        }
        /// <summary>
        /// 清除${TableNameCN}所有缓存
        /// </summary>
        public static void ClearCacheAll() {
            Cache2.RemoveByPattern("${Project}.${TableName}Cache_(.+?)");
        }
#end
#end
    }
}
